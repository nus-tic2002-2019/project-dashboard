[
  {
    "path": "TestCases.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "list 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "list  1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "list1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "todo abcdef123"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "list 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "list  1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "T| 1 | homework 2 "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "E| 0 | birthday party | John\u0027s house"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "D| 0 | project 2 | 12 Dec 2019 0900"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "D| 0 | project 3 | 19 Nov 2019 1557"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "A| 0 | House Chores | 01 Dec 2019 1200"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "A| 0 | Report | 17 Nov 2019 1558"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 17
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "KaydenKhor": 1
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public static void main(String[] args) throws IOException, DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public static void run() throws IOException, DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        TaskLists taskList \u003d new TaskLists();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        Storage textFile \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        boolean online \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String command \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            textFile.readFile(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        } catch (FileNotFoundException a) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            textFile.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        } catch (DukeExceptionFileInput e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            ui.showFileInputError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        while (online) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                message \u003d ui.readCommand().trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                command \u003d new Parser().parseInput(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            taskList.addToDo(message);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            textFile.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showToDoEmptyError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        ui.showTaskAdded(taskList.displayLatestTask(), taskList.getSize());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            taskList.addDeadline(message);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            textFile.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showDeadlineEmptyError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showDateTimeError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        ui.showTaskAdded(taskList.displayLatestTask(), taskList.getSize());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            taskList.addEvent(message);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            textFile.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showEventEmptyError();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        ui.showTaskAdded(taskList.displayLatestTask(), taskList.getSize());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"doAfter\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            taskList.addDoAfter(message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            textFile.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showDoAfterEmptyError();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showDateTimeError();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        ui.showTaskAdded(taskList.displayLatestTask(), taskList.getSize());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"list\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showList(taskList.displayList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (DukeExceptionEmptyList e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showListEmptyError();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"delete\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showDeletedTask(taskList.deleteTask(message), taskList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            textFile.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (DukeExceptionInvalidTaskInputFormat e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showInvalidTaskFormatError();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showInvalidTaskNumberError();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"done\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showDoneTask(taskList.doneTask(message));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (DukeExceptionInvalidTaskInputFormat e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showInvalidTaskFormatError();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showInvalidTaskNumberError();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"find\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showFindResult((taskList.findTask(message)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (DukeExceptionEmptyList e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showListEmptyError();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showDoAfterEmptyError();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        } catch (DukeExceptionFindNoResult e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            ui.showFindNoResult();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"bye\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        online \u003d false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        ui.showOffline();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        ui.showUnknownInputError();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                ui.showFileError();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                ui.showUnknownInputError();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        textFile.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 130,
      "-": 9
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 3
    }
  },
  {
    "path": "src/main/java/DukeExceptionEmptyList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class DukeExceptionEmptyList extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 2
    }
  },
  {
    "path": "src/main/java/DukeExceptionFileInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class DukeExceptionFileInput extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 2
    }
  },
  {
    "path": "src/main/java/DukeExceptionFindNoResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class DukeExceptionFindNoResult extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 2
    }
  },
  {
    "path": "src/main/java/DukeExceptionInvalidTaskInputFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class DukeExceptionInvalidTaskInputFormat extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 2
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * This parser will be able to parse the inputs from the user to a readable command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * for duke to process the inputs accordingly by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param userInput The string of words typed in by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return A readable command for duke to process based on the command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String parseInput(String userInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        userInput \u003d userInput.toLowerCase();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String command \u003d \"unknown\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (userInput.contains(\"bye\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            command \u003d \"bye\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (userInput.contains(\"done\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            command \u003d \"done\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (userInput.contains(\"list\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            command \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (userInput.contains(\"delete\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            command \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (userInput.contains(\"todo\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            command \u003d \"todo\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (userInput.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            command \u003d \"deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (userInput.contains(\"event\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            command \u003d \"event\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (userInput.contains(\"find\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            command \u003d \"find\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (userInput.contains(\"do\") \u0026\u0026 userInput.contains(\"after\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            command \u003d \"doAfter\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 44
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public static final String DEFAULT_PATH \u003d \"src/main/java/data/duke.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.filePath \u003d DEFAULT_PATH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Save the list of tasks into a text file in duke\u0027s root folder as duke.txt whenever user exits from duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param list The current list duke is handling."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @throws IOException If user defines their own file path, and the file path has some problem."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        for (int j \u003d 0; j \u003c list.size(); j++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            s \u003d s + list.get(j).getType() + \" \" + list.get(j).getTaskStatus() + \" \" + list.get(j).getTask() + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    + list.get(j).getDetails() + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            s \u003d s.replace(\"(by:\", \"|\").replace(\"(at:\", \"|\")."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    replace(\")\", \"\").replaceAll(\"\\\\[\", \"\")."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    replaceAll(\"]\", \"|\").replace(\"\\u2713\", \"1 \")."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    replace(\"\\u2718\", \"0 \").replace(\"after\", \"|\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        fw.write(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Read files from the default file path of duke, duke.txt whenever duke starts up."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param tasks The new task list created for this duke session to be throw into this function from the start of the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @throws IOException If the filepath has some problems."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @throws DukeException If the file context is not in the duke\u0027s list format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void readFile(TaskLists tasks) throws IOException, DukeExceptionFileInput {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        BufferedReader s \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        s \u003d new BufferedReader(new FileReader(DEFAULT_PATH));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String input \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        while ((input \u003d s.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            if (input.charAt(0) \u003d\u003d \u0027T\u0027 || input.charAt(0) \u003d\u003d \u0027E\u0027 || input.charAt(0) \u003d\u003d \u0027D\u0027 || input.charAt(0) \u003d\u003d \u0027A\u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                char status \u003d input.charAt(3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                assert status \u003d\u003d \u00270\u0027 || status \u003d\u003d \u00271\u0027 : \"At this point in time, task status should be either \" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        \"done(1) or not done(0), please check your task status in Duke.txt again.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                switch (Character.toString(input.charAt(0))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        input \u003d input.substring(6);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        tasks.addToDo(\"task \" + input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        if (status \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            int index \u003d tasks.getSize() - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            tasks.getList().get(index).setTaskDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        input \u003d input.substring(6);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        input \u003d input.replace(\"|\", \"/at\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        tasks.addEvent(\"event\" + input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        if (status \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            int index \u003d tasks.getSize() - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            tasks.getList().get(index).setTaskDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        input \u003d input.substring(6);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        input \u003d input.replace(\"|\", \"/by\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        tasks.addDeadline(\"_deadline\" + input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        if (status \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            int index \u003d tasks.getSize() - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            tasks.getList().get(index).setTaskDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    case \"A\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        input \u003d input.substring(6);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        input \u003d input.replace(\"|\", \"after\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        tasks.addDoAfter(\"_do\" + input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        if (status \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            int index \u003d tasks.getSize() - 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                            tasks.getList().get(index).setTaskDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                throw new DukeExceptionFileInput();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 98
    }
  },
  {
    "path": "src/main/java/TaskLists.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class TaskLists {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public TaskLists() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Get the current list size."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The current list size in integer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Get the current list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The current list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Check whether the list is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return True if list is empty, false if list is not empty."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return this.list.isEmpty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Runs through the current list till the end of the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return A string of list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @throws DukeExceptionEmptyList If the list is empty"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String displayList() throws DukeExceptionEmptyList {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            throw new DukeExceptionEmptyList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String answer \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            answer \u003d (answer + index + \".\" + this.list.get(i).getType() + this.list.get(i).getTaskStatus() + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    + this.list.get(i).getTask() + \" \" + this.list.get(i).getDetails());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            if (i \u003d\u003d getSize() - 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            answer +\u003d \"\\n\\t\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Users to search a task from the current list in accordance with the keyword he typed in."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param message The keyword user typed in to search"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The list of tasks which has the closest result from the searched keyword."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @throws DukeExceptionEmptyList If the list is empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String findTask(String message) throws DukeExceptionEmptyList, DukeExceptionFindNoResult {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        TaskLists foundResult \u003d new TaskLists();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            throw new DukeExceptionEmptyList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        message \u003d message.substring(5);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            if (this.list.get(i).getDescription().contains(message)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                foundResult.list.add(this.list.get(i));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (foundResult.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            throw new DukeExceptionFindNoResult();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return foundResult.displayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Displays the latest task of the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The latest task of the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String displayLatestTask() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        int number \u003d getSize() - 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return list.get(number).getType() + list.get(number).getTaskStatus() + \" \" + list.get(number).getTask() + \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                + list.get(number).getDetails();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Selected task by users."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param number The task number which is selected by user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The selected task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String displaySelectedTask(int number) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        assert number \u003e 1 : \"This selected number must be greater than 1 as the task\u0027s list index starts from 1 and \" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                \"there is no negative task number.\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return list.get(number).getType() + list.get(number).getTaskStatus() + \" \" + list.get(number).getTask() + \" \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                + list.get(number).getDetails() + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Duke adds a ToDo task."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param message Details of the ToDo task."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void addToDo(String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        list.add(new ToDo((message.substring(5))));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Duke adds a Deadlines task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param message Details of the Deadlines task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void addDeadline(String message) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        int index \u003d message.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        boolean readFromFile \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (message.charAt(0) \u003d\u003d \u0027_\u0027) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            readFromFile \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            message \u003d message.substring(1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        message \u003d message.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (message.charAt(9) \u003d\u003d \u0027 \u0027 \u0026\u0026 readFromFile \u003d\u003d false) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            throw new StringIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        list.add(new Deadlines(message.substring(9, index - 1), message.substring(index + 3), readFromFile));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Duke adds a Events task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param message Details of the Events task."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void addEvent(String message) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (message.charAt(7) \u003d\u003d \u0027 \u0027){"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            throw new StringIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        int index \u003d message.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        list.add(new Events(message.substring(6, index - 1), message.substring(index + 4)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Duke adds a DoAfter task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param message Details of the DoAfter task."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void addDoAfter(String message) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        int index \u003d message.toLowerCase().indexOf(\"after\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        boolean readFromFile \u003d false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (message.charAt(0) \u003d\u003d \u0027_\u0027) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            readFromFile \u003d true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            message \u003d message.substring(1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        message \u003d message.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (message.charAt(3) \u003d\u003d \u0027 \u0027 \u0026\u0026 readFromFile \u003d\u003d false) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            throw new StringIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        list.add(new DoAfter(message.substring(3, index - 1), message.substring(index + 5), readFromFile));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Duke deletes a task as defined by users."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param message The selected task as defined by user to delete."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The task that was deleted."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @throws DukeExceptionInvalidTaskInputFormat when users\u0027 input is not readable by duke."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String deleteTask(String message) throws DukeExceptionInvalidTaskInputFormat {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (message.length() \u003c 7 || message.charAt(6) !\u003d \u0027 \u0027 || message.charAt(7) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            throw new DukeExceptionInvalidTaskInputFormat();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String number \u003d message.substring(7).trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        int index \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        index \u003d index - 1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String selectedTask \u003d displaySelectedTask(index);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return selectedTask;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Duke sets a task done as defined by users."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param message The selected task defined by user to be set as done."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The task that was set as done."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @throws DukeExceptionInvalidTaskInputFormat when users\u0027 input is not readable by duke."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String doneTask(String message) throws DukeExceptionInvalidTaskInputFormat {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (message.length() \u003c 5 || message.charAt(4) !\u003d \u0027 \u0027 || message.charAt(5) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            throw new DukeExceptionInvalidTaskInputFormat();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String number \u003d message.substring(5).trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        int index \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        index \u003d index - 1;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.list.get(index).setTaskDone();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String selectedTask \u003d displaySelectedTask(index);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return selectedTask;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 211
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String readCommand() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String input \u003d this.in.nextLine();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Shows the line for the chatbot\u0027s box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return A straight line for the chatbox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return \"\\t________________________________________________________________\\n\\t\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Shows welcome message with logo."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String welcome \u003d \"Hello! I\u0027m Duke\\n\\tWhat can i do for you?\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(logo + showLine() + welcome + showLine());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Display the latest task added to the list along with the current Task list size."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param taskDetails A String of details of the current task added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param listSize    The current size of the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showTaskAdded(String taskDetails, int listSize) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String currentTask \u003d \"Got it. I\u0027ve added this task:\\n\\t\\t\" + taskDetails;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String numberOfTask \u003d \"\\n\\tNow you have \" + listSize + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + currentTask + numberOfTask + showLine());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Display the latest task deleted from the list along with the new updated Task List size after deleting."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param deletedTask A String of details of the current deleted task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param tasklist    The current tasklist."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showDeletedTask(String deletedTask, TaskLists tasklist) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String deletedTaskMessage \u003d \"Noted. I\u0027ve removed this task: \\n\\t\\t\" + deletedTask;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String deletedTaskMessage2 \u003d \"\\tNow you have \" + tasklist.getSize() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + deletedTaskMessage + deletedTaskMessage2 + showLine());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Display the current task set to done \u0026 update the status of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param doneTask A string of the description of the task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showDoneTask(String doneTask) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String doneMessage \u003d \"Nice! I\u0027ve marked this task as done: \\n\\t\" + doneTask;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + doneMessage + showLine());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Display the whole list to user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param list String of current task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showList(String list) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String listTask \u003d \"Here are the Tasks in your list:\\n\\t\" + list + \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + listTask + showLine());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Displays the matching result from the keyword search by user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @param list String of matching result list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showFindResult(String list) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String listResult \u003d \"Here are the matching tasks in your list:\\n\\t\" + list + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + listResult + showLine());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Displays goodbye message to users when they type in \"bye\"."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showOffline() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String goodbye \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + goodbye + showLine());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When user inputs a file that is not in the correct format or erroneous file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showFileInputError() { //can be for files input"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"There is something wrong with the previous file, please check the content\\n\\tof the file. I\u0027m unable to load the past task list.\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When user inputs a ToDO task yet not stating the description of the task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showToDoEmptyError() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"\\u2639 OOPS!!! The description of a todo cannot be empty.\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When user inputs an unknown command for duke to understand and process."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showUnknownInputError() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When user inputs a Deadlines task yet not stating the description of the task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showDeadlineEmptyError() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"\\u2639 OOPS!!! The description of the deadline cannot be empty.\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When user inputs a Events task yet not stating the description of the task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showEventEmptyError() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"\\u2639 OOPS!!! The description of the event cannot be empty.\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When user inputs a DoAfter task yet not stating the description of the task."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showDoAfterEmptyError() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"\\u2639 OOPS!!! The description/date of the task cannot be empty.\\n\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When duke access an empty list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showListEmptyError() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"\\u2639 You have an empty list.\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When user inputs an invalid task format."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showInvalidTaskFormatError() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"You\u0027ve entered an invalid format of Task, please check your input format again.\\n\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When user inputs a task numnber which is not in the index of the current list size."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showInvalidTaskNumberError() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"You\u0027ve entered an invalid value for Task, please key in valid task number.\\n\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Error while duke is reading the file. Maybe the content of the file or the filepath error."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showFileError() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"Duke is unable to read your file, please check your input filepath again.\\n\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Error while duke is reading the file. Maybe the content of the file or the filepath error."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showDateTimeError() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"Please check your date and time format and re-enter it according to the stated format\\n\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * When the find command is activated, duke is unable to find the relating task with the user\u0027s input."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void showFindNoResult() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String errorMessage \u003d \"Sorry, I am unable to find any task like that.\\n\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        System.out.println(showLine() + errorMessage + showLine());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 198
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "T| 0 | wer "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "T| 0 | wer "
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 2
    }
  },
  {
    "path": "src/main/java/task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    protected LocalDateTime dateAndTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    protected String stringDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public Deadlines(String description, String details, boolean readFromFile) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        String changedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        int julianDate, day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        LocalDateTime formattedDate \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        details \u003d details.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        int daysToAdd \u003d getDaysToAdd(details);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (readFromFile) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            formattedDate \u003d LocalDateTime.parse(details, formatter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            if (daysToAdd \u003c 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                formattedDate \u003d LocalDateTime.parse(details, formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                formattedDate \u003d formattedDate.now();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                julianDate \u003d formattedDate.getDayOfYear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                day \u003d julianDate % 7;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                daysToAdd \u003d day - daysToAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                if (daysToAdd \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    daysToAdd \u003d 7;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                } else if (daysToAdd \u003c 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    daysToAdd \u003d daysToAdd * -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                    daysToAdd \u003d 7 - daysToAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "                formattedDate \u003d formattedDate.plusDays(daysToAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        changedDate \u003d formattedDate.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.dateAndTime \u003d LocalDateTime.parse(changedDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.stringDateTime \u003d dateAndTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.type \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    private int getDaysToAdd(String details) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        details \u003d details.toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (details.contains(\"mon\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (details.contains(\"tues\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (details.contains(\"wednes\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (details.contains(\"thurs\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            return 3;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (details.contains(\"fri\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            return 4;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (details.contains(\"satur\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            return 5;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        if (details.contains(\"sun\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "            return 6;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Returns lateral location of the specified position."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * If the position is unset, NaN is returned."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The string version of the Date \u0026 Time"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return \"(by: \" + this.stringDateTime + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 85
    }
  },
  {
    "path": "src/main/java/task/DoAfter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class DoAfter extends Deadlines {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public DoAfter(String description, String details, boolean readFromFile) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        super(description, details, readFromFile);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.type \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Get date \u0026 time of the current DoAfter task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The current Date and Time in String"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return \"after \" + this.stringDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 18
    }
  },
  {
    "path": "src/main/java/task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    String details;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public Events(String description, String details) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.type \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.details \u003d \"(at: \" + details + \")\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Returns a String of Location of the current event task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The location of the current event task in String"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 21
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    protected char type;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Returns the description of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return The description of the task in string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Sets a task done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void setTaskDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Get the task status, whether is the current task done or not."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return a Tick Symbol if it is done, Cross symbol other wise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String getTaskStatus() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Get the type of current Task, if it is a todo, event, deadline or DoAfter task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * todo \u003d \u0027T\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * event \u003d \u0027E\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * deadline \u003d \u0027D\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * DpAfter \u003d \u0027A\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return [T/E/D/A]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return \"[\" + this.type + \"]\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * Returns the description of the current task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     * @return A string of the current task\u0027s description."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 64
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        this.type \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 9
    }
  },
  {
    "path": "src/test/java/DeadlinesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import task.Deadlines;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class DeadlinesTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void deadlinesTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        Deadlines list \u003d new Deadlines(\"deadline ThisTest\", \"2017-09-11 1100\", false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        assertEquals(\"(by: \" + \"11 Sep 2017 1100\" + \")\", list.getDetails());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 13
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void parseInputTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        assertEquals(\"doAfter\", new Parser().parseInput(\"do HOMEWORK2 After monday\"));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 10
    }
  },
  {
    "path": "src/test/java/TaskListsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "public class TaskListsTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    public void TaskListsTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        TaskLists testList \u003d new TaskLists();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "        assertEquals(true, testList.isEmpty());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaydenKhor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaydenKhor": 11
    }
  }
]
