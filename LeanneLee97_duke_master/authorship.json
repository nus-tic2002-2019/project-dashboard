[
  {
    "path": "src/main/java/DukeCommands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command to handle \"bye\" input resulting in a termination of the Duke program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints the bye message via the UI method, UI.bye()."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return UI.bye();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 20
    }
  },
  {
    "path": "src/main/java/DukeCommands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * An interface to be implemented by all the Command type objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * All Commands must implement an execute method, which will be accessed by the Duke.run() method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    String execute(TaskList tl, Storage st) throws IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 17
    }
  },
  {
    "path": "src/main/java/DukeCommands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command to create an instance of a Deadline Task. This will add the Deadline Task to the TaskList and the Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private String deadlineDetailsWhole;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private String deadlineName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private String dateFormatted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public DeadlineCommand(String deadlineDetailsWhole) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.deadlineDetailsWhole \u003d deadlineDetailsWhole;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Executes the Deadline command which creates a Deadline Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList The TaskList from the main Duke object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param storage The Storage from the main Duke object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * @return a newTask message into the console."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tString[] deadlineDetails \u003d deadlineDetailsWhole.split(\" /by \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tdeadlineName \u003d deadlineDetails[0].substring(9);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tLocalDate date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tif (deadlineDetails[1].equals(\"today\")){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tdate \u003d java.time.LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tdate \u003d LocalDate.parse(deadlineDetails[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tdateFormatted \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tTask deadline \u003d new Deadline(deadlineName, dateFormatted);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\ttaskList.addTaskList(deadline);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tstorage.writeToFile(taskList.getTaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\treturn UI.newTask(taskList.getTaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t} catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tif ( deadlineName \u003d\u003d null || deadlineName.trim().length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tthrow new Exception(Exception.Code.EMPTY_DEADLINE_DESCRIPTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tthrow new Exception(Exception.Code.MISSING_DEADLINE_DATETIME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t} catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tthrow new Exception(Exception.Code.WRONG_DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t} catch (Exception e){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn e.errorDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 64
    }
  },
  {
    "path": "src/main/java/DukeCommands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command to remove a Task from the TaskList and Storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Indicates which element of the TaskList needs to be deleted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Deletes a specific Task from the TaskList and Storage as indicated by the taskNum attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList The TaskList from the main Duke object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param storage The Storage from the main Duke object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            Task task \u003d list.remove(taskNum - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            int listSize \u003d  list.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            storage.writeToFile(list);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            return UI.removedTask(task, listSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t} catch (NumberFormatException e){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn new Exception(Exception.Code.EMPTY_DELETE_DESCRIPTION).toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t} catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn new Exception(Exception.Code.INVALID_TASK_NUMBER).toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 43
    }
  },
  {
    "path": "src/main/java/DukeCommands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command indicate that a Task from the TaskList and Storage has been completed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Indicates which element of the TaskList has been completed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private String[] doneDetails;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tprivate int taskNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public DoneCommand(String [] doneDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.doneDetails \u003d doneDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Marks a specific Task from the TaskList and Storage as indicated by the taskNum attribute as completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList The TaskList from the main Duke object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param storage The Storage from the main Duke object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttaskNum \u003d Integer.valueOf(doneDetails[1]) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tArrayList\u003cTask\u003e list \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tTask currTask \u003d list.get(taskNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tcurrTask.setStatusIconTrue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tstorage.writeToFile(list);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn UI.done(currTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t} catch (ArrayIndexOutOfBoundsException nfe){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tthrow new Exception(Exception.Code.EMPTY_DONE_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t} catch (IndexOutOfBoundsException ioobe){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tthrow new Exception(Exception.Code.INVALID_TASK_NUMBER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t} catch (Exception e){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn e.errorDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 50
    }
  },
  {
    "path": "src/main/java/DukeCommands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command to create an instance of a Event Task. This will add the Event Task to the TaskList and the Storage file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tprivate String eventDetailsWhole;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public EventCommand(String eventDetailsWhole) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.eventDetailsWhole \u003d eventDetailsWhole;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Executes the Event command which creates a Event Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003eTaking the TaskList and Storage object of the main Duke class as arguments, this command will create a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * new Deadline Task which will then be added to the TaskList and Storage objects. The UI will also be used to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * print a newTask message into the console."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList The TaskList from the main Duke object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param storage The Storage from the main Duke object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tString[] eventDetails \u003d eventDetailsWhole.split(\" /at \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\teventName \u003d eventDetails[0].substring(6);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tvenue \u003d eventDetails[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tTask event \u003d new Event(eventName, venue);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\ttaskList.addTaskList(event);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tstorage.writeToFile(taskList.getTaskList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\treturn UI.newTask(taskList.getTaskList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t} catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tif ( eventName \u003d\u003d null || eventName.trim().length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tthrow new Exception(Exception.Code.EMPTY_EVENT_DESCRIPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tthrow new Exception(Exception.Code.MISSING_EVENT_VENUE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t} catch (Exception e){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn e.errorDescription();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 56
    }
  },
  {
    "path": "src/main/java/DukeCommands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command to find a Task from the TaskList and Storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private String searchTerm;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public FindCommand(String searchTerm) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.searchTerm \u003d searchTerm;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Executes the Find command which finds a Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList The TaskList from the main Duke object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param storage The Storage from the main Duke object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * @return all matching tasks found in the console."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList tl, Storage st) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        StringBuilder toReturn \u003d new StringBuilder(UI.findStart());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        int taskcount \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        for (Task task : tl.getTaskList()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            String[] taskNameComponents \u003d task.description().split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            for (String nameComponent : taskNameComponents) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                if (nameComponent.equalsIgnoreCase(searchTerm)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttoReturn.append(\"     \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttoReturn.append(\"Task Number is: \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttoReturn.append(taskcount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttoReturn.append(\") \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttoReturn.append(task.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttoReturn.append(\"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttaskcount++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return toReturn.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 49
    }
  },
  {
    "path": "src/main/java/DukeCommands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command to print a list of all the Tasks in the TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic boolean isTaskOverdue(Task t){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tDateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        String oldDateFormatted \u003d t.getDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tLocalDate taskDeadlineDate \u003d LocalDate.parse(oldDateFormatted, formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tif ( taskDeadlineDate.isBefore(java.time.LocalDate.now())){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints into the console all the Tasks in the TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList The TaskList from the main Duke object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param storage The Storage from the main Duke object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tboolean haveOverdueTasks \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tSystem.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tfor (int a\u003d1; a\u003ctaskList.getSize()+1;a++){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tif (taskList.getTask(a-1).getSymbol().equals(\"D\") \u0026\u0026 isTaskOverdue(taskList.getTask(a-1))){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tSystem.out.println(\"\t\"+a+\". \"+taskList.getTask(a-1)+\" !OVERDUE!\" );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\thaveOverdueTasks \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tSystem.out.println(\"\t\"+a+\". \"+taskList.getTask(a-1) );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tif (haveOverdueTasks){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tSystem.out.println(\"Please type \u0027snooze\u0027 followed by the Task Number, to postpone overdue task(s) by a week\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 55
    }
  },
  {
    "path": "src/main/java/DukeCommands/SnoozeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command to change the date of a Deadline Task. This will update the Deadline Task to the TaskList and the Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class SnoozeCommand implements Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tprivate int taskNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tprivate String oldDateFormatted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private String newDateFormatted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public SnoozeCommand(int taskNum) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.taskNum \u003d taskNum-1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Executes the Snooze command which auto adds 1 week to the old deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList The TaskList from the main Duke object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param storage The Storage from the main Duke object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * @return a newSnooze message into the console."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tDateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tArrayList\u003cTask\u003e list \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tTask currTask \u003d list.get(taskNum);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        oldDateFormatted \u003d currTask.getDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tLocalDate oldLocalDate \u003d LocalDate.parse(oldDateFormatted, formatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tLocalDate newLocalDate \u003d oldLocalDate.plusDays(7);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tnewDateFormatted \u003d newLocalDate.format(formatter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tcurrTask.setDate(newDateFormatted);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tstorage.writeToFile(list);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn UI.snooze(currTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 51
    }
  },
  {
    "path": "src/main/java/DukeCommands/StartCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command to handle \"bye\" inputs resulting in a termination of the Duke program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class StartCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public StartCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints the start message via the UI method, UI.start()."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList The TaskList used to store the Tasks for this instance of Duke (not used in this method)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param storage The Storage used to store the Tasks on the hard disk (not used in this method)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return UI.start();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 28
    }
  },
  {
    "path": "src/main/java/DukeCommands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command to create an instance of a Todo Task. This will add the Todo Task to the TaskList and the Storage file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tprivate String todoName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic TodoCommand(String todoName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tthis.todoName \u003d todoName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * Executes the Todo command which creates a Todo Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * \u003cp\u003e\u003c/p\u003eTaking the TaskList and Storage object of the main Duke class as arguments, this command will create a new"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * Deadline Task which will then be added to the TaskList and Storage objects. The UI will also be used to print a newTask message into the console."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * @param taskList The TaskList from the main Duke object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * @param storage The Storage from the main Duke object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tif ( todoName\u003d\u003dnull || todoName.trim().length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tthrow new Exception(Exception.Code.EMPTY_TODO_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tArrayList\u003cTask\u003e list \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tTask todo \u003d new Todo(todoName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttaskList.addTaskList(todo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tstorage.writeToFile(list);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn UI.newTask(list);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t} catch (Exception e){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\treturn e.errorDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 45
    }
  },
  {
    "path": "src/main/java/DukeCommands/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A Command meant to handle the event in which an unknown command is given by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class UnknownCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public UnknownCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints into the console the error message when an unknown command is given, via the instantiation of an"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * UnknownCommandException."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList The TaskList from the main Duke object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param storage The Storage from the main Duke object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new Exception(Exception.Code.UNKNOWN_COMMAND).errorDescription();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t//return \"test\"; "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 29
    }
  },
  {
    "path": "src/main/java/DukeExceptions/Exception.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeExceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class Exception extends RuntimeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public enum Code {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tUNKNOWN_COMMAND, // done "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tEMPTY_TODO_DESCRIPTION, //done"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tEMPTY_DONE_DESCRIPTION, // done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        INVALID_TASK_NUMBER, // done for done, not yet for delete"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        EMPTY_DEADLINE_DESCRIPTION, // done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        MISSING_DEADLINE_DATETIME, // done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        EMPTY_EVENT_DESCRIPTION, //done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        MISSING_EVENT_VENUE, //done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tEMPTY_DELETE_DESCRIPTION,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tFILE_CONTENTS_FORMAT_ERROR, // done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tWRONG_DEADLINE_FORMAT // done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private Code code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public Exception(Code code) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String errorDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tswitch (code) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase UNKNOWN_COMMAND:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase EMPTY_TODO_DESCRIPTION:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            \treturn \"☹ OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        case EMPTY_DONE_DESCRIPTION:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn \"☹ OOPS!!! You must provide a task number for \u0027done\u0027 command!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        case INVALID_TASK_NUMBER:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn \"☹ OOPS!!! You entered an invalid task number!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        case EMPTY_DEADLINE_DESCRIPTION:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn \"☹ OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase MISSING_DEADLINE_DATETIME:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        \treturn \"☹ OOPS!!! The date and or time of a deadline must contain \u0027 /by \u0027.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        case EMPTY_EVENT_DESCRIPTION:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn \"☹ OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        case MISSING_EVENT_VENUE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        \treturn \"☹ OOPS!!! The venue of an event must contain \u0027 /at \u0027.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase EMPTY_DELETE_DESCRIPTION:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn \"☹ OOPS!!! You must provide a task number for \u0027delete\u0027 command!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase FILE_CONTENTS_FORMAT_ERROR:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn \"☹ OOPS!!! Please check the format of your file contents\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase WRONG_DEADLINE_FORMAT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn \"☹ OOPS!!! Please write the deadline format like this yyyy-mm-dd format (e.g., 2019-10-15)\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tdefault:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 65
    }
  },
  {
    "path": "src/main/java/DukeTasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeTasks; "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A type of Task that includes a date attribute for the Task to be completed by. Also includes two SimpleDateFormatter."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Constructor for a Deadline Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param description A String which represents the name of the Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param by A String which represents the date and time of the Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tthis.setSymbol(\"D\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return \"[\"+this.getSymbol()+\"]\" + this.getStatusIcon() +\" \"+ super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    \treturn this.getSymbol() + \" | \" + this.getStatus() + \" | \" + super.toString() + \" | \" + by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns a String date of the Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003eTo be implemented by Deadline Task class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return A String that returns the date of Deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     public String getDate(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\treturn by;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 40
    }
  },
  {
    "path": "src/main/java/DukeTasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeTasks; "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A type of Task that includes a date attribute for the date in which the Task takes place."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Constructor for an Event Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param description A String representing the name of the Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param at A String which represents the venue of the Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tthis.setSymbol(\"E\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return \"[\"+this.getSymbol()+\"]\" + this.getStatusIcon() +\" \"+ super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic String toSave() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return this.getSymbol() + \" | \" + this.getStatus() + \" | \" + super.toString() + \" | \" + at;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 28
    }
  },
  {
    "path": "src/main/java/DukeTasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeTasks; "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * An abstract Class extended by all the Task type classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * \u003cp\u003e\u003c/p\u003eEach Task contains a description, a symbol and an isDone attribute. Two abstract methods (toString(), toSave() and getDate()) are meant"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * to be implemented by any classes that extend the Task abstract class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tprotected String symbol;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * Returns the description of the Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * @return String which is the description of the Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic String description() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * Returns the status icon of the Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return String which is the status icon of the Task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return (isDone ? \"[V]\" : \"[X]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns the done status (true/false) of the Task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return String which is the done status (true/false) of the Task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic int getStatus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return (isDone ? 1 : 0); //return 1 or 0 symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Indicates that this Task has already been completed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic void setStatusIconTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Indicates that this Task has not been completed. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t * For future use cases or regression that might require status to be set to false."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic void setStatusIconFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns the Task type (T/E/D) of the Task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return String which is the Task type (T/E/D) of the Task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic String getSymbol() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Sets the Task type (T/E/D)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic void setSymbol(String symbol) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns a String description of the Task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return A String description of the Task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns a String representing the Task in a format to be saved into the hard disk\u0027s storage file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003eTo be implemented by each individual Task class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return A String representation of this Task formatted for the storage file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic abstract String toSave();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic abstract String getDate();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic abstract void setDate(String newDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 88
    }
  },
  {
    "path": "src/main/java/DukeTasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeTasks; "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * A simple Task which only indicates what task needs to be completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Constructor for a Todo Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param description A String representing the name of the Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tthis.setSymbol(\"T\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\treturn \"[\"+this.getSymbol()+\"]\" +this.getStatusIcon() +\" \"+ super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic String toSave() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return this.getSymbol() + \" | \" + this.getStatus() + \" | \" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 24
    }
  },
  {
    "path": "src/main/java/main/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeCommands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic Parser() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    \t}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    \tprivate void commandHasInput(String[] nextCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tassert nextCommand.length \u003e 1 : \"Command does not have an Input.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    \t}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tprivate void commandHasTaskNumber(String nextCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tObject obj \u003d Integer.parseInt(nextCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tassert obj instanceof Integer: \"Command does not have a Task.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    \t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t* Parses the input and returns a corresponding Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t* \u003cp\u003e\u003c/p\u003eWhen a String (commandLine) is supplied, this method will split commandLine into multiple words (via"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t* String.split(\" \"). This will result in a String array containing individual words. The first word is then used"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t* to determine which Command is to be returned."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t* @param commandLine Entire user input in String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t* @return Returns a corresponding Command object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic Command parse(String commandLine) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tString[] nextCommand \u003d commandLine.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tswitch (nextCommand[0]) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"hello\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new StartCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"bye\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new ByeCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"list\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new ListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"todo\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tString todoName \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tfor (int i \u003d 1; i \u003c nextCommand.length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttodoName +\u003d nextCommand[i] + \" \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new TodoCommand(todoName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"done\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new DoneCommand(nextCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"event\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new EventCommand(commandLine);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"deadline\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new DeadlineCommand(commandLine);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"delete\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tcommandHasInput(nextCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tcommandHasTaskNumber(nextCommand[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tint index \u003d Integer.parseInt(nextCommand[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new DeleteCommand(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"find\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tcommandHasInput(nextCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tcommandHasTaskNumber(nextCommand[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new FindCommand(nextCommand[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tcase \"snooze\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tcommandHasInput(nextCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tcommandHasTaskNumber(nextCommand[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tindex \u003d Integer.parseInt(nextCommand[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new SnoozeCommand(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tdefault:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tbreak;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\treturn new UnknownCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 82
    }
  },
  {
    "path": "src/main/java/main/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * Manages the storing of the TaskList to a file on the hard disk. This allows the list of Tasks to be stored and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * accessed for subsequent initialisations of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private Path path \u003d Paths.get(System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private File data \u003d new File(path + \"/data/duke.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tprivate static final int INDEXOFTASKDESCRIPTION \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns an ArrayList of tasks from the data file on the hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003eThis method is invoked whenever an instance of Duke is created. It reads from the data/duke.txt file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Should the file not be found, a FileNotFoundException is thrown and caught. A parser is also implemented in this"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * method to read from the data file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return An ArrayList of Tasks from the stored data file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e readFromFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        ArrayList\u003cTask\u003e toReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            Scanner sc \u003d new Scanner(data);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                String[] next \u003d sc.nextLine().split(\" | \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                switch (next[0]) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                case (\"T\"):"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tString todoName \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tfor (int a \u003d INDEXOFTASKDESCRIPTION; a \u003c next.length; a++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\ttodoName +\u003d next[a] + \" \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                    Task todo \u003d new Todo(todoName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                    if (Integer.valueOf(next[2]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                        todo.setStatusIconTrue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                    toReturn.add(todo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                case (\"E\"):"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tString eventName \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tString venue \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tfor (int a \u003d INDEXOFTASKDESCRIPTION; a \u003c next.length; a++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tif (!next[a].equals(\"|\")){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\teventName +\u003d next[a];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\teventName +\u003d \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t} else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\ta++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\tfor (int parameterIndex \u003d a; parameterIndex \u003c next.length; parameterIndex++){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\tvenue +\u003d next[parameterIndex];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\tif (parameterIndex \u003d\u003d next.length -1){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\t\tbreak;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\t} else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\t\tvenue +\u003d \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\t}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\tbreak;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tTask event \u003d new Event(eventName, venue);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tif (Integer.valueOf(next[2]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tevent.setStatusIconTrue();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\ttoReturn.add(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                case (\"D\"):"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tString deadlineName \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tString date \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tfor (int a \u003d INDEXOFTASKDESCRIPTION; a \u003c next.length; a++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tif (!next[a].equals(\"|\")){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\tdeadlineName +\u003d next[a];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\tdeadlineName +\u003d \" \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t} else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\ta++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\tfor (int parameterIndex \u003d a; parameterIndex \u003c next.length; parameterIndex++){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\tdate +\u003d next[parameterIndex];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\tif (parameterIndex \u003d\u003d next.length -1){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\t\tbreak;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\t} else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\t\tdate +\u003d \" \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t\t}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\t}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t\tbreak;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\t}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tTask deadline \u003d new Deadline(deadlineName, date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tif (Integer.valueOf(next[2]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t\tdeadline.setStatusIconTrue();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\ttoReturn.add(deadline);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        } catch (FileNotFoundException fileExp) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            System.out.println(fileExp);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Writes all the tasks in a given ArrayList into the data/duke.txt file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003eA StringBuilder is used to concatenate all the strings from the writetoFile() method of each Task. This is then"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * stored into the data file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param list ArrayList of all the Tasks to be written into the data file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic void writeToFile(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            FileWriter fw \u003d new FileWriter(data);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            StringBuilder toWrite \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                toWrite.append(task.toSave() + \" \\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            fw.write(toWrite.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        } catch (IOException ioExp) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "            System.err.println(ioExp);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 147
    }
  },
  {
    "path": "src/main/java/main/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * Stores all the Tasks in an ArrayList. Contains methods to access and update the ArrayList of Tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Instantiates a TaskList object with an empty ArrayList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Instantiates a TaskList object with an ArrayList of Task (given as an argument)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param list an ArrayList of Tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns a Task at given index of this TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return task at given index of this TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return this.list.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Replaces the ArrayList of this TaskList with another ArrayList of Tasks (given as an argument)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param list An ArrayList of Tasks to replace the ArrayList of this TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public void updateTaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns the ArrayList of Tasks of this TaskList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return The ArrayList of Tasks of this TaskList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Adds a single Task to this TaskList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param task A task to be added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public void addTaskList(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns the size of this TaskList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return Returns the size of this TaskList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic int getSize() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Returns the index of given Task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return Returns the index of given Task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic int indexOf(Task t) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return list.indexOf(t);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Changes the task at a given index."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic void changeTask(int index, Task t) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        list.set(index, t);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 92
    }
  },
  {
    "path": "src/main/java/main/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public interface UI {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints the first message when Duke is started."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return The starting message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    static String start() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return (\"Hello from \\n\" + logo + \"What can I do for you?\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tstatic String bye() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return (\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints the contents of the TaskList (given as an argument) whenever a new task is added to the TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param taskList A TaskList instance unique to each instance of Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return The message explaining a new task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    static String newTask(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                +   \"    \"  + taskList.get(taskList.size() - 1) + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                + \"Now you have \" + taskList.size() + \" tasks in the list. \\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /** "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints that a given Task is designated as done, typically when a DoneCommand is excuted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param task The Task designated as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return The done message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    static String done(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + \" \" + task + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints the size of the TaskList (given as an argument) and the Task to be removed (also given as an argument)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * of the TaskList whenever a Task is removed from the TaskList. Typically occurs when a RemoveCommand is executed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param task The Task to be removed from the TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param listSize The size of the TaskList, after removal of Task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return The message explaining the deletion of a task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    static String removedTask(Task task, int listSize) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return \" Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                + \"    \" + task + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "                + \"Now you have \" + listSize + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints the message portion of a find Command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return The starting message when a FindCommand is executed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    static String findStart() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return \"     Here are the matching tasks in your list: \\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Prints that a given Task is postponed, typically a deadline, when a Snooze Command is executed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @param task The Task designated as done."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @return The Snooze message."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    static String snooze(Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return \"Nice! I\u0027ve snoozed this task from:\\n\" + \" \" + task + \" to a week later. \\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 84
    }
  },
  {
    "path": "src/main/java/newDuke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeCommands.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.main.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeTasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import newDuke.DukeExceptions.Exception;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " * Duke runs as the main and this is where all the work is initialised at."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class newDuke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Constructs an instance of Duke and instantiates Storage and TaskList. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Throws a file contents format error exception if file contents cannot be read."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public newDuke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tstorage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttry{ "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tArrayList\u003cTask\u003e list \u003d storage.readFromFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tthis.taskList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t} catch (ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tthrow new Exception(Exception.Code.FILE_CONTENTS_FORMAT_ERROR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t} catch (Exception e){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tSystem.out.println(e.errorDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * Handles the parsing of inputs and execution of parsed commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * As long as a ByeCommand is not parsed, Duke will continue parsing for more commands. If a ByeCommand is"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * parsed, the while loop is terminated and Duke terminates."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     * @throws IOException When the Parser fails"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    private String run(String command) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        Command c \u003d parser.parse(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        return c.execute(taskList, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\tpublic static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\tString line;\t"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\twhile (true){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tnewDuke duke \u003d new newDuke();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tScanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tline \u003d in.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tSystem.out.println(duke.run(line));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t} catch (IOException io) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tSystem.err.println(io);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\tif (line.equals(\"bye\")){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 65
    }
  },
  {
    "path": "src/test/java/DukeTasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeTasks; "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public void testDeadlineAddedToTaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Description\", \"2019-12-31\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        Task t \u003d new Deadline(\"End of the Year\", \"2019-12-31\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        assertEquals(\"[D][X] End of the Year (by: Dec 31 2019)\", t.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public void testSaveFormat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        Task t \u003d new Deadline(\"TIC2002 Duke Project Deadline\", \"2019-12-31\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        assertEquals(\"D | 0 | submit TIC2002 Duke Project | Nov 17 2019\", t.toSave());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 23
    }
  },
  {
    "path": "src/test/java/DukeTasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "package newDuke.DukeTasks; "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public void testEventAddedToTaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        Event event \u003d new Deadline(\"Description\", \"home\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        Task t \u003d new Event(\"Attend New Year\u0027s Countdown Party\", \"Siloso, Sentosa\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        assertEquals(\"[E][X] Attend New Year\u0027s Countdown Party (at: Siloso, Sentosa)\", t.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    public void testSaveFormat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        Task t \u003d new Event(\"Study for TIC2002\", \"NUS\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "        assertEquals(\"E | 0 | Study for TIC2002 | NUS\", t.toSave());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeanneLee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeanneLee97": 23
    }
  }
]
