[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "YangShuogeng": 1
    }
  },
  {
    "path": "data/ToDoAfterList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "date|||T|false|bring food|||2019-12-12"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "task|||T|false|clean bed and room|||T|false|go to toilet"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 2
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "T|true|wake up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "D|false|return book and pen|2019-12-27T06:05:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "E|false|project meeting|2019-12-27T06:05:00|2019-12-27T06:05:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "T|true|open eyes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "T|false|go to toilet"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "T|false|prepare breakfast"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "T|false|play games"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "D|false|return shoes|2019-12-27T06:05:00"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "T|false|buy food"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 9
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import date.time.management.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import storage.StorageFile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import taskclasses.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import thrownexceptions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static ui.Ui.chatting_Vector_Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    //Main;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void main(String[] args) throws IOException, DecoderUnknownError, EncoderUnknowError, FilePathNotFound, InvalidStorageFilePathException, InputDateTimeTooEarly, DateTypeChooseWrongly, TimeTypeChooseWrongly, ToDoAfterTypeInformationWronglyInTxt, DateTimeInputFormatWrongly, DukeException, TheTaskNotExistInTheList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.LoginFace();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.Separated_Line();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.Greeting();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.Separated_Line();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cTask\u003e List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cToDoAfter\u003e ToDoAfterList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Date_Type, Time_Type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        StorageFile TaskStorageFile \u003d new StorageFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        List \u003d TaskStorageFile.CopyToVectorTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ToDoAfterList \u003d TaskStorageFile.CopyToVectorToDoAfterList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Date_Type \u003d Parser.Date_Display_Format();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.Separated_Line();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Time_Type \u003d Parser.Time_Display_Format();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.Separated_Line();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        chatting_Vector_Task(List, ToDoAfterList, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        TaskStorageFile.TransferToFile(List, ToDoAfterList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "YangShuogeng": 32
    }
  },
  {
    "path": "src/main/java/date/time/management/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package date.time.management;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import taskclasses.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import thrownexceptions.InputChoiceOutOfRange;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import thrownexceptions.InputDateTimeTooEarly;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static ui.Ui.Separated_Line;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected static LocalTime Time_Input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected static LocalDate Date_Input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected static LocalDateTime DateTime_Input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected static LocalDateTime DateTime_Creation \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Constructs a DateTime with input String date and String time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * This constructor will assign Time_Input(LocalTime), Date_Input(LocalDate) and DateTime_Input(LocalDateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param date date String;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param time time String;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public DateTime(String date, String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.Date_Input \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //To make time format become hh:mm;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if (time.length() \u003d\u003d 4) time \u003d \"0\" + time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.Time_Input \u003d LocalTime.parse(time);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //To assign DateTime_Input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DateTime_Input \u003d LocalDateTime.of(Date_Input, Time_Input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Constructs a DateTime with input String of date and time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * This constructor will assign Time_Input(LocalTime), Date_Input(LocalDate) and DateTime_Input(LocalDateTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param InfoFromText Information text which include date and time in LocalDateTime pattern;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public DateTime(String InfoFromText){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DateTime_Input \u003d LocalDateTime.parse(InfoFromText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Date_Input \u003d DateTime_Input.toLocalDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Time_Input \u003d DateTime_Input.toLocalTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To compare the input date and time is after the DateTime creation date and time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param input the date and time which going to compare in LocalDateTime type;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly If the input is before creation datetime, throw the error;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Comparision(LocalDateTime input) throws InputDateTimeTooEarly {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(!input.isAfter(DateTime_Creation)){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new InputDateTimeTooEarly();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To compare the input date and time is after the DateTime creation date and time;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param date the date which going to compare current date(LocalDate.now());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static boolean Comparision(String date) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDate input_date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return !input_date.isBefore(localDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Change the LocalDateTime type \"input\" to String"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param input LocalDateTime type \"input\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return String type of \"input\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String DateTimeToString(LocalDateTime input){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return input.format(DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the Date_Input"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return LocalDate Date_Input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public LocalDate getDate_Input(){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return Date_Input;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the Time_Input"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return LocalDate Time_Input"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public LocalTime getTime_Input() { return Time_Input; }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the DateTime_Input, LocalDateTime type;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return DateTime_Input;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static LocalDateTime getDateTime_Input(){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return DateTime_Input;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the DateTime_Creation, LocalDateTime type;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return DateTime_Creation;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private LocalDateTime getDateTime_Creation(){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return DateTime_Creation;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Adjust day or hour or minutes of the DateTime;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param input input is the value of change;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param DayOrHourOrMinus The changing target, Day/Hour/Minutes;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly if the updated DateTime is before DateTime_Creation, throw;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void DateTimeUpdater(int input, String DayOrHourOrMinus, DateTime dateTime) throws InputDateTimeTooEarly {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDateTime localDateTime \u003d dateTime.getDateTime_Input();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDateTime creation \u003d dateTime.getDateTime_Creation();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDate localDate \u003d dateTime.getDate_Input();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalTime localTime \u003d dateTime.getTime_Input();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (DayOrHourOrMinus){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //if(input\u003e0){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    localDateTime \u003d localDateTime.plusDays(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    localDate \u003d localDate.plusDays(input);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    dateTime.Date_Input \u003d localDate;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    dateTime.DateTime_Input \u003d localDateTime;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(localDateTime.isBefore(creation)){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        dateTime.DateTime_Input \u003d localDateTime.minusDays(input);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        dateTime.Date_Input \u003d localDate.minusDays(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        throw new InputDateTimeTooEarly();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    localDateTime \u003d localDateTime.minusDays(input);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    localDate \u003d localDate.minusDays(input);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    dateTime.Date_Input \u003d localDate;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    dateTime.DateTime_Input \u003d localDateTime;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    if(localDateTime.isBefore(creation)){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        dateTime.DateTime_Input \u003d localDateTime.plusDays(input);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        dateTime.Date_Input \u003d localDate.plusDays(input);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        throw new InputDateTimeTooEarly();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"H\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                if(input\u003e0){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    localDateTime \u003d localDateTime.plusHours(input);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    localTime \u003d localTime.plusHours(input);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    dateTime.Time_Input \u003d localTime;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    dateTime.DateTime_Input \u003d localDateTime;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(localDateTime.isBefore(creation)){"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        dateTime.DateTime_Input \u003d localDateTime.minusHours(input);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        dateTime.Time_Input \u003d localTime.minusHours(input);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        throw new InputDateTimeTooEarly();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    localDateTime \u003d localDateTime.minusHours(input);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    localTime \u003d localTime.minusHours(input);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    dateTime.Time_Input \u003d localTime;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    dateTime.DateTime_Input \u003d localDateTime;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    if(localDateTime.isBefore(creation)){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        dateTime.DateTime_Input \u003d localDateTime.plusHours(input);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        dateTime.Time_Input \u003d localTime.plusHours(input);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        throw new InputDateTimeTooEarly();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"M\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                if(input\u003e0){"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    localDateTime \u003d localDateTime.plusMinutes(input);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    localTime \u003d localTime.plusMinutes(input);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    dateTime.Time_Input \u003d localTime;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    dateTime.DateTime_Input \u003d localDateTime;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(localDateTime.isBefore(creation)){"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        dateTime.DateTime_Input \u003d localDateTime.minusMinutes(input);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        dateTime.Time_Input \u003d localTime.minusMinutes(input);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        throw new InputDateTimeTooEarly();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    localDateTime \u003d localDateTime.minusMinutes(input);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    localTime \u003d localTime.minusMinutes(input);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    dateTime.Time_Input \u003d localTime;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    dateTime.DateTime_Input \u003d localDateTime;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    if(localDateTime.isBefore(creation)){"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        dateTime.DateTime_Input \u003d localDateTime.plusMinutes(input);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        dateTime.Time_Input \u003d localTime.plusMinutes(input);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        throw new InputDateTimeTooEarly();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static int ChangingValue (){"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"      Please input the value you want to change. \\n\" +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"      (positive integer means increase, negative integer means minus)\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner ss \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return Integer.parseInt(ss.nextLine());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static String getDayHourMinute(){"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Please choose one of the following:\\n\" +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"      1. Day\\n\" +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"      2. Hour\\n\" +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"      3. Minute\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Separated_Line();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String D_H_M \u003d s.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (D_H_M){"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return \"D\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return \"H\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"3\":"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return \"M\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"     The index you chose does not correct. Please try again.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return getDayHourMinute();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static String getEventTaskDateTimeUpdateChoice() throws InputChoiceOutOfRange {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"      The task is \u0027event\u0027 type task. Please choose:\\n\" +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"      1. Starting DateTime\\n\" +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"      2. Ending DateTime\\n\" +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"      3. Both of above\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String choice \u003d s.nextLine();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (choice){"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return \"1\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return \"2\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"3\":"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return \"3\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                throw new InputChoiceOutOfRange();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the whether user want to update task date or description and details of date or time or description changes"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param task The task which is going to be updated"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param type The type of the task"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly If the updated date is earlier than the task creation date, then the error will throw to user."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void DateTimeChangingInformationCollector(Task task, String type) throws InputDateTimeTooEarly {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String D_H_M  \u003d getDayHourMinute();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int ChangingValue_Deadline, ChangingValue_Starting, ChangingValue_Ending;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DateTime deadline_datetime, starting_DateTime, ending_DateTime;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if (\"D\".equals(type)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                deadline_datetime \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                ChangingValue_Deadline \u003d ChangingValue();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                DateTimeUpdater(ChangingValue_Deadline, D_H_M, deadline_datetime);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            } else { //event;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                String DateTimeUpdateChoice \u003d getEventTaskDateTimeUpdateChoice();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                switch (DateTimeUpdateChoice){"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    case \"1\":"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        starting_DateTime \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        ChangingValue_Starting \u003d ChangingValue();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        DateTimeUpdater(ChangingValue_Starting, D_H_M, starting_DateTime);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    case \"2\":"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        ending_DateTime \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        ChangingValue_Ending \u003d ChangingValue();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        DateTimeUpdater(ChangingValue_Ending, D_H_M, ending_DateTime);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        starting_DateTime \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        ChangingValue_Starting \u003d ChangingValue();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        DateTimeUpdater(ChangingValue_Starting, D_H_M, starting_DateTime);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        ending_DateTime \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        ChangingValue_Ending \u003d ChangingValue();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        DateTimeUpdater(ChangingValue_Ending, D_H_M, ending_DateTime);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (NumberFormatException e){"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Separated_Line();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The changing value you input is not integer. Please try again. \");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Separated_Line();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            DateTimeChangingInformationCollector(task, type);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (InputChoiceOutOfRange e){"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Separated_Line();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The index of event datetime you is not correct. Please try again.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Separated_Line();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            DateTimeChangingInformationCollector(task, type);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 311
    }
  },
  {
    "path": "src/main/java/enumlist/Days.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package enumlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import thrownexceptions.EnumDayIndexWrongly;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.lang.module.FindException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.net.BindException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public enum Days {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    FIRST(\"1st\", 1),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    SECOND(\"2nd\", 2),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    THIRD(\"3rd\", 3),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    OTHERS(\"th\",4);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * enum Days constructor which include day in String and the index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param day day of the month in String"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param index index of the day in int"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    Days(String day, int index){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the Day from enum;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * e.g. 1st, 22th..."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return Day in String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getDay(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get index of the day"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * e.g. first day of the month the index is \"1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return index of the day in int"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public int getIndex(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the day String by using the index input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * e.g. If the index input is 4, the day is \"4th\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param index index of the day"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return day in String of the month"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly if the index number input is not in the enum Days list, there will be thrown an error to user;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String getDay(int index) throws EnumDayIndexWrongly {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String days \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(index\u003e3){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            days \u003d String.valueOf(index) + \"th\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return days;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for(Days d : Days.values()){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if(d.getIndex()\u003d\u003dindex){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                days \u003d d.getDay();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(days.equals(null)) throw new EnumDayIndexWrongly();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 71
    }
  },
  {
    "path": "src/main/java/enumlist/Month.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package enumlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import thrownexceptions.MonthIndexWrong;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public enum Month {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    Jan(\"JAN\", 1),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    January(\"JANUARY\", 1),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    Feb(\"FEB\", 2),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    FEBRUARY(\"FEBRUARY\", 2),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    Mar(\"MAR\", 3),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    March(\"MARCH\", 3),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    APR(\"APR\", 4),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    APRIL(\"APRIL\",4),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    MAY(\"MAY\",5),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    MAY_lONG(\"MAY \",5),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    JUNE(\"JUNE\",6),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    JULY(\"JULY\",7),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    AUG(\"AUG\",8),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    AUGUST(\"AUGUST\",8),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    SEP(\"SEP\",9),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    SEPTEMBER(\"SEPTEMBER\",9),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    OCT(\"OCT\",10),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    OCTOBER(\"OCTOBER\",10),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    NOV(\"NOV\",11),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    NOVEMBER(\"NOVEMBER\",11),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    DEC(\"DEC\",12),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    DECEMBER(\"DECEMBER\",12);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private String month;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * enum Month constructor which contain month and index input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param month month in String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param index index of the month in int"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    Month(String month, int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the index of the month"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return index in int"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public int getIndex(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get month in String"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return month in String"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getMonth(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the full name of the month base on the index input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * e.g. The input index is 11, therefor the month full name will be \"November\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param index index of the month"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return month full name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong is the index input is not in the enum Month range, there will be an error throw to user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String getMonth_FullName (int index) throws MonthIndexWrong {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String MONTH \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for(Month m : Month.values()){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if(m.getIndex() \u003d\u003d index \u0026\u0026 m.getMonth().length()\u003e3){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                MONTH \u003d m.month.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(MONTH.equals(null)) throw new MonthIndexWrong();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return FirstLetterUpperCase(MONTH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the month name in short form String."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * e.g. The month index input is 8, so the month name in short form is \"Aug\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param index index of month"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return month short form name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong If the month index input is not in the enum Month range, there will be an error be throw to user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String getMonth_ShortForm (int index) throws MonthIndexWrong {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String MONTH \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for(Month m : Month.values()){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if(m.getIndex() \u003d\u003d index){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                MONTH \u003d m.getMonth();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(MONTH.equals(null)) throw new MonthIndexWrong();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return FirstLetterUpperCase(MONTH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To only change the first letter of the input to Uppercase"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param LowerCase input String, all in lowerCase"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the input String with the first letter in Uppercase"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String FirstLetterUpperCase(String LowerCase){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LowerCase \u003d LowerCase.toLowerCase();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        char[] cs \u003d LowerCase.toCharArray();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        cs[0] -\u003d 32;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return String.valueOf(cs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 113
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import date.time.management.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import enumlist.Days;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import enumlist.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import taskclasses.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import thrownexceptions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.security.PublicKey;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check customer input String. If the input only has one word and not \"list\" and \"bye\"."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * This function will throw an error which will tell user that the input in incorrect and please try again;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param First_Word The first word of the customer input which used to compare the condition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input_Words The customer input which used to check length;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DukeException The error which the input is not correct."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Input_Length_Checking(String First_Word, String[] Input_Words) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(!First_Word.equals(\"list\") \u0026\u0026"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                !First_Word.equals(\"bye\") \u0026\u0026"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                !First_Word.equals(\"help\") \u0026\u0026"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                !First_Word.equals(\"update\") \u0026\u0026"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                !First_Word.equals(\"search\") \u0026\u0026"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                !First_Word.equals(\"datetype\") \u0026\u0026"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                !First_Word.equals(\"timetype\") \u0026\u0026"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                !First_Word.equals(\"find\") \u0026\u0026"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                !First_Word.equals(\"todoafter\") \u0026\u0026"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                !First_Word.equals(\"processing\") \u0026\u0026"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Input_Words.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new DukeException(First_Word);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To show Date format choices to customer and let them to choose."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Choices:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 1. MMM D YYY"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 2. Day of Month Year, e.g. 2nd of December 2019;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return  return the choice customer choose whether one or two."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Date_Display_Format() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Date_Type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Please choose the Date format:\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"       1. MMM D YYY\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       2. Day of Month Year\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner date_choice \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Date_Type \u003d date_choice.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(!Date_Type.equals(\"1\") \u0026\u0026 !Date_Type.equals(\"2\")){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Ui.Separated_Line();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The Date choice you choose is incorrect. Please try again.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Ui.Separated_Line();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return Parser.Date_Display_Format();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return Date_Type;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To show Time format choices to customer and let them to choose."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Choices:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 1. hh:mm  e.g. 16:22"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 2. H:mm  e.g. 06:22 pm"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the customer choice;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Time_Display_Format() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Time_Type;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Please choose Time display format:\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       1. hh:mm\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       2. h:mm AM/PM\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner time_choice \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Time_Type \u003d time_choice.nextLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(!Time_Type.equals(\"1\") \u0026\u0026 !Time_Type.equals(\"2\")){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Ui.Separated_Line();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The Time choice you choose is incorrect. Please try again.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Ui.Separated_Line();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return Parser.Time_Display_Format();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return Time_Type;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Date print type 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * After Customer choose the Date format 1, the program will call this function for Print method;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * This function will convert the task date into String accordingly;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Output type: \"MMM d yyyy\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param task The task which needs to be convert;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param START_END To let program know which type of task needs to convert;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return converted Date;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Date_Type_One(Task task, String START_END){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DateTime deadline;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (START_END){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                deadline \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                LocalDate localDate\u003d deadline.getDate_Input();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                date \u003d  DateTimeFormatter.ofPattern(\"MMM d yyyy\").format(localDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"start\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                DateTime starting \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                date \u003d starting.getDate_Input().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                DateTime ending \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                date \u003d ending.getDate_Input().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Date print type 1"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param localDate localDate which is going to convert"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return converted date in String"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Date_Type_One(LocalDate localDate){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Date print type 2"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * After Customer choose the Date format 2, the program will call this function for Print method;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * This function will convert the task date into String accordingly;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Output type: \"2nd of December 2019\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param task The task which needs to be convert;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param START_END To let program know which type of task needs to convert;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return converted Date for event task;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Date_Type_Two(Task task, String START_END) throws DateTimeInputWrongly, MonthIndexWrong, EnumDayIndexWrongly {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DateTime DATE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (START_END){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                DATE \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                date\u003ddate_generator(DATE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"start\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                DATE \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                date\u003ddate_generator(DATE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"end\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                DATE \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                date\u003ddate_generator(DATE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                throw new DateTimeInputWrongly();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Date printing type 2"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param localDate deadline task"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return converted Date for deadline task"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Date_Type_Two(LocalDate localDate) throws MonthIndexWrong, EnumDayIndexWrongly {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int MONTH, YEAR, DAY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String month, day, date;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        MONTH \u003d localDate.getMonthValue(); //int"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        YEAR \u003d localDate.getYear(); //int"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DAY \u003d localDate.getDayOfMonth();    //int"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        month \u003d Month.getMonth_FullName(MONTH);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        day \u003d Days.getDay(DAY);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return day + \" of \" + month + \" \" + YEAR;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Time print type 1"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * After Customer choose the Date format 1, the program will call this function for Print method;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * This function will convert the task date into String accordingly;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Output type: \"hh:mm\", 24hrs base;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return converted Time;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Time_Type_One(DateTime dateTime){"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return dateTime.getDateTime_Input().format(DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Time print type 2"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * After Customer choose the Date format 2, the program will call this function for Print method;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * This function will convert the task date into String accordingly;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Output type: \"h:mm AM/PM\", 12hrs base with AM/PM indicated;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return converted Time;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Time_Type_Two(DateTime dateTime){"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return dateTime.getDateTime_Input().format(DateTimeFormatter.ofPattern(\"h:mm a\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * This function is used to convert DateTime date to String in \"day of month year\" format;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param DATE DateTime which needs to be convert;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return converted String which in \"day of month year\" format;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong throw an error if the month value in the DATE is not valid (not in Jan to Dec range, 1-12);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly throw an error if the day of month value in the DATE is not valid;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static String date_generator(DateTime DATE) throws MonthIndexWrong, EnumDayIndexWrongly {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int MONTH, YEAR, DAY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String date, month, day;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDate localDate \u003d DATE.getDate_Input();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        MONTH \u003d localDate.getMonthValue(); //int"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        YEAR \u003d localDate.getYear(); //int"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DAY \u003d localDate.getDayOfMonth();    //int"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        month \u003d Month.getMonth_FullName(MONTH);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        day \u003d Days.getDay(DAY);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        date \u003d day + \" of \" + month + \" \" + YEAR;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get description from the customer input;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input the customer input String"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return description in the input in String type;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Description(String Input){"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String D;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String[] body \u003d Input.split(\" \");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int D_index \u003d Input.indexOf(\" \") + 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(body[0].equals(\"todo\")){"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            D \u003d Input.substring(D_index);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            int slash_index \u003d Input.length();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if(body[0].equals(\"deadline\")){"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                slash_index \u003d Input.lastIndexOf(\"by\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                slash_index \u003d Input.lastIndexOf(\"at\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            D \u003d Input.substring(D_index, slash_index - 1).trim();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return D.trim();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Extract deadline time from input;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input the deadline type input;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return deadline time in String type;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String deadline_time(String Input){"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //Take time out from Input"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String ST;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int ST_index \u003d Input.lastIndexOf(\"by\") + 3;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ST \u003d Input.substring(ST_index);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String[] input \u003d ST.split(\" \");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return ST;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Extract event time information from input String;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input the event type String input;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return event time inforamtion in String type;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Event_time(String Input){"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String ET;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int ET_index \u003d Input.lastIndexOf(\"at\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(ET_index \u003d\u003d -1){"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ET_index \u003d Input.lastIndexOf(\"on\") + 3;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ET_index \u003d ET_index + 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ET \u003d Input.substring(ET_index);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String[] ET_Array \u003d ET.split(\" \");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(ET_Array.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ET \u003d ET + \"59:59:99\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return ET.trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Extract starting time from the event time String;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param time Event time information in String type;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return event  starting time in String type;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Starting_Time(String time){"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        String period \u003d Event_time(time);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Starting;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int Dash_index \u003d time.lastIndexOf(\" -\u003e \");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Starting \u003d time.substring(0, Dash_index).trim();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return Starting;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Extract ending time from the event time String;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param time Event time String;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return event ending time in String;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Ending_Time(String time){"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Ending;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int Dash_index \u003d time.lastIndexOf(\" -\u003e \");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ending \u003d time.substring(Dash_index+4).trim();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return Ending;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Extract starting date information from input String"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param datetime Input time information in String which be extract from customer input information;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return date inforamtion of the input/task;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String date(String datetime){"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return datetime.substring(0, 10);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Extract ending date information from input String"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param startingDate The starting date string."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param datetime Input time information in String which be extract from customer input information;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return date inforamtion of the input/task;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String date(String startingDate, String datetime){"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(datetime.length() \u003c 6){"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return startingDate;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return datetime.substring(0, 10);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Extract time information which is after date information of the time extract from customer input information;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param datetime date and time information extracted from customer input information;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return time in String;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String time(String datetime){"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(datetime.length() \u003c 6){"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return datetime;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return datetime.substring(11);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Extract date and time inforamtion from the input String and combine together in the format: \"date time\""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param datetime input String which contain date and time information of the task;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return date+time in String;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String datetime(String datetime){"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String date_D \u003d date(datetime).trim();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String time_D \u003d time(datetime).trim();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return date_D + \" \" + time_D;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Extract task type from the information input which is the first word or character;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input the String input which from customer task input or from Storage text file;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return task type in String;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Input_Type(String Input){"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String[] Input_Words \u003d Input.split(\" \");    //To split input by \" \" into String Array;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return Input_Words[0];"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Part of search function. To check whether the search type is correct."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * There is only three type is valid;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 1. date"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 2. time"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 3. description"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param input The customer choice of search type"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws SearchTypeWrong throw error if the choice is not \"date\", \"time\" or \"description\";"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Search_Type_Checking(String input) throws SearchTypeWrong {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(!input.equals(\"date\") \u0026\u0026 !input.equals(\"time\") \u0026\u0026 !input.equals(\"description\")) throw new SearchTypeWrong();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 410
    }
  },
  {
    "path": "src/main/java/storage/StorageFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import date.time.management.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import taskclasses.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import thrownexceptions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static taskclasses.TaskList.Task_Generator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class StorageFile {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * An default file path which is \"data/duke.txt\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static final String DEFAULT_STORAGE_FILEPATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Constructs StorageFile with default file path"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public StorageFile() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.path \u003d Paths.get(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Constructs with input file path"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param filePath input file Path in String"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InvalidStorageFilePathException If the file path input not valid, an error will be throw to user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws FilePathNotFound If the file path not found, an error will be throw to user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public StorageFile(String filePath) throws InvalidStorageFilePathException, FilePathNotFound {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new InvalidStorageFilePathException(\"     Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(!FileExist(path)){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new FilePathNotFound(\"     Storage file not found.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check whether the file path input is valid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param filePath file Path in String"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return boolean whether valid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check whether the default file path is exist"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return boolean whether the default file path is exist"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public boolean FileExist(){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return (Files.exists(this.path));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check whether the input file path is exist"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param path file path in String input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return boolean whether the file path exist"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private boolean FileExist(Path path){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return (Files.exists(this.path));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * A function to convert the Task into String type which can be store into text file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param task the Task which is going to convert"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return Task in String type"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EncoderUnknowError If the type is not \"E\" or \"D\" or \"T\", an error will be throw to user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static String Encoder(Task task) throws EncoderUnknowError {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String type \u003d task.getType();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String starting, ending, deadline_timing;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        boolean status \u003d task.getStatus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch(type){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return type + \"|\" + status + \"|\" + description;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                deadline_timing \u003d task.getDeadline_DateTime_String();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return type + \"|\" + status + \"|\" + description + \"|\" + deadline_timing;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                starting \u003d task.getStarting_DateTime_String();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                ending \u003d task.getEnding_DateTime_String();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return type + \"|\" + status + \"|\" + description + \"|\" + starting + \"|\" + ending;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                throw new EncoderUnknowError();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To change the ToDoAfter type task into String"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param toDoAfter ToDoAfter"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return ToDoAfter in String format"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static String Encoder(ToDoAfter toDoAfter) throws EncoderUnknowError, ToDoAfterTypeInformationWronglyInTxt {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String taskInString, toDoAfterTaskInString, type, date;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDate localDate;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task task, toDoAfterTask;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        type \u003d toDoAfter.getToDoAfter_Type();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        toDoAfterTask \u003d toDoAfter.getToDoAfterTask();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        toDoAfterTaskInString \u003d Encoder(toDoAfterTask);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch(type){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"date\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                localDate \u003d toDoAfter.getDate();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                date \u003d localDate.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return \"date|||\" + toDoAfterTaskInString + \"|||\" + date;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                task \u003d toDoAfter.getTask();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                taskInString \u003d Encoder(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return \"task|||\" + toDoAfterTaskInString + \"|||\" + taskInString;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                throw new ToDoAfterTypeInformationWronglyInTxt();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * A function to convert String information in text file into Task type"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param task String task information"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return Task"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DecoderUnknownError If the String information not clear or correct, an error will be thrown to user"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static Task Decoder(String task) throws DecoderUnknownError {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task task_Vector;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String[] task_contents \u003d task.split(\"\\\\|\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String type \u003d task_contents[0];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String description \u003d task_contents[2];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String deadline_datetime, start, end;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        boolean status \u003d true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(task_contents[1].equals(\"false\")) status \u003d false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (type){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                task_Vector \u003d new Todo(description);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To get date, time for DataTime creation;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                deadline_datetime \u003d task_contents[3];"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To  create DateTime for Deadline creation;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                DateTime Deadline_DateTime \u003d new DateTime(deadline_datetime);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                task_Vector \u003d new Deadline(description, Deadline_DateTime);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To get starting and ending time information for event creation;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                start \u003d task_contents[3];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                end \u003d task_contents[4];"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                DateTime starting \u003d new DateTime(start);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                DateTime ending \u003d new DateTime(end);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                task_Vector \u003d new Event(description, starting, ending);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                throw new DecoderUnknownError();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        task_Vector.UpdateIsDone(status);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return task_Vector;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To generate ToDoAfter task by using String get from text file"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param toDoAfter ToDoAfter information get from text file"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return created ToDoAfter task"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static ToDoAfter Decoder_ToDoAfter(String toDoAfter) throws InputDateTimeTooEarly, DateTimeInputFormatWrongly, DukeException, ToDoAfterTypeInformationWronglyInTxt, DecoderUnknownError {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ToDoAfter toDoAfter_Task;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String type, date, task_Condition_String, task_ToDoAfter_String;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String[] toDoAfterInformation;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDate localDate;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task task_Condition, task_ToDoAfter;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        toDoAfterInformation \u003d toDoAfter.split(\"\\\\|\\\\|\\\\|\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //To get ToDoAfter task from the text String;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        task_ToDoAfter_String \u003d toDoAfterInformation[1];"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        task_ToDoAfter \u003d Decoder(task_ToDoAfter_String);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        type \u003d toDoAfterInformation[0];"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch(type){"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"date\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                date \u003d toDoAfterInformation[2];"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                toDoAfter_Task \u003d new ToDoAfter(\"date\", localDate, task_ToDoAfter);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return toDoAfter_Task;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                task_Condition_String \u003d toDoAfterInformation[2];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                task_Condition \u003d Decoder(task_Condition_String);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                toDoAfter_Task \u003d new ToDoAfter(\"task\", task_Condition, task_ToDoAfter);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return toDoAfter_Task;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                throw new ToDoAfterTypeInformationWronglyInTxt();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To copy converted Task information into Vector\u003cTask\u003e List"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return Vector\u003cTask\u003e List"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws FileNotFoundException If the file not found, the throw an error to user"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DecoderUnknownError If the decoder function got any error, an error will be sent to user"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public Vector\u003cTask\u003e CopyToVectorTaskList() throws FileNotFoundException, DecoderUnknownError {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cTask\u003e List \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        File f \u003d new File(String.valueOf(this.path));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        while(s.hasNext()){"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            String text \u003d s.nextLine();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            task \u003d Decoder(text);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            List.add(task);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return List;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public Vector\u003cToDoAfter\u003e CopyToVectorToDoAfterList() throws FileNotFoundException, ToDoAfterTypeInformationWronglyInTxt, DukeException, InputDateTimeTooEarly, DateTimeInputFormatWrongly, DecoderUnknownError {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cToDoAfter\u003e toDoAfterList \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        File f \u003d new File(String.valueOf(\"data/ToDoAfterList.txt\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        while(s.hasNext()){"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ToDoAfter toDoAfter;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            String text \u003d s.nextLine();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            toDoAfter \u003d Decoder_ToDoAfter(text);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            toDoAfterList.add(toDoAfter);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return toDoAfterList;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private void TransferTaskListToFile(Vector\u003cTask\u003e List) throws IOException, EncoderUnknowError {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String File_Directory \u003d String.valueOf(this.path);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //To clear content of existing txt file;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        FileWriter fw \u003d new FileWriter(File_Directory);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        fw.write(\"\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //Start writing Task(s) in Vector\u003cTask\u003e List into new txt file;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        FileWriter newfw \u003d new FileWriter(File_Directory, true);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String S_task;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int i\u003d0;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        while(i\u003cList.size()){"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            task \u003d List.get(i);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            S_task \u003d Encoder(task);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            newfw.write(S_task + System.lineSeparator());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        newfw.close();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private void TransferToDoAfterListToFile(Vector\u003cToDoAfter\u003e ToDoAfterList) throws IOException, EncoderUnknowError, ToDoAfterTypeInformationWronglyInTxt {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String File_Directory \u003d \"data/ToDoAfterList.txt\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //To clear content of existing txt file;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        FileWriter fw \u003d new FileWriter(File_Directory);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        fw.write(\"\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //Start writing ToDoAfter Task(s) in Vector\u003cToDoAfter\u003e List into new txt file;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        FileWriter newfw \u003d new FileWriter(File_Directory, true);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task ConditionTask, GoingToDoTask;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ToDoAfter toDoAfter;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String S_task, type;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int i\u003d0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        while(i\u003c ToDoAfterList.size()){"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            toDoAfter \u003d ToDoAfterList.get(i);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            S_task \u003d Encoder(toDoAfter);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            newfw.write(S_task + System.lineSeparator());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        newfw.close();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * The function to transfer all the Task information by using Encoder function from Vector\u003cTask\u003e List to String and store into txt file"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Vector\u003cTask\u003e List"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterList Vector\u003cToDoAfter\u003e ToDoAfter task list"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws IOException If the FileWrite those kind of function got any error, an error will be thrown to user"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EncoderUnknowError If Encoder has any error, an error will be thrown to user"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public void TransferToFile(Vector\u003cTask\u003e List, Vector\u003cToDoAfter\u003e ToDoAfterList) throws IOException, EncoderUnknowError, ToDoAfterTypeInformationWronglyInTxt {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        TransferTaskListToFile(List);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        TransferToDoAfterListToFile(ToDoAfterList);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 327
    }
  },
  {
    "path": "src/main/java/taskclasses/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package taskclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import date.time.management.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Constructor use to constructs Deadline Task which extends Task class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Has two different para for Task, description and type"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Has one para for Deadline its own, localDateTime"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param description description in String"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param localDateTime LocalDateTime in DateTime type"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public Deadline(String description, DateTime localDateTime){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        super(description, \"D\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.Deadline_timing \u003d localDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 22
    }
  },
  {
    "path": "src/main/java/taskclasses/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package taskclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import date.time.management.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * An constructor to construct an Event Task which is inherited from Task class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param description description in String"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Starting Starting time in DateTime type"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Ending Ending time in DateTime type"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public Event(String description, DateTime Starting, DateTime Ending){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        super(description, \"E\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.Ending \u003d Ending;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.Starting \u003d Starting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 18
    }
  },
  {
    "path": "src/main/java/taskclasses/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package taskclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import date.time.management.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    //For Deadline task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected DateTime Deadline_timing;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    //For Event task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected DateTime Starting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected DateTime Ending;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Constructs a Task class without any initialization."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public Task(){}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Constructs and initialize a Task class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param type Task Type: Todo, Event and Deadline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public Task(String description, String type){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the Icon base on the Task status."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return cross or tick."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getStatusIcon(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return (isDone ? String.valueOf(\u0027T\u0027) : \"F\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the description of the Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return a String, description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get a Deadline Task target deadline datetime in default LocalDateTime to String format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return String."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getDateTime(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //Build formatter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ISO_DATE_TIME;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDateTime Task_DateTime \u003d DateTime.getDateTime_Input();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return Task_DateTime.format(formatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get Deadline time in DateTime type;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return DateTime Deadline_timing;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public DateTime getDeadline_timing(){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.Deadline_timing;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get Event starting time in DateTime type;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return DateTime Starting;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public DateTime getStarting_Time(){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.Starting;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get Event ending time in DateTime type;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return DateTime Ending;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public DateTime getEnding_Time(){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.Ending;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get Deadline time in String type which transfer from default LocalDateTime to String method;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return String Deadline_timing;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getDeadline_DateTime_String(){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return Deadline_timing.getDateTime_Input().format(DateTimeFormatter.ISO_DATE_TIME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get Event starting time in String type which transfer from default LocalDateTime to String method;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return String starting;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getStarting_DateTime_String(){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return Starting.getDateTime_Input().format(DateTimeFormatter.ISO_DATE_TIME);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get Event ending time in String type which transfer from default LocalDateTime to String method;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return String ending;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getEnding_DateTime_String(){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return Ending.getDateTime_Input().format(DateTimeFormatter.ISO_DATE_TIME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the Task type T, E, or D;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return String type;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getType(){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the status of the Task: true or false."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return boolean, true or false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To update the task\u0027s status;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param current the boolean input, current is the new status which needs to be update to isDone in Task;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public void UpdateIsDone(boolean current){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.isDone \u003d current;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private void descriptionUpdater(String Description){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        description \u003d Description;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void TaskDescriptionUpdate(Task task){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"      Please key-in the new description to replace the original description.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String description \u003d s.nextLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        task.descriptionUpdater(description);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 153
    }
  },
  {
    "path": "src/main/java/taskclasses/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package taskclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import thrownexceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import date.time.management.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static date.time.management.DateTime.Comparision;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static date.time.management.DateTime.DateTimeChangingInformationCollector;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static parser.Parser.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static taskclasses.Task.TaskDescriptionUpdate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static ui.Ui.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check whether the input String is a number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param strNum input String"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return boolean"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static boolean isNumeric(String strNum) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        boolean ret \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Double.parseDouble(strNum);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ret \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return !ret;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To add one input String into Vector\u003cTask\u003e List."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * In the list, the function will check the task type and create Task accordingly.Then add to List."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param First_Word The First_Word of user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input The user input String"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input_Words The input String which stored as array"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List The Vector\u003cTask\u003e where the New Task will be added to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputTimeBeforeLocal If the Task input time is before the Task creation time, then an error will be thrown to user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputFormatWrongly If the Task input date or time format is wrong, an error will be thrown to user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void To_Add_New_Input_Into_List(String First_Word, String Input, String[] Input_Words, Vector\u003cTask\u003e List) throws InputTimeBeforeLocal, DateTimeInputFormatWrongly {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task New_task \u003d new Task();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            //if the input is Todo;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (First_Word) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    New_task \u003d new Todo(Description(Input));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    List.add(New_task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //if the input is Deadline;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"deadline\": {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String deadline_D \u003d deadline_time(Input).trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String date_D \u003d Parser.date(deadline_D);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String time_D \u003d Parser.time(deadline_D);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    DateTime timing \u003d new DateTime(date_D, time_D);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Comparision(timing.getDateTime_Input());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    New_task \u003d new Deadline(Description(Input), timing);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    List.add(New_task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //if the input is Event;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"event\": {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String datetime_D \u003d Event_time(Input).trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Starting \u003d Starting_Time(datetime_D);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Starting_Date \u003d date(Starting);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Starting_Time \u003d time(Starting);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Ending \u003d Ending_Time(datetime_D);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Ending_Date \u003d date(Starting_Date, Ending);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Ending_Time \u003d time(Ending);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    DateTime Starting_DateTime \u003d new DateTime(Starting_Date, Starting_Time);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    DateTime Ending_DateTime \u003d new DateTime(Ending_Date, Ending_Time);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    New_task \u003d new Event(Description(Input), Starting_DateTime, Ending_DateTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    List.add(New_task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }catch (InputDateTimeTooEarly e){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"The date/time you key-in is earlier than the time you create the Task. Please try again.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new DateTimeInputFormatWrongly();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.Out_After_Added(New_task, First_Word, List);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check the number which user decide to make the according Task to Done status is in the Task List"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * After checking and no error, then function will mark the Task as done"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List The Task List"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input_Words Input String array which is needed to compare with List length"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DoneNumberException If the number needed of input is not in the Task List range, an error will be thrown to user"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Done_Number(Vector\u003cTask\u003e List, String[] Input_Words) throws DoneNumberException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int DoneNumber \u003d Integer.parseInt(Input_Words[1]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int L_size \u003d List.size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(isNumeric(Input_Words[1]) || Input_Words.length !\u003d 2 || DoneNumber \u003e L_size || DoneNumber \u003c 1){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new DoneNumberException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int i \u003d Integer.parseInt(Input_Words[1]) - 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        List.get(i).isDone \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"       [\" + List.get(i).getStatusIcon() + \"] \" + List.get(i).getDescription());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check the number which user decide to make the according Task to Done status is in the Task List"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * After checking and no error, then function will mark the Task as processing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List The Task List"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input_Words Input String array which is needed to compare with List length"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DoneNumberException If the number needed of input is not in the Task List range, an error will be thrown to user"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Processing_Number(Vector\u003cTask\u003e List, String[] Input_Words) throws DoneNumberException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int Processing_Number \u003d Integer.parseInt(Input_Words[1]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int L_size \u003d List.size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(isNumeric(Input_Words[1]) || Input_Words.length !\u003d 2 || Processing_Number \u003e L_size || Processing_Number \u003c 1){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new DoneNumberException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int i \u003d Integer.parseInt(Input_Words[1]) - 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        List.get(i).isDone \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as processing:\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"       [\" + List.get(i).getStatusIcon() + \"] \" + List.get(i).getDescription());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check delete number and delete the Task from List"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List The Task List"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input_Words Input String array which is needed to compare with List length and delete from List"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DeleteNumberException If the delete number is not not whole number or our of List length, an error will thrown to user"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Delete_Number(Vector\u003cTask\u003e List, String[] Input_Words) throws DeleteNumberException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int DeleteNumber_Index \u003d Integer.parseInt(Input_Words[1]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int L_size \u003d List.size();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(isNumeric(Input_Words[1]) || Input_Words.length !\u003d 2 || DeleteNumber_Index \u003e L_size || DeleteNumber_Index \u003c 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new DeleteNumberException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task Deleted_Task \u003d List.remove(DeleteNumber_Index - 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.Out_After_Delete(Deleted_Task, List);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To print task list from Vector List"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Vector\u003cTask\u003e List"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date_Type The Date type user choose to print"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time_Type The Time type user choose to print"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputWrongly If the DateTime format is not correct, an error will be thrown to user"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong If the Month Index is not in the enum Month, an error will be thrown to user"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly If the Day Index is not in the enum Day, an error will be thrown to user"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Print_List(Vector\u003cTask\u003e List, String Date_Type, String Time_Type) throws DateTimeInputWrongly, MonthIndexWrong, EnumDayIndexWrongly {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Separated_Line();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(List.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     There is no Task in the List.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Here are the task(s) in your list:\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for (int i \u003d 0; i \u003c List.size(); i++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            int j \u003d i + 1;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Task current \u003d List.get(i);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            String StatusIcon \u003d current.getStatusIcon();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            String TypeIcon \u003d current.getType();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.print(\"       \");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.print(j + \".\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Print_Task(current, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To print single task timing. If the task type is todo, then nothing will be printed"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param current The task which is going to be print out"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date_Type Date printing type"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time_Type Time printing type"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputWrongly If the DateTime format is not correct, an error will be thrown to user"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong If the Month Index is not in the enum Month, an error will be thrown to user"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly If the Day Index is not in the enum Day, an error will be thrown to user"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void Print_Task(Task current, String Date_Type, String Time_Type) throws DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String StatusIcon \u003d current.getStatusIcon();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String TypeIcon \u003d current.getType();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.print(\"[\" + TypeIcon + \"][\" + StatusIcon + \"] \" + current.getDescription());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if (TypeIcon.equals(\"D\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.print(\" (by: \");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (Date_Type){"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"1\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Date_Type_One(current, \"deadline\") + \" \");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"2\":"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Date_Type_Two(current, \"deadline\") + \" \");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (Time_Type){"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"1\":"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Time_Type_One(current.getDeadline_timing()) + \")\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"2\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Time_Type_Two(current.getDeadline_timing()) + \")\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        else if (TypeIcon.equals(\"E\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.print(\" (at: \");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            //+ current.getStarting_DateTime_String() + \" -\u003e \" + current.getEnding_DateTime_String() + \")\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (Date_Type){"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"1\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Date_Type_One(current, \"start\") +\" \");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"2\":"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Date_Type_Two(current, \"start\") + \" \");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (Time_Type){"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"1\":"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Time_Type_One(current.getStarting_Time()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"2\":"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Time_Type_Two(current.getStarting_Time()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.print(\" -\u003e \");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (Date_Type){"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"1\":"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Date_Type_One(current, \"end\") + \" \");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"2\":"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Date_Type_Two(current, \"end\") + \" \");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (Time_Type){"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"1\":"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Time_Type_One(current.getEnding_Time()) + \")\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"2\":"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.print(Time_Type_Two(current.getEnding_Time()) + \")\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * The method used to print ToDoAfter List all information;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfter ToDoAfter List"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date_Type Date printing type"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time_Type Time printing type"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputWrongly If the DateTime format is not correct, an error will be thrown to user"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong If the Month Index is not in the enum Month, an error will be thrown to user"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly If the Day Index is not in the enum Day, an error will be thrown to user"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Print_List_ToDoAfter(Vector\u003cToDoAfter\u003e ToDoAfter, String Date_Type, String Time_Type) throws DateTimeInputWrongly, MonthIndexWrong, EnumDayIndexWrongly {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Task_Type;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(ToDoAfter.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     There is no Task in the List.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Here are the ToDoAfter task(s) in your list:\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for(int i\u003d0; i\u003cToDoAfter.size(); i++){"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            int j \u003d i+1;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ToDoAfter toDoAfter \u003d ToDoAfter.get(i);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Task_Type \u003dtoDoAfter.getToDoAfter_Type();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            assert (\"date\".equals(Task_Type) || \"task\".equals(Task_Type)): \"     The ToDoAfter Task type is not either \u0027date\u0027 or \u0027task\u0027\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            //Task type"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if (\"date\".equals(Task_Type)) { //Date type"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                LocalDate date \u003d toDoAfter.getDate();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                String date_with_type;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                if (\"1\".equals(Date_Type)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    date_with_type \u003d Date_Type_One(date);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    date_with_type \u003d Date_Type_Two(date);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.print(\"       \" + j + \".\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"ToDoAfter type: \" + Task_Type);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.print(\"         \" + \"Task: \");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_Task(toDoAfter.getToDoAfterTask(), Date_Type, Time_Type);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"         \" + \"ToDoAfter Date: \" + date_with_type);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"       \" + j + \".\" + \"Type: Task\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.print(\"         \" + \"Task: \");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_Task(toDoAfter.getTask(), Date_Type, Time_Type);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.print(\"\\n\" + \"         Task will do: \");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_Task(toDoAfter.getToDoAfterTask(), Date_Type, Time_Type);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To search by Specific Date and print the task list found"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Task list"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date Date of User want to search"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date_Type The date type user choose to print"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time_Type The time type user choose to print"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterList ToDoAfter List for searching"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List_Type List type for searching"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputWrongly If the DateTime Input is not correct, an error will be thrown to user"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly If the Month Index is not in the enum Month, an error will be thrown to user"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong If the Day Index is not in the enum Day, an error will be thrown to user"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void Print_List_Date(Vector\u003cTask\u003e List, String Date, String Date_Type, String Time_Type, Vector\u003cToDoAfter\u003e ToDoAfterList, String List_Type) throws DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalDate Date_Deadline, Date_Start, Date_End, input \u003d LocalDate.parse(Date);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DateTime Deadline, start, end;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cTask\u003e temp_List \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cToDoAfter\u003e temp_ToDoAfter \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int i\u003d0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ToDoAfter toDoAfter;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        List Type:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        1. Task List;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        2. ToDoAfter List;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        3. Both of above;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (List_Type){"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"1\":  //To search Task List only"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(i\u003d0; i\u003cList.size(); i++){"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d List.get(i);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    type \u003d task.getType();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            start \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            end \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Start \u003d start.getDate_Input();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_End \u003d end.getDate_Input();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Start) \u003d\u003d 0|| input.compareTo(Date_End) \u003d\u003d 0|| (input.isAfter(Date_Start) \u0026\u0026 input.isBefore(Date_End))) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                temp_List.add(task);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Deadline \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Deadline \u003d Deadline.getDate_Input();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Deadline) \u003d\u003d 0) temp_List.add(task);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(temp_List,Date_Type, Time_Type);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"2\": //To search ToDoAfter List only"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(i\u003d0; i\u003cToDoAfterList.size(); i++){"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    toDoAfter \u003d ToDoAfterList.get(i);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d toDoAfter.getToDoAfterTask();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    type \u003d task.getType();  //Either \"E\", \"T\" or \"D\" from the ToDoAfterTask;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            start \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            end \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Start \u003d start.getDate_Input();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_End \u003d end.getDate_Input();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Start) \u003d\u003d 0|| input.compareTo(Date_End) \u003d\u003d 0|| (input.isAfter(Date_Start) \u0026\u0026 input.isBefore(Date_End))) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                temp_ToDoAfter.add(toDoAfter);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Deadline \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Deadline \u003d Deadline.getDate_Input();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Deadline) \u003d\u003d 0) temp_ToDoAfter.add(toDoAfter);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(ToDoAfterList, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(i\u003d0; i\u003cList.size(); i++){"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d List.get(i);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    type \u003d task.getType();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            start \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            end \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Start \u003d start.getDate_Input();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_End \u003d end.getDate_Input();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Start) \u003d\u003d 0|| input.compareTo(Date_End) \u003d\u003d 0|| (input.isAfter(Date_Start) \u0026\u0026 input.isBefore(Date_End))) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                temp_List.add(task);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Deadline \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Deadline \u003d Deadline.getDate_Input();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Deadline) \u003d\u003d 0) temp_List.add(task);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(temp_List,Date_Type, Time_Type);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(i\u003d0; i\u003cToDoAfterList.size(); i++){"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    toDoAfter \u003d ToDoAfterList.get(i);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d toDoAfter.getToDoAfterTask();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    type \u003d task.getType();  //Either \"E\", \"T\" or \"D\" from the ToDoAfterTask;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            start \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            end \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Start \u003d start.getDate_Input();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_End \u003d end.getDate_Input();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Start) \u003d\u003d 0|| input.compareTo(Date_End) \u003d\u003d 0|| (input.isAfter(Date_Start) \u0026\u0026 input.isBefore(Date_End))) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                temp_ToDoAfter.add(toDoAfter);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Deadline \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Deadline \u003d Deadline.getDate_Input();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Deadline) \u003d\u003d 0) temp_ToDoAfter.add(toDoAfter);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(temp_ToDoAfter, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To search by Specific Time and print the Task(s) found"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Task list"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time Date of User want to search"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date_Type The date type user choose to print"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time_Type The time type user choose to print"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterList ToDoAfter List for searching"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List_Type Task List for searching"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputWrongly If the DateTime Input is not correct, an error will be thrown to user"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly If the Month Index is not in the enum Month, an error will be thrown to user"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong If the Day Index is not in the enum Day, an error will be thrown to user"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void Print_List_Time(Vector\u003cTask\u003e List, String Time, String Date_Type, String Time_Type, Vector\u003cToDoAfter\u003e ToDoAfterList, String List_Type) throws DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        LocalTime Date_Deadline, Date_Start, Date_End, input \u003d LocalTime.parse(Time);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DateTime Deadline, start, end;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cTask\u003e temp_List \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cToDoAfter\u003e temp_ToDoAfter \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int i\u003d0;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (List_Type){"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"1\": //Task List;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(i\u003d0; i\u003cList.size(); i++){"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d List.get(i);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    type \u003d task.getType();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            start \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            end \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Start \u003d start.getTime_Input();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_End \u003d end.getTime_Input();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Start) \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                    input.compareTo(Date_End) \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                    (input.isAfter(Date_Start) \u0026\u0026 input.isBefore(Date_End))) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                temp_List.add(task);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Deadline \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Deadline \u003d Deadline.getTime_Input();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Deadline) \u003d\u003d 0) temp_List.add(task);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(temp_List,Date_Type, Time_Type);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(ToDoAfter value : ToDoAfterList){"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value.getToDoAfterTask();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    type \u003d task.getType();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    switch(type){"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            start \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            end \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Start \u003d start.getTime_Input();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_End \u003d end.getTime_Input();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Start) \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            input.compareTo(Date_End) \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                    (input.isAfter(Date_Start) \u0026\u0026 input.isBefore(Date_End))){"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                temp_ToDoAfter.add(value);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Deadline \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Deadline \u003d Deadline.getTime_Input();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Deadline) \u003d\u003d 0) temp_ToDoAfter.add(value);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(temp_ToDoAfter, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(i\u003d0; i\u003cList.size(); i++){"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d List.get(i);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    type \u003d task.getType();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            start \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            end \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Start \u003d start.getTime_Input();"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_End \u003d end.getTime_Input();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Start) \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                    input.compareTo(Date_End) \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                    (input.isAfter(Date_Start) \u0026\u0026 input.isBefore(Date_End))) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                temp_List.add(task);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Deadline \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Deadline \u003d Deadline.getTime_Input();"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Deadline) \u003d\u003d 0) temp_List.add(task);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(temp_List,Date_Type, Time_Type);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(ToDoAfter value : ToDoAfterList){"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value.getToDoAfterTask();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    type \u003d task.getType();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    switch(type){"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            start \u003d task.getStarting_Time();"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            end \u003d task.getEnding_Time();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Start \u003d start.getTime_Input();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_End \u003d end.getTime_Input();"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Start) \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                    input.compareTo(Date_End) \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                    (input.isAfter(Date_Start) \u0026\u0026 input.isBefore(Date_End))){"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                temp_ToDoAfter.add(value);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Deadline \u003d task.getDeadline_timing();"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Date_Deadline \u003d Deadline.getTime_Input();"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(input.compareTo(Date_Deadline) \u003d\u003d 0) temp_ToDoAfter.add(value);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(temp_ToDoAfter, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To search by specific description and print the Task(s) found"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Task list"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Description Description of User want to search"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date_Type The date type user choose to print"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time_Type The time type user choose to print"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterList ToDoAfter List for searching"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List_Type Task List for searching"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputWrongly If the DateTime Input is not correct, an error will be thrown to user"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly If the Month Index is not in the enum Month, an error will be thrown to user"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong If the Day Index is not in the enum Day, an error will be thrown to user"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void Print_List_Description(Vector\u003cTask\u003e List, String Description, String Date_Type, String Time_Type, Vector\u003cToDoAfter\u003e ToDoAfterList, String List_Type) throws DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String ListTask_Description;"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cTask\u003e temp_List \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cToDoAfter\u003e temp_ToDoAfter \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (List_Type){"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"1\": //Task List;"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for (Task value : List) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value;"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ListTask_Description \u003d task.getDescription();"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if (Description.equals(ListTask_Description)) {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        temp_List.add(task);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(temp_List, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(ToDoAfter value : ToDoAfterList){"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value.getToDoAfterTask();"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ListTask_Description \u003d task.getDescription();"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(ListTask_Description.equals(Description)){"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        temp_ToDoAfter.add(value);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(temp_ToDoAfter, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for (Task value : List) {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value;"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ListTask_Description \u003d task.getDescription();"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if (Description.equals(ListTask_Description)) {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        temp_List.add(task);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(temp_List, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(ToDoAfter value : ToDoAfterList){"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value.getToDoAfterTask();"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ListTask_Description \u003d task.getDescription();"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(ListTask_Description.equals(Description)){"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        temp_ToDoAfter.add(value);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(temp_ToDoAfter, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To search by specific List type and print the Task(s) found"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Task list"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Type Task Type of User want to search"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date_Type The date type user choose to print"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time_Type The time type user choose to print"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterList ToDoAfter List for searching"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List_Type Task List for searching"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputWrongly If the DateTime Input is not correct, an error will be thrown to user"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly If the Month Index is not in the enum Month, an error will be thrown to user"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong If the Day Index is not in the enum Day, an error will be thrown to user"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void Print_List_Type(Vector\u003cTask\u003e List, String Type, String Date_Type, String Time_Type, Vector\u003cToDoAfter\u003e ToDoAfterList, String List_Type) throws DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String ListTask_Type;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cTask\u003e temp_List \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cToDoAfter\u003e temp_ToDoAfter \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        assert(Integer.parseInt(List_Type) \u003c 4): \"The List_Type can only be 1, 2 or 3.\";"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (List_Type){"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"1\": //Task List;"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for (Task value : List) {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value;"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ListTask_Type \u003d task.getType();"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if (Type.equals(ListTask_Type)) {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        temp_List.add(task);"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(temp_List, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(ToDoAfter value : ToDoAfterList){"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value.getToDoAfterTask();"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String type \u003d task.getType();"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(type.equals(Type)){"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        temp_ToDoAfter.add(value);"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(temp_ToDoAfter, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for (Task value : List) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value;"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ListTask_Type \u003d task.getType();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if (Type.equals(ListTask_Type)) {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        temp_List.add(task);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(temp_List, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                for(ToDoAfter value : ToDoAfterList){"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d value.getToDoAfterTask();"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String type \u003d task.getType();"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(type.equals(Type)){"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        temp_ToDoAfter.add(value);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(temp_ToDoAfter, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To create Task."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Only available for three different task types:"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 1. todo"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 2. event"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 3. deadline"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Input The task information for task creation"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the created task"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputFormatWrongly The date/time format incorrect"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DukeException The task type  incorrect"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly The date/time input is before the task creation date/time"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static Task Task_Generator(String Input) throws DateTimeInputFormatWrongly, DukeException, InputDateTimeTooEarly {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task New_task;"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String[] input_information \u003d Input.split(\" \");"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String First_Word \u003d input_information[0];"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (First_Word) {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //if the input task type is Todo;"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    //To create new Task, New_task;"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    New_task \u003d new Todo(Description(Input));"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //if the input task type is Deadline;"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"deadline\": {"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String deadline_D \u003d deadline_time(Input).trim();"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String date_D \u003d Parser.date(deadline_D);"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String time_D \u003d Parser.time(deadline_D);"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    DateTime timing \u003d new DateTime(date_D, time_D);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Comparision(timing.getDateTime_Input());"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    //To create new Task, New_task;"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    New_task \u003d new Deadline(Description(Input), timing);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //if the input task type is Event;"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"event\": {"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String datetime_D \u003d Event_time(Input).trim();"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Starting \u003d Starting_Time(datetime_D);"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Starting_Date \u003d date(Starting);"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Starting_Time \u003d time(Starting);"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Ending \u003d Ending_Time(datetime_D);"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Ending_Date \u003d date(Ending);"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String Ending_Time \u003d time(Ending);"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    DateTime Starting_DateTime \u003d new DateTime(Starting_Date, Starting_Time);"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    DateTime Ending_DateTime \u003d new DateTime(Ending_Date, Ending_Time);"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    //To create new Task, New_task;"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    New_task \u003d new Event(Description(Input), Starting_DateTime, Ending_DateTime);"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                default:{"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    throw new DukeException();"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }catch (InputDateTimeTooEarly e){"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The date/time you key-in for the task is earlier than the task creation time. Please try again.\");"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new InputDateTimeTooEarly();"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new DateTimeInputFormatWrongly();"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return New_task;"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check whether the Task which will be the"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param description Using this description to find the task with same description in Vector\u003cTask\u003e List"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List The task list"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the Task found in the list"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws TheTaskNotExistInTheList If the task in exist, throw an error to inform user."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static Task TodoTaskIsExist(String description, Vector\u003cTask\u003e List) throws TheTaskNotExistInTheList {"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int List_size \u003d List.size();"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String ListTask_description;"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for (Task task : List) {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ListTask_description \u003d task.getDescription();"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if (ListTask_description.equals(description)){"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        throw new TheTaskNotExistInTheList();"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static Task DeadlineExistInTaskList(Vector\u003cTask\u003e List, String timing, String description) throws TheTaskNotExistInTheList {"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Task_timing, Task_Description;"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for (Task task : List) {"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Task_Description \u003d task.getDescription();"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Task_timing \u003d task.getDeadline_DateTime_String();"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if (Task_Description.equals(description) \u0026\u0026 Task_timing.equals(timing)) {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        throw new TheTaskNotExistInTheList();"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static Task EventExistInTaskList(Vector\u003cTask\u003e List, String starting, String ending, String description) throws TheTaskNotExistInTheList {"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Task_start, Task_end, Task_description;"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for(Task task : List){"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Task_description \u003d task.getDescription();"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Task_start \u003d task.getStarting_DateTime_String();"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Task_end \u003d task.getEnding_DateTime_String();"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if(Task_description.equals(description) \u0026\u0026 Task_end.equals(ending) \u0026\u0026 Task_start.equals(starting)){"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        throw new TheTaskNotExistInTheList();"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static Task TaskIsExist(Task task, Vector\u003cTask\u003e List) throws TheTaskNotExistInTheList {"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int List_size \u003d List.size();"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String type \u003d task.getType();"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String deadline_timing, start_timing, end_timing;"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    return TodoTaskIsExist(description, List);"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    deadline_timing \u003d task.getDeadline_DateTime_String();"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    return DeadlineExistInTaskList(List, deadline_timing, description);"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    start_timing \u003d task.getStarting_DateTime_String();"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    end_timing \u003d task.getEnding_DateTime_String();"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    return EventExistInTaskList(List, start_timing, end_timing, description);"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    throw new TheTaskNotExistInTheList();"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (TheTaskNotExistInTheList e){"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"The task which needs to done first does not exist in the Task List. Please try again.\");"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new TheTaskNotExistInTheList();"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To create ToDoAfter task with date condition required."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * This method checks the date and task information user key-in is whether correct format."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly If the date information user key-in is incorrect format, the method will throw an error to user and let user try again"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static ToDoAfter ToDoAfterDate() throws InputDateTimeTooEarly, DateTimeInputFormatWrongly {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String date, task;"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task Task_NeedsToDo;"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ToDoAfter Task_ToDoAfter;"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Separated_Line();"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            //To get the Date information from user;"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     Please key in the date for ToDoAfter.\\n\" +"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    \"       (Format: yyyy-mm-dd)\");"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Scanner in_date \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            date \u003d in_date.nextLine();"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            //throw new InputDateTimeTooEarly();"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if (!Comparision(date)) {"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"     The date you chose is earlier than today.\");"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                ContinueOrNot();"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To get Task information from user;"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"     Please key in the task you are going to do.\");"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Scanner in_task \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                task \u003d in_task.nextLine();"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To create task according to user key-in information;"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Task_NeedsToDo \u003d Task_Generator(task);"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To create ToDoAfter Task;"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Task_ToDoAfter \u003d new ToDoAfter(\"date\", LocalDate.parse(date), Task_NeedsToDo);"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                return Task_ToDoAfter;"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The type of task you key-in is not correct.\\n\" +"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    \"     Task Type choices:\\n\" +"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    \"     1. todo\\n\" +"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    \"     2. event\\n\" +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    \"     3. deadline\");"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Separated_Line();"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return ToDoAfterDate();"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void ChoiceChecking(Vector\u003cTask\u003e ExistingTaskList, int choice) throws InputChoiceOutOfRange {"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(choice \u003c 1 || choice \u003e ExistingTaskList.size()){"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new InputChoiceOutOfRange();"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static int UserIndexChoiceChecker(Vector\u003cTask\u003e ExistingTaskList) {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String index;"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int choice;"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Scanner i \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            index \u003d i.nextLine();"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            choice \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ChoiceChecking(ExistingTaskList, choice);"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return choice;"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (NumberFormatException e){"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     Ooops! The number you choose is not whole number. Only integer number is available. \\nPlease choose again. \");"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return UserIndexChoiceChecker(ExistingTaskList);"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (InputChoiceOutOfRange e){"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The choice you chose is out of range. Please choose again. \");"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return UserIndexChoiceChecker(ExistingTaskList);"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static Task ExistTaskFinder_Description(String description, Vector\u003cTask\u003e List, String Datetype, String Timetype) throws DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong, TheTaskNotExistInTheList {"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String task_Description;"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Vector\u003cTask\u003e ExistingTaskList \u003d new Vector\u003c\u003e() ;"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for(Task task : List){"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            task_Description \u003d task.getDescription();"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            if(description.equals(task_Description)){"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                ExistingTaskList.add(task);"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(ExistingTaskList.size() \u003d\u003d 1){"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return ExistingTaskList.get(0);"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        else if(ExistingTaskList.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            throw new TheTaskNotExistInTheList();"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     There are more than one Task in the list has the same description you keyed-in. Please choose one of the following(key in integer): \");"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Print_List(ExistingTaskList, Datetype, Timetype);"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            int choice \u003d UserIndexChoiceChecker(ExistingTaskList);"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            return ExistingTaskList.get(choice);"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To create ToDoAfter task with task condition required;"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Existing Task List"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return ToDoAfter type task"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly The date of the task which user keyed-in is not late than the creation time"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputFormatWrongly The date/time input format not correct"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static ToDoAfter ToDoAfterTask(Vector\u003cTask\u003e List, String Datetype, String Timetype) throws InputDateTimeTooEarly, DateTimeInputFormatWrongly, TheTaskNotExistInTheList, DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong {"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //Description for the user to key the existing task\u0027s description and use this description to find the task in the Task List;"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        //Task, to be assigned by the task found in the Task list;"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String task;"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Separated_Line();"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task Task_NeedsToDo;"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task ExistTaskInList;"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ToDoAfter Task_ToDoAfter;"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            //To get the Description information from user;"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     Please key in the Task description which the task exist in the Task list or key-in \u0027list\u0027 to view all the task in the Task List.\");"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Scanner in_date \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            description \u003d in_date.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (description) {"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Print_List(List, Datetype, Timetype);"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    return ToDoAfterTask(List, Datetype, Timetype);"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    //To get Task information from user;"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"     Please key in the task.\");"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Scanner in_task \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    task \u003d in_task.nextLine();"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    //To create task according to user key-in information;"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Task_NeedsToDo \u003d Task_Generator(task);"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ExistTaskInList \u003d ExistTaskFinder_Description(description, List, Datetype, Timetype);"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    //To create ToDoAfter Task;"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Task_ToDoAfter \u003d new ToDoAfter(\"task\", ExistTaskInList, Task_NeedsToDo);"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    return Task_ToDoAfter;"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Separated_Line();"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The type of task you key-in is not correct. Please try again.\\n\" +"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    \"     Task Type choices:\\n\" +"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    \"     1. todo\\n\" +"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    \"     2. event\\n\" +"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    \"     3. deadline\");"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (TheTaskNotExistInTheList e){"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Separated_Line();"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The task not in the Existing Task List. Please try again.\");"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return ToDoAfterTask(List, Datetype, Timetype);"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To create and add ToDoAfter task into ToDoAfter vector list;"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterList The ToDoAfter vector list"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly If the Task time input incorrectly, then the method will throw an error to user to ask user to try again."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void ToDoAfter_Task(Vector\u003cToDoAfter\u003e ToDoAfterList, Vector\u003cTask\u003e List, String Datetype, String Timetype) throws InputDateTimeTooEarly {"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Please select index from one of the types below:\\n\" +"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"      1. To do the task after Date;\\n\" +"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"      2. To do the task after task;\");"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String choice \u003d in.nextLine();"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ToDoAfter ToDoAfter_task;"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (choice) {"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"1\": //Date type"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ToDoAfter_task \u003d ToDoAfterDate();"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ToDoAfterList.add(ToDoAfter_task);"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"      The task has been added to the list.\");"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    //To check whether the new ToDoAfter task needs to add into Task List;"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ToCheckToDoAfterTaskStatus(ToDoAfter_task, List, ToDoAfterList);"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"2\": //Task type"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ToDoAfter_task \u003d ToDoAfterTask(List, Datetype, Timetype); //To get the ToDoAfter task from user information;"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ToDoAfterList.add(ToDoAfter_task);"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"      The task has been added to the list.\");"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    //To check whether the new ToDoAfter task needs to add into Task List;"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ToCheckToDoAfterTaskStatus(ToDoAfter_task, List, ToDoAfterList);"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ContinueOrNot(\"     The choice you chose is incorrect.\", ToDoAfterList, List, Datetype, Timetype);"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (DateTimeInputFormatWrongly e){"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ContinueOrNot(\"     The ToDoAfter Date you key-in is incorrect format. Please try again.\", ToDoAfterList, List, Datetype, Timetype);"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (TheTaskNotExistInTheList e){"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ContinueOrNot(\"     The task not in the existing task list. Please try again.\", ToDoAfterList, List, Datetype, Timetype);"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (InputDateTimeTooEarly e){"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ContinueOrNot(\"     The date/time input is earlier than the task creation date/time. Please try again.\", ToDoAfterList, List, Datetype, Timetype);"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (EnumDayIndexWrongly | DateTimeInputWrongly | MonthIndexWrong enumDayIndexWrongly) {"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            enumDayIndexWrongly.printStackTrace();"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * The method which used in ToDoAfter_Task method catch area. To let customer decide whether want to continue."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ErrorOutput The message about the error"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfter The ToDoAfter vector list"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List The task vector list"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly If the Task time input incorrectly, then the method will throw an error to user to ask user to try again."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void ContinueOrNot(String ErrorOutput, Vector\u003cToDoAfter\u003e ToDoAfter, Vector\u003cTask\u003e List, String Datetype, String Timetype) throws InputDateTimeTooEarly {"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(ErrorOutput);"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     You can key-in \u0027Quit\u0027 to Start from beginning or press Enter to try again.\");"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner QuitOrContinue \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String QoC \u003d QuitOrContinue.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if (!\"quit\".equals(QoC)) {"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ToDoAfter_Task(ToDoAfter, List, Datetype, Timetype);"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * The method which used in ToDoAfter_Task method catch area. To let customer decide whether want to continue."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly If the Task time input incorrectly, then the method will throw an error to user to ask user to try again."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void ContinueOrNot() throws InputDateTimeTooEarly, DateTimeInputFormatWrongly {"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     You can key-in \u0027Quit\u0027 to Start from beginning or press Enter to try again.\");"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner QuitOrContinue \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String QoC \u003d QuitOrContinue.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if (!\"quit\".equals(QoC)) {"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            ToDoAfterDate();"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get Task Type from user"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * There are three choices:"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 1. todo"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 2. event"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 3. deadline"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the task type user chose"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static String toGetTaskTypeFromUser(){"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Please choose the task type you want to search:\\n\" +"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"     1. todo\\n\" +"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"     2. event\\n\" +"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"     3. deadline\");"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner type \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Task_type \u003d type.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(!Task_type.equals(\"todo\") \u0026\u0026 !Task_type.equals(\"event\") \u0026\u0026 !Task_type.equals(\"deadline\") \u0026\u0026 !Task_type.equals(\"1\") \u0026\u0026 !Task_type.equals(\"2\") \u0026\u0026 !Task_type.equals(\"3\")){"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The task type you chose is not correct. Please try again.\");"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Task_type \u003d toGetTaskTypeFromUser();"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(Task_type.equals(\"todo\") || Task_type.equals(\"1\")) return \"T\";"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        else if (Task_type.equals(\"event\") || Task_type.equals(\"2\")) return \"E\";"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        else return \"D\";"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get Time from user"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return Time String which get from user"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static String toGetTimeFromUser(){"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Please key-in the time you want to search.\");"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner search_Time \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String time \u003d search_Time.nextLine();"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Search function."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * User can use this function to search task they want base on:"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 1. date"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 2. time"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 3. description"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 4. Task Type (e.g. \"todo\", \"deadline\"...)"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date_Type The date type user chose for printing"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time_Type The time type user chose for printing"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Task list"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterList Task of to do after List"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws SearchTypeWrong The search type wrongly erro"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputWrongly Date/time input wrongly"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly The day of month wrongly"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong Month index wrongly"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Search(String Date_Type, String Time_Type, Vector\u003cTask\u003e List, Vector\u003cToDoAfter\u003e ToDoAfterList) throws SearchTypeWrong, DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong {"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        To get Search type from user;"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        \"1. Date\\n\" +"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        \"2. Time\\n\" +"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        \"3. Description\\n\" +"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        \"4. Task Type\");"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String search_type \u003d Searching_Type_Choice();"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.Separated_Line();"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        To get the list which user want to search from;"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        1. Task List;"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        2. ToDoAfter List;"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//        3. Both of above;"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String List_Type \u003d Search_Task_List_Choice();"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Ui.Separated_Line();"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (search_type){"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"1\":  //Date type"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To get the date information from user;"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"     Please key-in the date you want to search.\");"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Scanner search_Date \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                String date \u003d search_Date.nextLine();"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To print out all the result;"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                TaskList.Print_List_Date(List, date, Date_Type, Time_Type, ToDoAfterList, List_Type);"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"2\":  //Time"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To get Time information from User;"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                String time \u003d toGetTimeFromUser();"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To print out all the result;"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                TaskList.Print_List_Time(List, time, Date_Type, Time_Type, ToDoAfterList, List_Type);"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"3\":  //Description"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To get description information from user;"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"     Please key-in the description you want to search.\");"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Scanner description \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                String Task_Description \u003d description.nextLine();"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To print out all the result;"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                TaskList.Print_List_Description(List, Task_Description, Date_Type, Time_Type, ToDoAfterList, List_Type);"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"4\":  //Task Type"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To get Task Type index from user;"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                String type \u003d toGetTaskTypeFromUser();"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                //To print out the task(s) found;"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                TaskList.Print_List_Type(List, type, Date_Type, Time_Type, ToDoAfterList, List_Type);"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                throw new SearchTypeWrong();"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void ToCheckToDoAfterTaskStatus(ToDoAfter toDoAfter, Vector\u003cTask\u003e List, Vector\u003cToDoAfter\u003e toDoAfterList) throws TheTaskNotExistInTheList {"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Task Condition_Task, GoingToDo_Task, temp_task;"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String type \u003d toDoAfter.getToDoAfter_Type();"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        GoingToDo_Task \u003d toDoAfter.getToDoAfterTask();"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        assert(type.equals(\"task\") || type.equals(\"date\")): \"     The ToDoAfter task type is not correct. \\n\" +"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"     The type get from the ToDoAfter List is: \" + type;"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"task\":"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Condition_Task \u003d toDoAfter.getTask();"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    temp_task \u003d TaskIsExist(Condition_Task, List);"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    boolean ConditionTask_status \u003d Condition_Task.getStatus();"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    boolean temp_Task_status \u003d temp_task.getStatus();"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(temp_Task_status){"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        List.add(GoingToDo_Task);"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        toDoAfterList.remove(toDoAfter);"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        System.out.println(\"       The condition task status is \u0027done\u0027. This ToDoAfter task is automatic transfer to Task List. \\n\" +"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                                \"      The task has been added to Task List.\");"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    else{"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        System.out.println(\"      The ToDoAfter task has been added to ToDoAfter Task List.\");"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"date\":"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    LocalDate date \u003d toDoAfter.getDate();"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(!Comparision(date.toString())) {"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        List.add(GoingToDo_Task);"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        toDoAfterList.remove(toDoAfter);"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        System.out.println(\"      The condition date is passed. This ToDoAfter task is automatic transfer to Task List.\\n\" +"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                                \"      The task has been added to Task List.\");"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    else {"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                        System.out.println(\"      The ToDoAfter task has been added to ToDoAfter Task List.\");"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (TheTaskNotExistInTheList e){"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            List.add(GoingToDo_Task);"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            toDoAfterList.remove(toDoAfter);"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check whether the Condition Task of a ToDoAfter type task is in the Task list and the Task status;"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * If the task is not in the Task list or the task is done or the date is passed, then the ToDoAfter task will be copied to Task List and removed from ToDoAfterTask List;"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param toDoAfterList ToDoAfter Task List which is going to be check"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param taskList Task List"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws TheTaskNotExistInTheList if the Task not exist in the Task List, then the ToDoAfter task will be added into Task list and removed from ToDoAfterTask List"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void ToCheckToDoAfterTaskStatus(Vector\u003cToDoAfter\u003e toDoAfterList, Vector\u003cTask\u003e taskList) throws TheTaskNotExistInTheList {"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            for (int i \u003d 0; i \u003c toDoAfterList.size(); i++) {"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                ToDoAfter toDoAfter \u003d toDoAfterList.get(i);"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                ToCheckToDoAfterTaskStatus(toDoAfter, taskList, toDoAfterList);"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     *The function to get update choice, whether the user choose task date or task description;"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List The Task List"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param DateType Date printing format"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param TimeType Time printing format"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws InputDateTimeTooEarly If the updated datetime is earlier than current datetime, then the error information will be throw to user;"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void UpDateInformation(Vector\u003cTask\u003e List, String DateType, String TimeType) throws InputDateTimeTooEarly, DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong {"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Please choose the Task index in the Task List or Key-in \u0027list\u0027 to print out all task in Task List.\");"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String UserInput \u003d s.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (UserInput) {"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Print_List(List, DateType, TimeType);"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    UpDateInformation(List, DateType, TimeType);"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    index \u003d Integer.parseInt(UserInput);"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    if(index \u003e List.size() || index \u003c\u003d 0){"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        Separated_Line();"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        System.out.println(\"     The index you chose is out of range. Please try again.\");"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        Separated_Line();"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        UpDateInformation(List, DateType, TimeType);"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Task task \u003d List.get(index-1);"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String type \u003d task.getType();"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"     Please choose the aspect you want to update:\\n\" +"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            \"      1. Task Date\\n\" +"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            \"      2. Task description.\");"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    String choice \u003d input.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    switch (choice) {"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"1\":"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"date\":"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"task date\":"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            if(type.equals(\"T\")){"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                System.out.println(\"     The task you chose is a todo type task. There is no date/time information in the task.\\n\" +"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                        \"     The update function closed with no change.\");"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                Separated_Line();"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            DateTimeChangingInformationCollector(task, type);"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Separated_Line();"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            System.out.println(\"      The task updated to:\");"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            System.out.print(\"       \");"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Print_Task(task, DateType, TimeType);"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            System.out.println(\"\");"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"2\":"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"description\":"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        case \"task description\":"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            TaskDescriptionUpdate(task);"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Separated_Line();"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            System.out.println(\"      The task updated to:\");"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            System.out.print(\"       \");"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            Print_Task(task, DateType, TimeType);"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            System.out.println(\"\");"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            System.out.println(\"     The choice you chose does not correct. Please try again.\");"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                            UpDateInformation(List, DateType, TimeType);"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (NumberFormatException e){"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Separated_Line();"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      The index number you chose is not an Integer. Please try again.\");"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Separated_Line();"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            UpDateInformation(List, DateType, TimeType);"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 1387
    }
  },
  {
    "path": "src/main/java/taskclasses/ToDoAfter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package taskclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class ToDoAfter {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    //For ToDoAfter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected String ToDoAfter_Type;  //Either date or task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected Task ToDoAfterTask, task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To construct a task typ ToDoAfter task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfter_Type The type of ToDoAfter task, \"task\" type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param task The task condition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterTask The user will do their task after \"task\" done;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public ToDoAfter(String ToDoAfter_Type, Task task, Task ToDoAfterTask){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.ToDoAfter_Type \u003d ToDoAfter_Type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.ToDoAfterTask \u003d ToDoAfterTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfter_Type The type of ToDoAfter task, \"date\" type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param date The date for the task condition"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterTask The user will do their task after \"date\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public ToDoAfter(String ToDoAfter_Type, LocalDate date, Task ToDoAfterTask){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.ToDoAfter_Type \u003d ToDoAfter_Type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        this.ToDoAfterTask \u003d ToDoAfterTask;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the type of ToDoAfter task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the type"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public String getToDoAfter_Type(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.ToDoAfter_Type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the Date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return condition date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public LocalDate getDate(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the task which the user is going to do after certain date condition is fulfill"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public Task getToDoAfterTask (){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.ToDoAfterTask;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the condition task which the user will be going to do certain task after this is done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the condition task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public Task getTask(){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 66
    }
  },
  {
    "path": "src/main/java/taskclasses/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package taskclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To construct Todo task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param description description in String type"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public Todo(String description){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        super(description, \"T\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 11
    }
  },
  {
    "path": "src/main/java/thrownexceptions/DateTimeInputFormatWrongly.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class DateTimeInputFormatWrongly extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/DateTimeInputWrongly.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class DateTimeInputWrongly extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/DateTypeChooseWrongly.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class DateTypeChooseWrongly extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/DecoderUnknownError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class DecoderUnknownError extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/DeleteNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class DeleteNumberException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/DoneNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class DoneNumberException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static String First_Word;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public DukeException(String first_word) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        First_Word \u003d first_word;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public DukeException(){}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String getFirst_Word(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return First_Word;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 15
    }
  },
  {
    "path": "src/main/java/thrownexceptions/EncoderUnknowError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class EncoderUnknowError extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/EnumDayIndexWrongly.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class EnumDayIndexWrongly extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/FilePathNotFound.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class FilePathNotFound extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public FilePathNotFound(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 7
    }
  },
  {
    "path": "src/main/java/thrownexceptions/InputChoiceOutOfRange.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class InputChoiceOutOfRange extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/InputDateTimeTooEarly.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class InputDateTimeTooEarly extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/InputNotMatchEnum.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class InputNotMatchEnum extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/InputTimeBeforeLocal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class InputTimeBeforeLocal extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/InvalidStorageFilePathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class InvalidStorageFilePathException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public InvalidStorageFilePathException(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 7
    }
  },
  {
    "path": "src/main/java/thrownexceptions/MonthIndexWrong.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class MonthIndexWrong extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/SearchTypeWrong.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class SearchTypeWrong extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/TextFileContentError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class TextFileContentError extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/TheTaskNotExistInTheList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class TheTaskNotExistInTheList extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/TimeTypeChooseWrongly.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class TimeTypeChooseWrongly extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/ToDoAfterChoiceChoosenWrongly.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class ToDoAfterChoiceChoosenWrongly extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/thrownexceptions/ToDoAfterTypeInformationWronglyInTxt.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package thrownexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class ToDoAfterTypeInformationWronglyInTxt extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 4
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import taskclasses.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import taskclasses.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import taskclasses.ToDoAfter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import thrownexceptions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static date.time.management.DateTime.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static taskclasses.TaskList.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * The LoginFace to show"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void LoginFace(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * The greeting with some instruction"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Greeting() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     What can I do for you?\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     **Date and time input format: /by(at): **\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     **1. Deadline: YYYY-MM-DD Hour(0-23):Minute(0-59)**\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     **2. YYYY-MM-DD Hour(0-23):Minute(0-59) -\u003e Hour(0-23):Minutes(0-59)**\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     **3. YYYY-MM-DD Hour(0-23):Minute(0-59) -\u003e YYYY-MM-DD Hour(0-23):Minute(0-59)**\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * Sperated_Line"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Separated_Line(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.print(\"    \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        for(int i\u003d0; i\u003c100; i++){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.print(\"-\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * The output after new task added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param New_Task New_Task going to add into Vector Task List"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param First_Word The first word which contain task type"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Vector\u003cTask\u003e List"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Out_After_Added(Task New_Task, String First_Word, Vector\u003cTask\u003e List) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.print(\"       [\" + New_Task.getType() + \"][\" + New_Task.getStatusIcon() + \"] \" + New_Task.getDescription());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if (First_Word.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.print(\" (by: \" + New_Task.getDateTime() + \")\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        } else if (First_Word.equals(\"event\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.print(\" (at: \" + New_Task.getStarting_DateTime_String() + \" -\u003e \" + New_Task.getEnding_DateTime_String() + \")\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Now you have \" + List.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * The output after new task deleted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Deleted_Task New_Task going to delete from Vector Task List"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Vector\u003cTask\u003e List"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void Out_After_Delete(Task Deleted_Task, Vector\u003cTask\u003e List){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"       [\" + Deleted_Task.getType() + \"][\" + Deleted_Task.getStatusIcon() + \"] \" + Deleted_Task.getDescription());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Now you have \" + List.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the searching type from user"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the type user chose;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Searching_Type_Choice(){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Search Mode. Please choose the index the type for searching:\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       1. Date\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       2. Time\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       3. Description\\n\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       4. Task Type\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String search_type;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner search_IN \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        search_type \u003d search_IN.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(!search_type.equals(\"1\") \u0026\u0026 !search_type.equals(\"2\") \u0026\u0026 !search_type.equals(\"3\") \u0026\u0026 !search_type.equals(\"4\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"     The index you chose is not correct. Please try again.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            search_type \u003d Searching_Type_Choice();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return search_type;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the List type from user"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the type user chose;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static String Search_Task_List_Choice(){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Search Mode. Please choose the index the Task List for searching:\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       1. Task List\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       2. ToDoAfter List\\n\" +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       3. Both of above\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String List_Type;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner type \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        List_Type \u003d type.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        if(!List_Type.equals(\"1\") \u0026\u0026 !List_Type.equals(\"2\") \u0026\u0026 !List_Type.equals(\"3\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"The index you chose is not correct. Please try again.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            List_Type \u003d Search_Task_List_Choice();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return List_Type;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To get the list which user want to print out;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * There are three different choices user can choose:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 1. Task List"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 2. ToDoAfter List"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * 3. Both of above"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @return return the list type"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static String typeOfListToBePrint(){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println(\"     Which list do you like to print out?\\n\" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       1. Task List\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       2. ToDoAfter List\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"       3. Both of above\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Scanner user_choice \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String type \u003d user_choice.nextLine().toLowerCase().trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (type){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"task list\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                type \u003d \"1\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"todoafter\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"todoafter list\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                type \u003d\"2\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"3\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"both\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"both of above\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                type \u003d \"3\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"     The choice you chose is not correct. Please try again.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Separated_Line();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                type \u003d typeOfListToBePrint();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * To check which list user want to print out"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Task List"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param ToDoAfterList ToDoAfter List"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Date_Type DateType to print"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param Time_Type TimeType to print"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws DateTimeInputWrongly Date/Time input type wrongly error"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws EnumDayIndexWrongly The day of month invalid error"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @throws MonthIndexWrong The month of year invalid error"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void PrintingListChecking(Vector\u003cTask\u003e List, Vector\u003cToDoAfter\u003e ToDoAfterList, String Date_Type, String Time_Type) throws DateTimeInputWrongly, EnumDayIndexWrongly, MonthIndexWrong {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String List_Type \u003d typeOfListToBePrint();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        switch (List_Type){"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(List, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(ToDoAfterList, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Separated_Line();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"Task List:\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List(List, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Separated_Line();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                System.out.println(\"ToDoAfter List:\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                Print_List_ToDoAfter(ToDoAfterList, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    private static void HelpingFunction(){"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"todo:      A task type. User key-in format: todo description\\n+\" +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"event:     A task type. User key-in format: event description /at: YYYY-MM-DD HH:MM -\u003e YYYY-MM-DD HH:MM\\n\" +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"deadline:  A task type. User key-in format: deadline description /by: YYYY-MM-DD HH:MM\\n\" +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"done:      An action on task to mark specific index of Task in the Task List status become done. User key-in format: done index\\n\" +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"delete:    An action on task to delete specific index of Task in the Task List. User key-in format: delete index\\n\" +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"list:      An action on Task and ToDoAfter Task. After key-in \u0027list\u0027, there will pop out three option to print out. 1. Task list; 2. ToDoAfter List. 3.Both. \\n\" +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"bye:       An action to finish conversation(To stop program). User key-in format: bye\\n\" +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"search:    To search specific task or ToDoAfter task base on description or date or time or task type. User key-in format: \u0027search\u0027 then follow instruction pop out.\\n\" +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"find:      Same as search above.\\n\" +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"todoafter: A special task type to keep a todoafter task with condition existing task in the task list or specific date which cannot earlier than the creation date. User Key-in format: \u0027todoafter\u0027 then follow instruction pop out.\\n\" +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"datetype:  An action to change printing datetype. User key-in format: \u0027datetype\u0027.\\n\" +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"timetype:  An action to change printing timetype. User key-in format: \u0027timetype\u0027.\\n\" +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                \"update:    An action to update task in Task List. This can update whether date, time or description. User key-in format: \u0027update.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * The inter-action UI with user"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     * @param List Task List"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public static void chatting_Vector_Task(Vector\u003cTask\u003e List, Vector\u003cToDoAfter\u003e ToDoAfterList, String Date_Type, String Time_Type) throws InputDateTimeTooEarly, TheTaskNotExistInTheList {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Ending \u003d \"bye\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String Input;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        ToCheckToDoAfterTaskStatus(ToDoAfterList, List);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Input \u003d in.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Ui.Separated_Line();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            String[] Input_Words \u003d Input.split(\" \");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            String First_Word \u003d Parser.Input_Type(Input);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            Parser.Input_Length_Checking(First_Word, Input_Words);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (First_Word){"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    TaskList.To_Add_New_Input_Into_List(First_Word, Input, Input_Words, List);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    TaskList.Done_Number(List, Input_Words);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"processing\":"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Processing_Number(List, Input_Words);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    TaskList.Delete_Number(List, Input_Words);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    PrintingListChecking(List, ToDoAfterList, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Ui.Separated_Line();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"search\":"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Search(Date_Type, Time_Type, List, ToDoAfterList);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"todoafter\":"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    ToDoAfter_Task(ToDoAfterList, List, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"datetype\":"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Date_Type \u003d Parser.Date_Display_Format();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"timetype\":"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    Time_Type \u003d Parser.Time_Display_Format();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"help\":"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    HelpingFunction();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"update\":"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    UpDateInformation(List, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"    Invalid Input! Please try again!\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            String First_Word \u003d DukeException.getFirst_Word();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            switch (First_Word) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"     \\u2639\" + \" OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"     \\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"     \\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    System.out.println(\"     \\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      Or you can key-in \u0027help\u0027 to know more details about Duke input option information. \");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (DoneNumberException e){"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      The task you want to done is invalid! Please key-in again!\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      Or you can key-in \u0027help\u0027 to know more details about Duke input option information. \");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (DeleteNumberException e){"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      The number of task you want to delete is invalid! Please key-in again!\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      Or you can key-in \u0027help\u0027 to know more details about Duke input option information. \");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (InputTimeBeforeLocal e) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      The input time cannot earlier then local time.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      Or you can key-in \u0027help\u0027 to know more details about Duke input option information. \");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (DateTimeInputFormatWrongly e){"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      The input Datetime format wrongly. Please try again.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      Or you can key-in \u0027help\u0027 to know more details about Duke input option information. \");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (SearchTypeWrong e) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      The search type wrongly. Please try again.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      Or you can key-in \u0027help\u0027 to know more details about Duke input option information. \");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (DateTimeInputWrongly e) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      The date or time input wrongly. Please try again.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      Or you can key-in \u0027help\u0027 to know more details about Duke input option information. \");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (MonthIndexWrong monthIndexWrong) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      The month input is not correct. Please try again.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      Or you can key-in \u0027help\u0027 to know more details about Duke input option information. \");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        catch (EnumDayIndexWrongly enumDayIndexWrongly) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      The day input is not correct. Please try again.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "            System.out.println(\"      Or you can key-in \u0027help\u0027 to know more details about Duke input option information. \");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Separated_Line();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        chatting_Vector_Task(List, ToDoAfterList, Date_Type, Time_Type);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 340
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    void dummytest(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 9
    }
  },
  {
    "path": "src/test/java/TaskRegistrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import date.time.management.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import taskclasses.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import taskclasses.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "public class TaskRegistrationTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public void TodoTaskRegistration(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String desciption \u003d \"wake up\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Todo morning \u003d new Todo(desciption);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        assertEquals(\"wake up\", morning.getDescription());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    public void DeadlineTesting(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String desciption \u003d \"wake up\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String date_D \u003d \"2019-12-11\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        String time_D \u003d \"15:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        DateTime timing \u003d new DateTime(date_D, time_D);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        Deadline WakeUp \u003d new Deadline(desciption, timing);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "        assertEquals(\"2019-12-11T15:00:00\", WakeUp.getDeadline_DateTime_String());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangShuogeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangShuogeng": 28
    }
  }
]
