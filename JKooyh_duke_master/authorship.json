[
  {
    "path": "data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "D | 0 | do homework  | 17/05/2019 1618"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "E | 0 | project meeting  | 13/08/2019 1900"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "D | 0 | submit project  | 13/12/2019 2359"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "D | 1 | return bike  | 14/12/2019 1800"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "T | 0 | go hiking"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "D | 0 | do something  | 19/12/2019 2259"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 7
    }
  },
  {
    "path": "src/main/JAR/data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "T | 0 | go hiking"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "T | 0 | borrow book from library"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "D | 0 | do homework  | 17/05/2019 1618"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "E | 0 | project meeting  | 13/08/2019 1900"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "E | 0 | hava a date with Bob  | 29/11/2019 2250"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "D | 1 | test date  | 12/12/2019 1759"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "D | 0 | return bike  | 19/12/2019 2359"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "D | 0 | submit java report  | 20/12/2019 2259"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "D | 0 | test date sorting  | 29/12/2019 2259"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 10
    }
  },
  {
    "path": "src/main/java/Command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class ByeCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public ByeCommand(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is to mark the end of the program"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui  ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException return any DukeException if any"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException return any IOException if any"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        isExit\u003dtrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 25
    }
  },
  {
    "path": "src/main/java/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    protected static String commandline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public boolean isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor for the Command object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline a string of commmand passed by the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public Command(String commandline){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        this.commandline \u003d commandline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor for the Command object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public Command(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To obtain isExit value of the object, in order to check if the program is ending"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return a boolen value isExit if it indicates the end of the running of the program"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is a method to be implemented by each subclass. It executes the operation for each"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * particular command supported by the application"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks   tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException return any DukeException if any"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException  return any IOException if any"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        throw new UnsupportedOperationException(\"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is a method to be implemented by each subclass. It executes the reading operation for each particular"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * file format supported by the application"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException return any DukeException if any"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException return any IOException if any"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void readFileFormat(TaskList tasks) throws DukeException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        throw new UnsupportedOperationException(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 63
    }
  },
  {
    "path": "src/main/java/Command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.Deadlines;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import static util.Util.convertDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class DeadlineCommand extends Command{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public DeadlineCommand(String commandline){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method to add Deadline tasks to the memory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * particular command supported by the application"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks   tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException return any DukeException if any"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException  return any IOException if any"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            //tasks.addTask(new Deadlines(Parser.parseDeadline(commandline)[0], Parser.parseDeadline(commandline)[1]), true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            //System.out.println(\"This is datetime: ##\" + Parser.parseDeadline(commandline)[1] + \"##\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.addTask(new Deadlines(Parser.parseDeadline(commandline)[0], convertDateTime(Parser.parseDeadline(commandline)[1])),false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To read file and add deadline tasks to the memory, and store in tasks object to be used by application"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void readFileFormat(TaskList tasks) throws DukeException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.addTask(new Deadlines(Parser.parseDeadlineFile(commandline)[2], convertDateTime(Parser.parseDeadlineFile(commandline)[3])),true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            if(Parser.parseDeadlineFile(commandline)[1].equals(\"1\")){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                tasks.markDone(tasks.size(),true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 75
    }
  },
  {
    "path": "src/main/java/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor for DeleteCommand class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline a string commandline contains a string of command to be processed to delete a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public DeleteCommand(String commandline){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    //public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException, NumberFormatException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is a method to delete a task from the tasks object (which contains a list of tasks)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.removeItem(Parser.parseIntegerParameter(commandline));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 39
    }
  },
  {
    "path": "src/main/java/Command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor for DoneCommand class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline a string commandline contains a string of command to be processed to mark a task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public DoneCommand(String commandline){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    //public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is a method to mark a particular task as done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related processes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.markDone(Parser.parseIntegerParameter(commandline),false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 41
    }
  },
  {
    "path": "src/main/java/Command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.Events;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import static util.Util.convertDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor for EventCommand. The class is process event related task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline a string commandline contains a string of command to be processed to mark a task as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public EventCommand(String commandline){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is a method to add a new event into a list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related processes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.addTask(new Events(Parser.parseEvent(commandline)[0], convertDateTime(Parser.parseEvent(commandline)[1])),false   );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//            tasks.addTask(new Deadlines(Parser.parseDeadlineFile(commandline)[2], convertDateTime(Parser.parseDeadlineFile(commandline)[3])), false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To read file and add deadline tasks to the memory, and store in tasks object to be used by application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void readFileFormat(TaskList tasks) throws DukeException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.addTask(new Events(Parser.parseEventFile(commandline)[2], convertDateTime( Parser.parseEventFile(commandline)[3])),true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            if(Parser.parseEventFile(commandline)[1].equals(\"1\")){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                tasks.markDone(tasks.size(),true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 61
    }
  },
  {
    "path": "src/main/java/Command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public FindCommand(String commandline){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.findText(Parser.parseFindText(commandline));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 25
    }
  },
  {
    "path": "src/main/java/Command/FindDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.Deadlines;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class FindDateCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public FindDateCommand(String commandline){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is a method to be implemented by each subclass. It executes the operation for each"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * particular command supported by the application"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks   tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException return any DukeException if any"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException  return any IOException if any"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method to add Deadline tasks to the memory"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * particular command supported by the application"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks   tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException return any DukeException if any"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException  return any IOException if any"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.findDeadline(Parser.parseFindDate(commandline));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 51
    }
  },
  {
    "path": "src/main/java/Command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.Deadlines;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.Events;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import static util.Util.convertDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor for EventCommand. The class is process event related task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline a string commandline contains a string of command to be processed to mark a task as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public HelpCommand(String commandline){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is to process application help information for the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related processes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            ui.showHelp(Parser.parseHelp(commandline));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 44
    }
  },
  {
    "path": "src/main/java/Command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor of List Command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline commandline to process command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public ListCommand(String commandline){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To display available tasks for the application"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        tasks.displayTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 32
    }
  },
  {
    "path": "src/main/java/Command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public SortCommand(String commandline){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To sort tasks based on date, applicable for events and deadline tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks   tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.sortTaskDate(tasks.getTaskitems());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 33
    }
  },
  {
    "path": "src/main/java/Command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class TodoCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public TodoCommand(String commandline){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(commandline);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is a method to add a todo for Tasklist (which contains a list of tasks)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks tasks object passed and used throughtout the program"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param ui ui object passed and used to interact with UI related object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param storage storage object passed and used to interact with storage related object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            //tasks.addTask(new Todo(Parser.parseTodo(commandline)),true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.addTask(new Todo(Parser.parseTodo(commandline)),false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To read file from file and add it into a tasklist"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param tasks Tasklist object to add todo task into"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException throw any DukeException if any"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException throw any IOException if any"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void readFileFormat(TaskList tasks) throws DukeException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks.addTask(new Todo(Parser.parseTodoFile(commandline)[2]),true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            if(Parser.parseTodoFile(commandline)[1].equals(\"1\")){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                tasks.markDone(tasks.size(),true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 52
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.*;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Main application constructor to initialize duke application"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param filePath path of which the tasks file is located."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To run Duke application and process commands based user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Main Duke application entry point"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param args any arguments to be passed to Duke main application. arguments are not processed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        new Duke(\"data/Duke.txt\").run();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 84
    }
  },
  {
    "path": "src/main/java/Exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Return custom duke exception based on input message"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param message input message of exception to be returned to user"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 11
    }
  },
  {
    "path": "src/main/java/Parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import util.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To parse available commands supported by this application"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "      * @param commandline input parameters captured from the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return Command object to be processed by relevant command, based on correctly parsed command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException To check if invalid command, otherwise will provide more information"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static Command parse (String commandline) throws DukeException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String[] command \u003d commandline.split(\" \",2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        switch(command[0].toUpperCase())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"LIST\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new ListCommand(commandline);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"BYE\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"DONE\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new DoneCommand(commandline);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"DELETE\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new DeleteCommand(commandline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"TODO\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new TodoCommand(commandline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"DEADLINE\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new DeadlineCommand(commandline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"EVENT\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new EventCommand(commandline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"FINDDATE\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new FindDateCommand(commandline);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"SORT\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new SortCommand(commandline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"FIND\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new FindCommand(commandline);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"HELP\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new HelpCommand(commandline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                throw new DukeException(\"Invalid Command. Please try again, or type \u0027Help\u0027 for help\" + System.lineSeparator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Parse strings that are loaded from the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline a string that is loaded from the file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return Command object to be processed by relevant command, based on correctly parsed command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException To check if invalid command, otherwise will provide more information"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static Command parseFile (String commandline) throws DukeException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String[] command \u003d commandline.split(\" \",2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        switch(command[0].toUpperCase())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new TodoCommand(commandline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new DeadlineCommand(commandline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                return new EventCommand(commandline);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                throw new DukeException(\"Invalid File format. Please try again\" + System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To parse todo type of as task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline commandline paramters supplied by the user based on user input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return relevant task description to be captured by the application"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException To check if any invalid parameters, such as missing task description."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Otherwise will provide more information"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static String parseTodo (String commandline) throws DukeException"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] linearr;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        linearr \u003d commandline.split(\" \", 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        //to check size of linearr"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr.length !\u003d 2){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid Todo parameters\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr[1].equals(\"\")){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid empty Todo parameters\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return linearr[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To parse event related string input captured by the user"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline commandline paramters supplied by the user based on user input"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return array of strings to be processed by event command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException To check if invalid command, otherwise will provide more information"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static String[] parseEvent(String commandline) throws DukeException"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] linearr;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        linearr \u003d commandline.split(\" \", 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr.length !\u003d2){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid event Parameters\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String lineEvent[] \u003d linearr[1].split(\"/at\", 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (lineEvent.length !\u003d 2){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid Event parameters\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        // to check second parameter"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (lineEvent[1].equals(\"\")){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid empty Deadline parameters\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        lineEvent[1] \u003d lineEvent[1].toString().trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return lineEvent;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To parse Deadline related string from file"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline commandline paramters supplied by loaded file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return array of strings to be processed by Deadline Command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException To check if invalid command, otherwise will provide more information"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static String[] parseDeadline(String commandline) throws DukeException"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] linearr;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        linearr \u003d commandline.split(\" \", 2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr.length !\u003d2){"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid deadline Parameters\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String lineDeadline[] \u003d linearr[1].split(\"/by\", 2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (lineDeadline.length !\u003d 2){"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid Deadline parameters\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        // to check second parameter"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (lineDeadline[1].equals(\"\")){"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid empty Deadline parameters\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        lineDeadline[1] \u003d lineDeadline[1].toString().trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return lineDeadline;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To parse Todo related string from file"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline commandline string supplied by loaded file"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return array of strings to be processed by Todo command"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException To check if invalid format, otherwise will provide more information"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static String[] parseTodoFile (String commandline) throws DukeException"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] linearr;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        linearr \u003d commandline.split(\" \\\\| \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr.length!\u003d3)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid todo file format. task will not be loaded\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return linearr;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To parse Event related string from file"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline commandline string supplied by loaded file"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return array of strings to be processed by Event command"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException To check if invalid format, otherwise will provide more information"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static String[] parseEventFile(String commandline) throws DukeException"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] lineEvent;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        lineEvent \u003d commandline.split(\" \\\\| \");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (lineEvent.length!\u003d4)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid event file format. Event task will not be loaded\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return lineEvent;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To parse Deadline related string from file"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline commandline string supplied by loaded file"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return array of strings to be processed by Event command"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException To check if invalid format, otherwise will provide more information"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static String[] parseDeadlineFile(String commandline) throws DukeException"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] lineDeadline;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        lineDeadline \u003d commandline.split(\" \\\\| \");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (lineDeadline.length!\u003d4)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid event file format. Event task will not be loaded\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return lineDeadline;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Parse integer parameter used by Done or Delete command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline commandline string provided by user input"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return integer value of the input parameters"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException will throw exception if it is invalid parameter or empty parameter"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static int parseIntegerParameter(String commandline) throws DukeException"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] linearr;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        linearr \u003d commandline.split(\" \", 2);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr.length !\u003d2){"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid command Parameters\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr[1].equals(\"\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid empty parameters\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr[1].equals(\"\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid empty parameters\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        int intNumber\u003d0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            intNumber \u003d Integer.parseInt(linearr[1]);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (NumberFormatException  e)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Ui.showError(\"Incorrect command parameter \" + e.getMessage());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid parameter - expecting Integer\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return intNumber;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *  To parse command line to finddate command"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline input parameters provided by the user"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return LocalDate objects to be parsed and processed by finddate command."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException to check if the date format supplied is in dd/MM/yyyy format"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static LocalDate parseFindDate(String commandline) throws DukeException"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] findDate;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        findDate \u003d commandline.split(\" \");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (findDate.length !\u003d 2){"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid Find Date parameters. Usage: Find dd/MM/yyyy\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            assert findDate[1].length()\u003d\u003d10:findDate[1].length(); //expected length of Date string is 10 chars"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            LocalDate d \u003d LocalDate.parse(findDate[1], df);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            return d;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"invalid date time format. Please use the following format - dd/MM/yyyy\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Ti parse user input to be processed by Find Command"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline user input provided by the user"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return return a single search keyword"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException Will throw exception if no parameter is supplied"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static String parseFindText(String commandline) throws DukeException"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] findText;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        findText \u003d commandline.split(\" \");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (findText.length !\u003d 2){"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid Find parameters. Usage: Find \u003csearch string\u003e\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return findText[1].trim();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To parse help parameters based on user provided string"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param commandline user input provided by the user"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return help string for a specific command"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static String parseHelp (String commandline) throws DukeException"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String [] linearr;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        linearr \u003d commandline.split(\" \", 2);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        //to check size of linearr"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr.length !\u003d 2){"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (linearr[1].equals(\"\")){"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return linearr[1];"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 298
    }
  },
  {
    "path": "src/main/java/Storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import util.Util;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    private static String strFilePath \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor for Storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param strFileInput file path of the storage or location of the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public Storage (String strFileInput){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        this.strFilePath \u003d strFileInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To load the file and prepared an empty of ArrayList of Task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return ArrayList of Task object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public ArrayList\u003cTask\u003e load()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        File f \u003d new File(strFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//        System.out.println(f.getAbsoluteFile());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        ArrayList\u003cTask\u003e t;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (!f.exists()){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "             t \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        t \u003d readTasksFromFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Returns an List of Task object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method read the Task entries from file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * path provided to the class. When it fails to read the file it will"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * throw exception."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return the list of Task object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static ArrayList\u003cTask\u003e readTasksFromFile()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        ArrayList\u003cTask\u003e t \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            File f \u003d new File(strFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                line \u003d s.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                Command c \u003d Parser.parseFile(line);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                c.readFileFormat(tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException | IOException e)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return tasks.getTaskitems();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method save the Task entries to the file. Path of the file is provided"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * to the constructor of this object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return none"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void save(TaskList tasks)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                saveFile(strFilePath, \"\", false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                    //System.out.println(\"Writing .. \" + taskitems.get(i).writeToFile());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                    saveFile(strFilePath, tasks.get(i).writeToFile(), i \u003d\u003d 0 ? false : true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        } catch (IOException e)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"unable to write into file!!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method write a line of string to a path, and takes in"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * parameter on the file path, one line of string of words, and indication"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * whether to append the line of string to existing file"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param filePath an absolute URL giving the base location of the image"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param texttoadd one line/string of words to be written to the file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param isappend to indicate whether to append or overwrite the file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void saveFile(String filePath, String texttoadd , boolean isappend)  throws IOException"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (isappend\u003d\u003dtrue)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            fw \u003d new FileWriter(filePath,true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        fw.write(texttoadd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        fw.write(System.getProperty( \"line.separator\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 131
    }
  },
  {
    "path": "src/main/java/Tasklist/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Deadline objects which extended from Task object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param description Description of deadline description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param by deadline date in LocalDateTime data type"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public  Deadlines(String description, LocalDateTime by)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        isDone\u003dfalse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        //System.out.println(\"Description:\" + this.description + \"; by: \" + this.by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To mark this deadline as completed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param done  mark the status as completed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To obtain the date of the deadline object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return LocalDateTime of the date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public LocalDateTime getDateTime(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To get status of the deadline"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return boolean status of deadline true/false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To generate deadline object in readable format and display it to the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String human readbable format of deadline object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            return \"[D] [\" + super.getStatusIcon() +\"]\" + super.getDescription()  + \"(by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy  HH:mma\")) + \")\" ;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To generate string for which to write event object into file over a specific format in | separated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String event object in string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String writeToFile()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return \"D\" + super.writeToFile() + super.getDescription() + \" | \" + by.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\")) ;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 69
    }
  },
  {
    "path": "src/main/java/Tasklist/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor of event task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param description description of even task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param at LocalDateTime of event date and time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//    public Events(String description, String at)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public Events(String description, LocalDateTime at)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        isDone\u003dfalse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To mark this deadline as completed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param done boolean status whether to mark the status as completed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To obtain information whether the status is completed or not"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return boolean of status completion"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To obtain the date of the event object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return LocalDateTime of the date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public LocalDateTime getDateTime(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To geenrate event object in readable format and display it to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String human readbable format of deadline"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return \"[E] [\" + super.getStatusIcon() +\"]\" + super.getDescription() + \"(at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy  HH:mma\")) + \")\" ;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To generate string for which to write event object into file over a specific format in | separated"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String event object in string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String writeToFile()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        //return \"E | \" + isDone + \" | \" + this.getDescription();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return \"E\" + super.writeToFile() + super.getDescription() + \" | \" + at.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 66
    }
  },
  {
    "path": "src/main/java/Tasklist/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Task Construction with task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param description string of task description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To get status of the task object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param isDone"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void markDone(boolean isDone)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * to get the status icon of completed and incomplete task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String of check and cross symbol"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To get the date time of object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return LocalDateTime date and time of the object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public LocalDateTime getDateTime(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Get the description of the object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String description of object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String getDescription()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To geenerate task object in readable format and display it to the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String of readable format of the object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + this.getDescription();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *To generate string for which to write todo  object into file over a specific format in | separated"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String format of objects to be written to file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String writeToFile()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        Integer intIsDone \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return \" | \" + intIsDone + \" | \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 73
    }
  },
  {
    "path": "src/main/java/Tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    //private static ArrayList\u003cTask\u003e taskitems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskitems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor of Tasklist object which will hold a list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param taskinput ArrayList of task to be held by Tasklist object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskinput) throws DukeException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (taskinput.isEmpty())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            taskitems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"OOPS!!! There is empty task\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        taskitems \u003d taskinput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskitems(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return taskitems;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To obtain the size of the tasklist, to indicate number of tasks held."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return integer size of tasklist"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public int size(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return taskitems.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To obtain the task from a given position"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param position integer value that indicates the position of task in the tasklist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return task object of specified position"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public Task get(int position){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return taskitems.get(position);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Constructor of Tasklist object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public TaskList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        taskitems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To add new Task based on Task object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param t Task object to be added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    //public static void addTask(Task t, boolean bWrite){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void addTask(Task t, boolean isFile){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        taskitems.add(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (!isFile) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"added:\" + t.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To display Task available in the tasklist object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void displayTasks()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        for(int i\u003d0; i \u003c taskitems.size(); i++)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(i + 1 + \". \" + taskitems.get(i)); // or tasks[i].toString()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param pos"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void markDone(int pos, boolean isFile) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        taskitems.get(pos-1).markDone(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (!isFile) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"    [\" + taskitems.get(pos - 1).getStatusIcon() + \"]\" + taskitems.get(pos - 1).toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Remove a task from the tasklist given the serial number/running number"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param pos position of task in the tasklist based on what user see"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void removeItem(int pos) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (pos\u003etaskitems.size())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid serial number. task number is greater than number of tasks available\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (pos\u003c\u003d0)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"Invalid serial number. index is out of bound\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        System.out.println(\"    [\" +  taskitems.get(pos-1).getStatusIcon() + \"]\" +  taskitems.get(pos-1).toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        taskitems.remove(pos-1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        System.out.println(\"Now you have \" + taskitems.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method only search date which is equal to a task of a type Deadline (as deadline only have date time attributes)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param searchdate"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void findDeadline(LocalDate searchdate){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        System.out.println(\"Searching date : \" + searchdate + \" ...\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        Integer count \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        for (Task task : taskitems) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            LocalDate date;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            if (task instanceof Deadlines) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                Deadlines deadline \u003d (Deadlines) task;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                deadline.getDateTime().format(DateTimeFormatter.ofPattern(\"MMM d yyyy  HH:mma\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                date \u003d deadline.getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                if (date.equals(searchdate))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                {   count++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                    System.out.println( count + \". \" + deadline);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                    isFound\u003dtrue;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }else if (task instanceof Events) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                Events event \u003d (Events) task;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                event.getDateTime().format(DateTimeFormatter.ofPattern(\"MMM d yyyy  HH:mma\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                date \u003d event.getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                if (date.equals(searchdate))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                {   count++;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                    System.out.println( count + \". \" + event);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                    isFound\u003dtrue;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (!isFound)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"Found 0 task. Unable to find date : \" + searchdate + \" (\" + searchdate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"Found \" + count + \" task(s)\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To sort task based on the date - for events and deadline task only"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Todo tasks will not be sorted"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param taskitem ArraList of Task objects"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void sortTaskDate(ArrayList\u003cTask\u003e taskitem) throws DukeException{"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        // sort todo tasks that cannot be sorted first, and then"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        // sort deadline and event which contains date"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        int TodoListCount \u003d 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        for ( int i\u003d0 ; i\u003ctaskitem.size() ; i++ ){"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            String command \u003d taskitem.get(i).toString().substring(0,3);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            if ( command.equals(\"[T]\") ){"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                Collections.swap(taskitem, TodoListCount,i);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                TodoListCount +\u003d 1;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        boolean isSwap \u003d true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        while (isSwap){"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            isSwap \u003d false  ;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            for (int i \u003d TodoListCount + 1; i\u003ctaskitem.size() ; i++ ){"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                if (taskitem.get(i-1).getDateTime().isAfter(taskitem.get(i).getDateTime()) ){"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                    Collections.swap(taskitem,i-1,i);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                    isSwap \u003d true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        for(int i\u003d0; i \u003c taskitem.size(); i++)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(i + 1 + \". \" + taskitem.get(i));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To find text based on a search keyword"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param keyword search keyword provided by the user"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void findText(String keyword){"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        boolean isFound\u003dfalse;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        int found \u003d 0;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        for (Task task : taskitems) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            if (task.getDescription().toLowerCase().indexOf(keyword) \u003e\u003d 0)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                System.out.println((found+1) + \". \" + task.toString());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                found++;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                isFound \u003d true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        if (!isFound){"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"Oops, unable to find keyword\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        else"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"Found \" + found + \" occurence(s)\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 214
    }
  },
  {
    "path": "src/main/java/Tasklist/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Todo extends Task"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * Todo constructor"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param description String todo description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public Todo(String description)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        isDone\u003dfalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To mark this deadline as completed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param done mark the status as completed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To get status of the todo object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return boolean status of deadline true/false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To geenerate todo object in readable format and display it to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String human readbable format of todo object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return \"[T] [\" + super.getStatusIcon() +\"]\" + super.getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To generate string for which to write todo  object into file over a specific format in | separated"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String format of Todo objects to be written to file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String writeToFile()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        //return \"D | \" + isDone + \" | \" + this.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return \"T\" + super.writeToFile() + super.getDescription() ;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 53
    }
  },
  {
    "path": "src/main/java/Ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        System.out.println(\"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * show loading error of file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void showLoadingError(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        printUI( \"Unable to load file\"+  System.lineSeparator());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * print line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void showLine(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        printUI( \"__________________________________________\"+  System.lineSeparator());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * print line into UI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param printline String to be printed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    private static void printUI(String printline){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        System.out.println(printline);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * to read from user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return String output of user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * showand print error message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param message String of error to be printed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void showError(String message){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        printUI( message +  System.lineSeparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To show ending of of the application"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void showBye(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        printUI(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * To show usage of a certain command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param printline"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    private static void printHelp(String printline){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        System.out.println(\"Usage: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        System.out.println(printline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     *  To show help for a specific command available from the application"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param help String of a specific command supported by the application"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static void showHelp(String help){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        switch (help.toUpperCase())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"LIST\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"To list available tasks available from the application, as well as loaded tasks from file\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"List\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"BYE\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Exit from the application\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"Bye\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"DONE\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"To mark a task to be done. a Tick (instead of cross) will appear when user list available tasks\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"Done \u003ctask serial number\u003e\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Example: Done 3\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"This will mark 3rd task from the list to be completed - with a tick mark\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"DELETE\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"To delete a task based on the serial/running number of tasks currently available\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"Delete \u003ctask serial number\u003e\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Example: Delete 3\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"This will delete 3rd task from the list\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"TODO\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"To add Todo task.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"Todo \u003ctask description\u003e \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Example: Todo Borrow book\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"DEADLINE\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"To add deadline task.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"Deadline \u003ctask description\u003e /at \u003cdd/MM/yyyy HHmm\u003e\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Example: Deadline return bike /by 15/04/2019 1800\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"EVENT\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"To add event task.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"Event \u003ctask description\u003e /at \u003cdd/MM/yyyy HHmm\u003e\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Example: Event Project meeting /at 19/05/2019 1920\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"FINDDATE\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Search a events/deadline which falls on specific date\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"Finddate \u003cString date in dd/MM/yyyy format\u003e. \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Example: Finddate 17/05/2019\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"SORT\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"To sort tasks in chronological order\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"Sort\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Example: Sort\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            case \"FIND\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printHelp(\"Find \u003cString keyword\u003e. Search a keyword of task description\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Usage: Please type: Help \u003ccommand\u003e\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Supported \u003ccommand\u003e:\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"List\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Bye\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Done\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Delete\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Todo\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Deadline\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Event\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Finddate\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Sort\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "                printUI(\"Find\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 145
    }
  },
  {
    "path": "src/main/java/util/Util.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class Util {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * This method is to convert a string based date time of format dd/MM/yyyy HHmm (dd:date, MM: month,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * yyyy: year, HH: Hour, mm: minute ) into a LocalDateTime type of objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @param date String date. in the form of dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @return LocalDateTime type of object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     * @throws DukeException will throw DukeException and request user to input dd/MM/yyyy HHmm format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    public static LocalDateTime convertDateTime(String date) throws DukeException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            date \u003d date.trim(); // to ensure string of date have no leading and trailing space"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            assert date.length()\u003d\u003d15:date.length(); //expected length of Date Time string is 15 chars"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            LocalDateTime d \u003d LocalDateTime.parse(date, df);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            return d;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            throw new DukeException(\"invalid date time format. Please use the following format - dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 32
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import util.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    void parseHelpTest()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            assertEquals(\"Event\", Parser.parseHelp(\"Help Event\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        } catch (DukeException e)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println((e.toString()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 24
    }
  },
  {
    "path": "src/test/java/util/UtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "//import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import util.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "public class UtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    void convertDateTimeTest()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            assertEquals(\"May 25 2019  23:59PM\",Util.convertDateTime(\"25/05/2019 2359\").format(DateTimeFormatter.ofPattern(\"MMM dd yyyy  HH:mma\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        catch (DukeException e)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "            System.out.println(\"Exception found in converting Date Time\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKooyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKooyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKooyh": 26
    }
  }
]
