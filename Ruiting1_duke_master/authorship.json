[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "group \u0027main.java.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    mainClassName \u003d \"main.java.duke.Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 2,
      "-": 18
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "D|1|return book|2019-08-05 1005|2019-12-05 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "E|1|project meeting|2019-12-01 1200|2019-11-17 1721"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "T|1|go exercising|2019-11-17 2229"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "T|0|borrow book|"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "E|0|tic2601 project group discussion|2019-11-21 1800|"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 5
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.storage.Storage.StorageOperationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.storage.Storage.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        } catch (StorageOperationException | InvalidStorageFilePathException | IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        //new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "      //  new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        new Duke(System.getProperty(\"user.dir\")+\"/data/duke.txt\").run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        //new Duke(\"C:\\\\Users\\\\RuiTing\\\\Desktop\\\\NUS-Module\\\\Year2-Sem1\\\\TIC2002-Introductionto Software Engineering\\\\Duke\\\\data\\\\duke.txt\").run();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        //new Duke(\"D:\\\\NUS-Module\\\\NUS-Module\\\\Year2-Sem1\\\\TIC2002-Introductionto Software Engineering\\\\Duke\\\\src\\\\test\\\\data\\\\InvalidDuke.txt\").run();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        //original"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            String line \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            while (!(line \u003d in.nextLine()).equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                if (line.equals(\"list\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    System.out.println(separateLine + \"\\n\" + \"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    //System.out.println(list.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    //Stream.of(list.toString()).forEach(System.out::println);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        //System.out.println(i+\". \"+\"[\"+list.get(i-1).getStatusIcon()+\"] \"+list.get(i-1).getDescription());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        System.out.println(i + \". \" + list.get(i - 1).toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    System.out.println(separateLine);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                } else if (line.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    int idx \u003d Integer.parseInt(line.substring(5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    list.get(idx - 1).markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    System.out.println(separateLine + \"\\n\" + \"Nice! I\u0027ve marked this task as done\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    System.out.println(\"[\" + list.get(idx - 1).getStatusIcon() + \"] \" + list.get(idx - 1).getDescription());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                }else if (line.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    int idx \u003d Integer.parseInt(line.substring(7));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    System.out.println(separateLine + \"\\n\" + \"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    System.out.println(list.get(idx-1).toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    list.remove(idx-1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    System.out.println(\"Now you have \"+list.size()+\" tasks in the list\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    try { addTask(line);}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    } catch (UndefinedTaskException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            if (line.equals(\"bye\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                System.out.println(separateLine + \"\\nBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                Command c \u003d new Parser().parse(fullCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                c.setData(tasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                c.execute();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                storage.save(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                isExit \u003d ExitCommand.isExit(c);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    //original"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static void addTask(String inputString) throws EmptyDescriptionException, UndefinedTaskException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            if(inputString.startsWith(\"todo\") || inputString.startsWith(\"deadline\") || inputString.startsWith(\"event\"))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                System.out.println(separateLine + \"\\n\" + \"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                String[] a \u003d inputString.split(\" \", 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                if (a[1].equals(\"\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    throw new EmptyDescriptionException(\"You did\u0027t enter any description in the task\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                String taskType \u003d a[0];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                if (taskType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    list.add(new Todo(a[1]));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    if (!a[1].contains(\"/by\") || a[1].startsWith(\"/by\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        throw new EmptyDescriptionException(\"You didn\u0027t enter any description or the deadline time.\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                \" And please enter task followed by time.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    String[] task \u003d a[1].split(\" /by \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    list.add(new Deadline(task[0], task[1]));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                } else if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    if (!a[1].contains(\"/at\") || a[1].startsWith(\"/at\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        throw new EmptyDescriptionException(\"You didn\u0027t enter any description or the event time.\\n\" +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                \" And please enter task followed by time.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    String[] task \u003d a[1].split(\" /at \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    list.add(new Events(task[0], task[1]));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                System.out.println(list.get(list.size() - 1).toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                throw new UndefinedTaskException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }catch (ArrayIndexOutOfBoundsException e)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            System.out.println(e.getMessage()+\": You entered the task with no description or time\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 149,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * add a task to the list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD_ONE\u003d\"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD_TWO\u003d\"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD_THREE\u003d\"event\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String MESSAGE_USAGE\u003d \"||\"+COMMAND_WORD_ONE+\": Adds a Todo Task to the task list. \\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                            \"Syntax: todo DESCRIPTION\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                            \"Example: \" + COMMAND_WORD_ONE +\" borrow book\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                            \"||\"+ COMMAND_WORD_TWO+\": Adds a Deadline task to the task list.\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                            \"Syntax: deadline DESCRIPTION by/TIME(YYYY-MM-dd HHmm)\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                            \"Example: \"+COMMAND_WORD_TWO +\" return book by/2019-12-01 1200\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                             \"||\"+ COMMAND_WORD_THREE+\": Adds an Event task to the task list.\\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                            \"Syntax: event DESCRIPTION at/TIME(YYYY-MM-dd HHmm)\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                            \"Example: \"+ COMMAND_WORD_THREE+\" project meeting at/2019-12-01 1200\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public AddCommand(Task toAdd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            taskList.addTask(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            System.out.println(\"New \"+toAdd.getTaskType()+\" Added: \"+toAdd.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            System.out.println(\"Now you have \"+taskList.getSize()+\" tasks in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        } catch (TaskList.DuplicateTaskException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 44
    }
  },
  {
    "path": "src/main/java/duke/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class ClearCommand extends Command{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD\u003d\"clear\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String MESSAGE_USAGE\u003d\"||\"+COMMAND_WORD+\": clear all the tasks in the task list.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        System.out.println(\"All the tasks are cleared\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 13
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.setTargetIndex(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private void setTargetIndex(int targetIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void setData(TaskList taskList){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.taskList\u003dtaskList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * delete a task from the taskList based on the index."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD\u003d\"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String MESSAGE_USAGE\u003d\"||\"+COMMAND_WORD+\": delete a task from the task list based on the index.\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Syntax: delete INDEX\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Example: \"+COMMAND_WORD+\" 2 (this will remove the No.2 task from the task list.)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public DeleteCommand(int targetIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.removeTask(getTargetIndex()-1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        System.out.print(\"Remove successfully.\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 25
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * mark a task as done statement based on the index."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD\u003d\"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String MESSAGE_USAGE\u003d\"||\"+COMMAND_WORD+\": mark a task as done status, there are two syntax.\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Syntax 1(without finish time): done INDEX\\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Example: \"+COMMAND_WORD +\" 2 (this command will mark the No.2 task as Done status and the default finish time is the current time)\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Syntax 2(with finish time): done INDEX on/TIME(YYYY-MM-dd HHmm)\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Example: \"+COMMAND_WORD+\" 2 on/2019-12-01 1200(this command will mark the No.2 task as Done status and finish time is 01 Dec 2019 12:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private LocalDateTime finishTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public DoneCommand(int targetIndex,LocalDateTime finishTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.finishTime\u003dfinishTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.getTaskByIdx(getTargetIndex()).markAsDone(finishTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        System.out.print( taskList.getTaskByIdx(getTargetIndex())+\" is done on \"+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                finishTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"))+\"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 29
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Exit the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD\u003d\"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String MESSAGE_USAGE\u003d\"||\"+COMMAND_WORD+\": Exit the program and save the changes to the txt file.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        System.out.print(\"See you next time.\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return command instanceof ExitCommand; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 19
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Finds and lists all tasks in taskList whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD\u003d\"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String MESSAGE_USAGE\u003d \"||\"+COMMAND_WORD+\": finds the specific tasks based on the keywords you entered.\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Syntax: find KEYWORDS\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Example: \"+COMMAND_WORD+\"find book(will return the task that contains the keyword book.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public FindCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final List\u003cTask\u003e foundTasks\u003d getTasksFromKeyword(keywords);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(foundTasks.isEmpty()){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            System.out.print(\"No Result Found\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d foundTasks.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            System.out.println(i + \". \" + foundTasks.get(i-1).toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Retrieves all tasks in the TaskList whose descriptions contain some of the specified keywords."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return list of tasks found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private List\u003cTask\u003e getTasksFromKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final List\u003cTask\u003e matchedTasks\u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        for(Task task : taskList.getAllTasks()){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            Set\u003cString\u003e descriptionWords\u003d new HashSet\u003c\u003e( Arrays.asList(task.getDescription().split(\" \")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            if (descriptionWords.containsAll(keywords)){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                matchedTasks.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return  matchedTasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 57
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD\u003d\"help\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"||\"+COMMAND_WORD + \": Shows program usage instructions.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        System.out.println(AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                + \"\\n\" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                + \"\\n\" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                + \"\\n\" + DoneCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                + \"\\n\" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                + \"\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                + \"\\n\" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                + \"\\n\" + ViewDoneCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                + \"\\n\" + ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public IncorrectCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "       System.out.println(feedbackToUser);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 19
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * List all the tasks in the taskList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD\u003d\"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String MESSAGE_USAGE\u003d\"||\"+COMMAND_WORD+\": list the all the tasks in the task list.\" ;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(taskList.getSize()\u003d\u003d0){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            System.out.println(\"There isn\u0027t any tasks in the list.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            System.out.println(i + \". \" + taskList.getTaskByIdx(i).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/ViewDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * view and list all the tasks which is done during a specific period."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class ViewDoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String COMMAND_WORD\u003d\"viewdone\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String MESSAGE_USAGE\u003d\"||\"+COMMAND_WORD+\": view the finished tasks done during a specific period.\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Syntax: \"+COMMAND_WORD+\" from/TIME to/TIME (all the time format is YYYY-MM-dd HHmm)\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"Example: \"+COMMAND_WORD+\" from/2019-08-08 0800 to/2019-12-12 1200\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private LocalDateTime fromTime,toTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public ViewDoneCommand(LocalDateTime fromTime,LocalDateTime toTime){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.fromTime\u003dfromTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.toTime\u003dtoTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void execute(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final List\u003cTask\u003e foundTasks\u003d getTasksFromTimePeriod(fromTime,toTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(foundTasks.isEmpty()){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            System.out.print(\"No Result Found\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d foundTasks.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            System.out.println(i + \". \" + foundTasks.get(i-1).toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Retrieves all tasks in the TaskList whose finishTime is in a specific period"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return list of tasks found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private List\u003cTask\u003e getTasksFromTimePeriod(LocalDateTime fromTime,LocalDateTime toTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final List\u003cTask\u003e matchedTasks\u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        for(Task task : taskList.getAllTasks()){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            if(task.isDone()\u0026\u0026task.getFinishTime().isAfter(fromTime)\u0026\u0026task.getFinishTime().isBefore(toTime)){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                matchedTasks.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return  matchedTasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 54
    }
  },
  {
    "path": "src/main/java/duke/common/Utils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final Pattern BASIC_DATE_TIME_FORMAT\u003dPattern.compile(\"(?\u003cyear\u003e\\\\d{4})\"+\"-\"+\"(?\u003cmonth\u003e\\\\d{2})\"+"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \"-\"+\"(?\u003cday\u003e\\\\d{2})\"+"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            \" \"+\"(?\u003chour\u003e\\\\d{2})(?\u003cminute\u003e\\\\d{2})\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Returns true if every element the given collection are unique by {@link Object#equals(Object)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static  boolean elementsAreUnique(Collection\u003c?\u003e items){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Set\u003cObject\u003e testSet\u003dnew HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        for (Object item :items){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            final boolean itemAlreadyExists\u003d!testSet.add(item);// set is not allowed duplicate."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            if(itemAlreadyExists){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return  true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * get the LocalDateTime from a basic date time string format(YYYY-MM-dd HHmm)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param timeString a basic datetime string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the result LocalDateTime"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @throws IllegalValueException of the string format is not correct"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static LocalDateTime getDatetimeFromString(String timeString) throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        Matcher matcher\u003dBASIC_DATE_TIME_FORMAT.matcher(timeString.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(!matcher.matches()){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            throw new IllegalValueException(\"Date format no match, please check your txt file format\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return  LocalDateTime.of(Integer.parseInt(matcher.group(\"year\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                Integer.parseInt(matcher.group(\"month\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                Integer.parseInt(matcher.group(\"day\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                Integer.parseInt(matcher.group(\"hour\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                Integer.parseInt(matcher.group(\"minute\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 49
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Signals that an operation would have violated the \u0027no duplicates\u0027 task of the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class DuplicateTaskException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public DuplicateTaskException() { super(\"There is a same task which already existed in the task list.\");  }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class EmptyDescriptionException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     public EmptyDescriptionException(String message)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "         this.message\u003dmessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     public String getMessage(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "         return message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/UndefinedTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class UndefinedTaskException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 5
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.common.Utils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.Events;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT\u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//    public static final Pattern TASK_TYPE_TODO_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//            Pattern.compile(\"(?\u003ctodoDescription\u003e[^/]+)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//    public static final Pattern TASK_TYPE_DEADLINE_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//            Pattern.compile(\"(?\u003cdeadlineDesc\u003e[^/]+)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//                    + \" by/(?\u003cbyTime\u003e[^/]+)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//public static final Pattern TASK_TYPE_EVENT_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//        Pattern.compile(\"(?\u003ceventDesc\u003e[^/]+)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//                + \" at/(?\u003catTime\u003e[^/]+)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "       public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        public static final Pattern TASK_TYPE_DEADLINE_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                Pattern.compile(\"(?\u003cdeadlineDesc\u003e[^/]+)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        + \" by/(?\u003cbyYear\u003e\\\\d{4})\"+\"-\"+\"(?\u003cbyMonth\u003e\\\\d{2})\"+\"-\"+\"(?\u003cbyDay\u003e\\\\d{2})\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        +\" \"+\"(?\u003cbyHour\u003e\\\\d{2})(?\u003cbyMin\u003e\\\\d{2})\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        public static final Pattern TASK_TYPE_EVENT_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                Pattern.compile(\"(?\u003ceventDesc\u003e[^/]+)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        + \" at/(?\u003catYear\u003e\\\\d{4})\"+\"-\"+\"(?\u003catMonth\u003e\\\\d{2})\"+\"-\"+\"(?\u003catDay\u003e\\\\d{2})\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        +\" \"+\"(?\u003catHour\u003e\\\\d{2})(?\u003catMin\u003e\\\\d{2})\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final Pattern TASK_INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final Pattern TASK_DONE_TIME_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\d+)\"+\" on/\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        +\"(?\u003cyear\u003e\\\\d{4})\"+\"-\"+\"(?\u003cmonth\u003e\\\\d{2})\"+\"-\"+\"(?\u003cday\u003e\\\\d{2})\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        +\" \"+\"(?\u003chour\u003e\\\\d{2})(?\u003cminute\u003e\\\\d{2})\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final Pattern VIEW_DONE_TASK_BY_TIME_FORMAT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            Pattern.compile(\"from/(?\u003cfromTime\u003e[^/]+)\"+\" to/(?\u003ctoTime\u003e[^/]+)\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param inputCommand full user input string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Command parse(String inputCommand) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(inputCommand.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new IncorrectCommand(\"This is a incorrect format, \" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    \" you may type the list to see all the commands.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        switch(commandWord){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case AddCommand.COMMAND_WORD_ONE:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return prepareAddTodo(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case AddCommand.COMMAND_WORD_TWO:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return prepareAddDeadline(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case AddCommand.COMMAND_WORD_THREE:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return prepareAddEvent(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return prepareDone(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return prepareDelete(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return prepareFind(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case ViewDoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return prepareViewDone(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses arguments in the context of the add todotask command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Command prepareAddTodo(String args) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return new AddCommand(new Todo(args.trim()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses arguments in the context of the add deadline task command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Command prepareAddDeadline(String args) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Matcher matcher\u003d TASK_TYPE_DEADLINE_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new IncorrectCommand(\"This is a incorrect format, \" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    \" you may type \u0027help\u0027 to see all the commands.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return new AddCommand(new Deadline(matcher.group(\"deadlineDesc\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                LocalDateTime.of(Integer.parseInt(matcher.group(\"byYear\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                 Integer.parseInt(matcher.group(\"byMonth\")),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                 Integer.parseInt(matcher.group(\"byDay\")),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                 Integer.parseInt(matcher.group(\"byHour\")),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                 Integer.parseInt(matcher.group(\"byMin\"))) ));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses arguments in the context of the add Event task command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Command prepareAddEvent(String args) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Matcher matcher\u003d TASK_TYPE_EVENT_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new IncorrectCommand(\"This is a incorrect format, \" +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    \" you may type \u0027help\u0027 to see all the commands.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return new AddCommand(new Events(matcher.group(\"eventDesc\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                LocalDateTime.of(Integer.parseInt(matcher.group(\"atYear\")),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                Integer.parseInt(matcher.group(\"atMonth\")),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                Integer.parseInt(matcher.group(\"atDay\")),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                Integer.parseInt(matcher.group(\"atHour\")),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                Integer.parseInt(matcher.group(\"atMin\"))) ));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses argument in the context of the mark a task as done command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Command prepareDone(String args) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "         Matcher matcher \u003dTASK_DONE_TIME_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            int targetIndex\u003dInteger.parseInt((matcher.group(\"targetIndex\")));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new DoneCommand(targetIndex,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    LocalDateTime.of(Integer.parseInt(matcher.group(\"year\")),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                    Integer.parseInt(matcher.group(\"month\")),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                    Integer.parseInt(matcher.group(\"day\")),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                    Integer.parseInt(matcher.group(\"hour\")),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                    Integer.parseInt(matcher.group(\"minute\")))  );"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new DoneCommand(targetIndex,LocalDateTime.now());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }catch (ParseException pe){"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new IncorrectCommand(\"This is a incorrect format, \" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    \" you may type \u0027help\u0027 to see all the commands.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses argument in the context of the delete a task command."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Command prepareDelete(String args) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            assert targetIndex\u003e0 : \"Invalid number, the index should be larger than 0.\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }catch (ParseException pe){"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new IncorrectCommand(\"This is a incorrect format, \" +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    \" you may type the list to see all the commands.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses arguments in the context of the find task command."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Command prepareFind(String args) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final  Matcher matcher\u003dKEYWORDS_ARGS_FORMAT.matcher((args.trim()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(!matcher.matches()){"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new IncorrectCommand(\"This is a incorrect format, \" +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    \" you may type \u0027help\u0027 to see all the commands.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses arguments in the context of the viewdone task Command."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Command prepareViewDone(String args) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            final Matcher matcher \u003d VIEW_DONE_TASK_BY_TIME_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return new IncorrectCommand(\"This is a incorrect format, \" +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        \" you may type \u0027help\u0027 to see all the commands.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new ViewDoneCommand(Utils.getDatetimeFromString(matcher.group(\"fromTime\")),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    Utils.getDatetimeFromString(matcher.group(\"toTime\")));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }catch (IllegalValueException ive){"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new IncorrectCommand(\"This is a incorrect format, \" +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                    \" you may type \u0027help\u0027 to see all the commands.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException{"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Matcher matcher \u003d TASK_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(!matcher.matches()){"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            throw   new  ParseException(\"Could not match to the correct index.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 274
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Storage() throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Storage(String filePath) throws InvalidStorageFilePathException{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        path\u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Returns true if the given path is acceptable as a storage file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * The file path is considered acceptable if it ends with \u0027.txt\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Saves the {@code taskList} data to the storage file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void save(TaskList taskList) throws StorageOperationException{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            List\u003cString\u003e encodedTaskList\u003dTaskListEncorder.encodeTaskList(taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            Files.write(path,encodedTaskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }catch (IOException ioe)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            throw new StorageOperationException(\"Saving went wrong\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Loads the {@code taskList} data from this storage file, and then returns it."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Returns an empty {@code taskList} if the file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public TaskList load() throws StorageOperationException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (!Files.exists(path) || !Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            Files.createFile(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return TaskListDecoder.decodeTaskList(Files.readAllLines(path));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }catch (IOException ioe){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            throw new StorageOperationException(\"Loading went wrong\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }catch (IllegalValueException ive){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            throw new StorageOperationException(\"File contains incorrect format.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Signals that the given file path does not fulfill the storage filepath constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Signals that some error has occured while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 105
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskListDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.storage.Storage.StorageOperationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Decodes the storage data file into an {@code taskList} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class TaskListDecoder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final Pattern TODO_TXT_FILE_FORMAT\u003dPattern.compile(\"T[|](?\u003cisDone\u003e[01])[|](?\u003ctaskDesc\u003e[^|]+)[|]\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                                                     \"(?\u003cfinishTime\u003e[^|]*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final Pattern DEADLINE_TXT_FILE_FORMAT\u003dPattern.compile(\"D[|](?\u003cisDone\u003e[01])\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                                                          \"[|](?\u003ctaskDesc\u003e[^|]+)\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                                                          \"[|](?\u003cplanTime\u003e[^|]+)[|]\"+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                                                      \"(?\u003cfinishTime\u003e[^|]*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static final Pattern EVENT_TXT_FILE_FORMAT\u003dPattern.compile(\"E[|](?\u003cisDone\u003e[01])\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                                                       \"[|](?\u003ctaskDesc\u003e[^|]+)\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                                                       \"[|](?\u003cplanTime\u003e[^|]+)[|]\"+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                                                        \"(?\u003cfinishTime\u003e[^|]*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Decodes {@code encodedTasklist} into an {@code TaskList} containing the decoded tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @throws IllegalValueException if any of the fields in any encoded task string is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static TaskList decodeTaskList(List\u003cString\u003e encodedTasklist) throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final List\u003cTask\u003e decodedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        for (String encodedTask : encodedTasklist){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            decodedTasks.add(decodeTaskFromString(encodedTask));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return new TaskList(decodedTasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Decodes {@code encodedTask} into a {@code Task}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @throws IllegalValueException if any field in the {@code encodedTask} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static Task decodeTaskFromString(String encodedTask) throws IllegalValueException{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Matcher matcherTodo \u003d TODO_TXT_FILE_FORMAT.matcher(encodedTask.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Matcher matcherDeadline \u003d DEADLINE_TXT_FILE_FORMAT.matcher(encodedTask.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Matcher matcherEvent \u003d EVENT_TXT_FILE_FORMAT.matcher(encodedTask.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            if (matcherTodo.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                isDone\u003d\"1\".equals(matcherTodo.group(\"isDone\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return new Todo(matcherTodo.group(\"taskDesc\"), isDone,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        isDone? Utils.getDatetimeFromString(matcherTodo.group(\"finishTime\")) : null  );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            } else if (matcherDeadline.matches()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                isDone\u003d\"1\".equals(matcherDeadline.group(\"isDone\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return new Deadline(matcherDeadline.group(\"taskDesc\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                         Utils.getDatetimeFromString(matcherDeadline.group(\"planTime\")), isDone,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        isDone? Utils.getDatetimeFromString(matcherDeadline.group(\"finishTime\")) : null  );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            else if (matcherEvent.matches()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                isDone\u003d\"1\".equals(matcherEvent.group(\"isDone\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                return new Events(matcherEvent.group(\"taskDesc\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        Utils.getDatetimeFromString(matcherEvent.group(\"planTime\")), isDone,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                        isDone? Utils.getDatetimeFromString(matcherEvent.group(\"finishTime\")) : null  );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            else throw new IllegalValueException(\"No match, please check your txt file format\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 86
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskListEncorder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Encodes the {@code taskList} object into a data file for storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class TaskListEncorder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Encodes all the {@code Task} in the {@code toSave} into a list of decodable and readable string presentation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * for storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static List\u003cString\u003e encodeTaskList(TaskList toSave){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final List\u003cString\u003e encodedTasks\u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        for(int i\u003d1;i\u003c\u003dtoSave.getSize();i++){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            encodedTasks.add(encodeTaskToString(toSave.getTaskByIdx(i)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return encodedTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Encodes the {@code task} into a decodable and readable string representation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static String encodeTaskToString(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final StringBuilder encodedTaskBuilder \u003dnew StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        encodedTaskBuilder.append(task.getTaskType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        encodedTaskBuilder.append(\"|\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        encodedTaskBuilder.append(task.isDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        encodedTaskBuilder.append(\"|\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        encodedTaskBuilder.append(task.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        encodedTaskBuilder.append(\"|\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(task.getTaskType()\u003d\u003d\"D\"||task.getTaskType()\u003d\u003d\"E\"){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            encodedTaskBuilder.append(task.getTaskTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            encodedTaskBuilder.append(\"|\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(task.isDone()){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            encodedTaskBuilder.append(task.getFinishTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return encodedTaskBuilder.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * represent a deadline task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static final String TASK_TYPE\u003d\"D\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Constructs a deadline task with description and time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * by default the isDone is false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.by\u003dby;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Constructs a deadline task with description, time and isDone"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Deadline(String description, LocalDateTime by, boolean isDone,LocalDateTime finishTime){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        super(description,isDone,finishTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.by\u003dby;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return TASK_TYPE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public LocalDateTime getTaskTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (! super.equals(obj)) return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (this.getClass() !\u003d obj.getClass())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        Deadline d \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return this.by.equals(d.by);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 58
    }
  },
  {
    "path": "src/main/java/duke/task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * represent a event task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static final String TASK_TYPE\u003d\"E\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Constructs a event task with description and time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * by default the isDone is false"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Events(String description,LocalDateTime at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.at\u003dat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Constructs a event task with description, time and isDone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Events(String description,LocalDateTime at, boolean isDone,LocalDateTime finishTime){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        super(description,isDone,finishTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.at\u003dat;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return TASK_TYPE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public LocalDateTime getTaskTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (! super.equals(obj)) return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (this.getClass() !\u003d obj.getClass())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        Events e \u003d (Events) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return this.at.equals(e.at);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * represent a task in the taskList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private LocalDateTime taskTime\u003dLocalDateTime.of(2000,1,1,0,0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    protected LocalDateTime finishTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static final String TASK_TYPE\u003d\"A\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Task(String description,boolean isDone,LocalDateTime finishTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(this.isDone){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            this.finishTime\u003dfinishTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public LocalDateTime getFinishTime(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return finishTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * get the displayed icon from isDone status"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return a string icon to display the status"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return (isDone ? \"Done\"+\" : \"+finishTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                       : \"X\"); //return tick or X symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * mask a task as done status."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param finishTime"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void markAsDone(LocalDateTime finishTime){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        isDone\u003dtrue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.finishTime\u003dfinishTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public boolean isDone(){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String getTaskType(){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return TASK_TYPE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public LocalDateTime getTaskTime(){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return taskTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        Task otherTask \u003d (Task) obj;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                || (obj instanceof Task // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                \u0026\u0026 otherTask.description.equals(this.description)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                \u0026\u0026 otherTask.isDone \u003d\u003d this.isDone"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                \u0026\u0026 otherTask.taskTime.equals(this.taskTime));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return \"[\"+getStatusIcon()+\"] \"+getDescription();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 81
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * A list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private final List\u003cTask\u003e taskList\u003dnew ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Construct an empty taskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public TaskList(){ }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Construct a taskList with the given tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public TaskList(Task[] tasks){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final List\u003cTask\u003e initialTasks\u003d Arrays.asList(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.addAll(initialTasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Constructs a taskList from the items in the given collection."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param tasks a collection of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public TaskList(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.addAll(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public TaskList(TaskList source){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.addAll(source.taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Adds a task to the list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param toAdd the task to add"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void addTask(Task toAdd) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if(contains(toAdd)){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * check if a task is already exist in the taskList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param toCheck the task to check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public boolean contains(Task toCheck){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        for(Task task : taskList){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "           if(task.equals(toCheck)){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "               return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "           }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * gets the specific task by index in the list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param taskIdx the index in the taskList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return a Task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Task getTaskByIdx(int taskIdx){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return taskList.get(taskIdx-1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Remove a task from a list based on Task Object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param toRemove the Task to remove"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void removeTask(Task toRemove){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.remove(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Remove a task from the list based on the index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param toRemoveIdx the index in the taskList"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void removeTask(int toRemoveIdx){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.remove(toRemoveIdx);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * get the size of the taskList"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the int size"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public int getSize(){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * gets all the tasks in the taskList"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return a new TaskList"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public TaskList getAllTasks(){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return new TaskList(taskList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * clear all the task in the tasklist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return taskList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 task of the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static class DuplicateTaskException extends Exception{"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        public DuplicateTaskException() { super(\"There is a same task which already existed in the task list.\");  }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 127
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " * Represent a todoTask"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static final String TASK_TYPE\u003d\"T\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Constructs a todoTask with description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * by default the isDone is false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Constructs a todoTask with description and isDone"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Todo(String description, boolean isDone, LocalDateTime finishTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        super(description,isDone,finishTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return TASK_TYPE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (! super.equals(obj)) return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        if (this.getClass() !\u003d obj.getClass())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        else return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 47
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package main.java.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static final String SEPARATE_LINE\u003d\"_________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "                                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static final String ERROR_LOADING_MSG\u003d\"Failed to load this Duke Application from storage file.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        System.out.println(SEPARATE_LINE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        System.out.println(\"Hello! I am Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        System.out.println(SEPARATE_LINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * read command from the userInput"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the string of user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        out.print(\"Enter Command: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        String line\u003din.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * show the divider line."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        out.println(SEPARATE_LINE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * show the error message"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param message the passed message to show"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * show the loading error message to the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        out.print(ERROR_LOADING_MSG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 69
    }
  },
  {
    "path": "src/test/data/InvalidDuke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "D|1|aa a|2019-08-05 1005|2019-10-05 0805"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "E|grg1|b bfe b|2019-08-05 1005|2019-08-05 1005"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "T|1|c cc|2019-11-13 1353"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "Tgerg|1|d dd|2019-11-1grg3 1417"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "D|1|e e e|2019-08-05 1005|2019-11-16 1739"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "D|0|f f f|2019-08-05rregr 1005|"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 6
    }
  },
  {
    "path": "src/test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "D|1|aa a|2019-08-05 1005|2019-10-05 0805"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "E|1|b b b|2019-08-05 1005|2019-08-05 1005"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "T|1|c cc|2019-11-13 1353"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "T|1|d dd|2019-11-13 1417"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "D|1|e e e|2019-08-05 1005|2019-11-16 1739"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "D|0|f f f|2019-08-05 1005|"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 6
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 12
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Tests for 0-argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//    public void parse_helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//    public void parse_clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//        final String input \u003d \"clear\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void parse_listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void parse_exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final String input \u003d \"bye\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * Parses input and asserts the class/type of the returned command object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        final Command result \u003d parser.parse(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 64
    }
  },
  {
    "path": "src/test/java/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import main.java.duke.storage.Storage.StorageOperationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public static Path testFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"data\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    public void load_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        // The file contains valid txt data, but does not match the task list format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        Storage storage \u003d getStorage(\"InvalidDuke.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        assertThrows(StorageOperationException.class, () -\u003e storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    private Storage getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "        return new Storage(TEST_DATA_FOLDER + \"/\" + fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 30
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "return book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "buy bread"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "done 2"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "javac  -cp C:\\Users\\RuiTing\\Desktop\\NUS-Module\\Year2-Sem1\\TIC2002-Introductionto Software Engineering\\Duke\\src -Xlint:none -d C:\\Users\\RuiTing\\Desktop\\NUS-Module\\Year2-Sem1\\TIC2002-Introductionto Software Engineering\\Duke\\bin C:\\Users\\RuiTing\\Desktop\\NUS-Module\\Year2-Sem1\\TIC2002-Introductionto Software Engineering\\Duke\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "java -classpath C:\\Users\\RuiTing\\Desktop\\NUS-Module\\Year2-Sem1\\TIC2002-Introductionto Software Engineering\\Duke\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ruiting1"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Ruiting1": 21
    }
  }
]
