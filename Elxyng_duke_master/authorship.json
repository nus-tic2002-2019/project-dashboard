[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "D | 1 | duke | 12 Oct 2019"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "D | 0 | duke | 15 Oct 2019"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "D | 0 | duke | 27 Oct 2019"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "D | 0 | duke | Date not specified"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "E | 0 | class gathering | 12 Dec 2019"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "E | 0 | class gathering | 15 Dec 2019"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "E | 0 | class gathering | 27 Dec 2019"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "E | 0 | class gathering | Date not specified"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "T | 0 | homework"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Elxyng": 10
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import exceptions.EmptyException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import exceptions.IndexOutOfRangeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import exceptions.ListEmptyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import exceptions.StringFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import tasklist.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import tasklist.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import tasklist.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import tasklist.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "   public static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        public static void main(String[] args) throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Storage.loadFile();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printDuke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                line \u003d in.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                if (line.equals(\"bye\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.bye();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } else if (line.equals(\"list\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    list();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } else if (line.contains(\"done\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    done(line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } else if (line.contains(\"event\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    deadlineEvent(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } else if (line.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    deadlineEvent(line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } else if (line.contains(\"todo\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    todoTask(line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } else if (line.contains(\"delete\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    deleteTask(line);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } else if (line.equals(\"save\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    save();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } else if (line.contains(\"find\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    searchDate(line);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    invalidTask(line);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Format and save tasks to file in String e.g D | 0 | do homework | 11 Apr 2019"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws FileNotFoundException if file can\u0027t be found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void save() throws FileNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        String list \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                list +\u003d taskList.get(i).saveFormat() + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Storage.writeToFile(list);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printTaskSaved();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Output all the tasks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void list() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            listEmpty(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printOutput((taskList));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } catch (ListEmptyException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printListEmpty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Mark multiple tasks as done - implementation for C-MassOps e.g done 1,2"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param line the command that user input"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void done(String line){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            listEmpty(taskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            String theStr \u003d line.substring(5);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            String[] strArr \u003d theStr.split(\",\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (strArr[0].equals(\"all\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Task tasks \u003d taskList.get(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    tasks.markAsDone();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printOutput((taskList));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                int[] intArr \u003d new int[strArr.length];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                for (int i \u003d 0; i \u003c strArr.length; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    String num \u003d strArr[i];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    intArr[i] \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    indexOutOfRange(taskList.size(), intArr[i]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printMarkedAsDone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                assert intArr !\u003d null \u0026\u0026 intArr.length \u003e 0 : \"List variable is null or empty\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                for (int i \u003d 0; i \u003c intArr.length; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Task tasks \u003d taskList.get(intArr[i] - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    tasks.markAsDone();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printInLine(\" \" + tasks.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printNumberFormatException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        catch (IndexOutOfRangeException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printIndexOutOfRangeException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        catch  (ListEmptyException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printListEmpty();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Add new tasks"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param line the command that user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void todoTask(String line) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        String taskDescription \u003d line.substring(5);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task todo \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        taskList.add(todo);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        UI.printLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        UI.printAddedTask();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        UI.printTask(taskList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        UI.printNumberOfTasks(taskList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        UI.printLine();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Add new deadline/event tasks"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param line the command that user input"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void deadlineEvent(String line) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (line.charAt(0) \u003d\u003d \u0027e\u0027) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            //e.g event dinner /at 12 oct 2019"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (line.contains(\"/at\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //str[1] to get date - 12 oct 2019"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String[] str \u003d line.split(\" /at \", 2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //description[1] to get description - dinner"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String[] taskDescription \u003d str[0].split(\" \", 2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    //Format date 12 Oct 2019, to string \"12 Oct 2019\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Date date \u003d dateFormat.parse(str[1]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    String strDate \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Task event \u003d new Event(taskDescription[1], strDate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    taskList.add(event);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printLine();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printAddedTask();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printTask(taskList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printNumberOfTasks(taskList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printLine();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printParseException();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //e.g event dinner"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String taskDescription \u003d line.substring(6);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                Task event \u003d new Event(taskDescription, \"Date not specified\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                taskList.add(event);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printLine();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printAddedTask();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printTask(taskList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printNumberOfTasks(taskList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printLine();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else if (line.charAt(0) \u003d\u003d \u0027d\u0027){"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            //e.g deadline duke /by 12 oct 2019"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (line.contains(\"/by\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //str[1] to get date - 12 oct 2019"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String[] str \u003d line.split(\" /by \", 2);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //description[1] to get description - duke"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String[] taskDescription \u003d str[0].split(\" \", 2);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    //Format date 12 Oct 2019, to string \"12 Oct 2019\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Date date \u003d dateFormat.parse(str[1]);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    String strDate \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Task deadline \u003d new Deadline(taskDescription[1], strDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    taskList.add(deadline);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printLine();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printAddedTask();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printTask(taskList);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printNumberOfTasks(taskList);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printLine();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    UI.printParseException();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //e.g deadline duke"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String taskDescription \u003d line.substring(9);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                Task deadline \u003d new Deadline(taskDescription, \"Date not specified\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                taskList.add(deadline);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printLine();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printAddedTask();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printTask(taskList);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printNumberOfTasks(taskList);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printLine();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Delete multiple tasks - implementation for C-MassOps"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param line the command that user input"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void deleteTask(String line) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            listEmpty(taskList);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            String theStr \u003d line.substring(7);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            String[] strArr \u003d theStr.split(\",\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (strArr[0].equals(\"all\")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printOutput((taskList));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                taskList.clear();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printNumberOfTasks(taskList);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            int[] intArr \u003d new int[strArr.length];"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assert intArr !\u003d null \u0026\u0026 intArr.length \u003e 0 : \"List variable is null or empty\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            for (int i \u003d 0; i \u003c strArr.length; i++) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String num \u003d strArr[i];"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                intArr[i] \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                indexOutOfRange(taskList.size(), intArr[i]);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printLine();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printRemoveTask();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            for (int i \u003d 0; i \u003c intArr.length; i++) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                Task tasks \u003d taskList.get(intArr[i] - (i + 1));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printInLine(\" \" + tasks.toString());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                taskList.remove(intArr[i] - (i + 1));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printNumberOfTasks(taskList);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printLine();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printNumberFormatException();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } catch (IndexOutOfRangeException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printIndexOutOfRangeException();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } catch  (ListEmptyException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printListEmpty();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //User input invalid command"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param line the command that user input"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void invalidTask(String line) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            checkEmpty(line);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            containsWord(line);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } catch (EmptyException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printEmptyException();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } catch (StringFormatException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printStringFormatException();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Search date using \"on\", \"from\", \"between to\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Search by task type"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param line the command that user input"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void searchDate(String line) throws ParseException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        String[] str;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            listEmpty(taskList);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            containsWordSearch(line);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            //e.g find EVENT on 12 oct 2019"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (line.contains(\"on\")) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                str \u003d line.split(\" on \", 2);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //Format string \"12 oct 2019\" to date"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                Date date \u003d dateFormat.parse(str[1]);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //Get task type e.g event"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String taskType \u003d str[0].substring(5).toLowerCase();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                assert taskList !\u003d null \u0026\u0026 taskList.size() \u003e 0 : \"List variable is null or empty\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //Loop taskList to check conditions for findDate"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    if (taskList.get(i).findDate(date, taskType)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                        foundTasks.add(taskList.get(i));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //e.g find EVENT from 12 oct 2019"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else if (line.contains(\"from\")) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                str \u003d line.split(\" from \", 2);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //Format string \"12 oct 2019\" to date"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                Date date \u003d dateFormat.parse(str[1]);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String taskType \u003d str[0].substring(5).toLowerCase();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                assert taskList !\u003d null \u0026\u0026 taskList.size() \u003e 0 : \"List variable is null or empty\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //Loop taskList to check conditions for findFromDateRange"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    if (taskList.get(i).findFromDateRange(date, taskType)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                        foundTasks.add(taskList.get(i));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //e.g find EVENT between 12 oct 2019 to 16 oct 2019"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else if (line.contains(\"between\") \u0026\u0026 line.contains(\"to\")) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                str \u003d line.split(\" between \", 2);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //From: dateRange[0], To: dateRange[1]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String[] dateRange \u003d str[1].split(\" to \", 2);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //Format string \"12 oct 2019\" to date"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                Date date1 \u003d dateFormat.parse(dateRange[0]);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                Date date2 \u003d dateFormat.parse(dateRange[1]);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String taskType \u003d str[0].substring(5).toLowerCase();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                assert taskList !\u003d null \u0026\u0026 taskList.size() \u003e 0 : \"List variable is null or empty\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //Loop taskList to check conditions for findBetweenDateRange"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    if (taskList.get(i).findBetweenDateRange(date1, date2, taskType)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                        foundTasks.add(taskList.get(i));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //e.g find all EVENTS"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else if (line.contains(\"all\")) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                str \u003d line.split(\" \", 3);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //e.g \"events\""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                String type \u003d str[2].toLowerCase();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                assert taskList !\u003d null \u0026\u0026 taskList.size() \u003e 0 : \"List variable is null or empty\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                //Loop taskList to check conditions for taskType"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    if (taskList.get(i).taskType(type)) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                        foundTasks.add(taskList.get(i));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (foundTasks.isEmpty()){"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printTaskNotFound();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                UI.printOutput((foundTasks));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } catch (StringFormatException e) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printStringFormatException();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } catch (ListEmptyException e) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "           UI.printListEmpty();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Exceptions"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the command that user input"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws StringFormatException if description does not hit the if conditions"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void containsWord(String description) throws StringFormatException {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if ( !( description.equals(\"bye\") || description.equals(\"list\") || description.contains(\"/\"))) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            throw new StringFormatException ();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the command that user input"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws StringFormatException if description does not hit the if conditions"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void containsWordSearch(String description) throws StringFormatException {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if ( ! (description.contains(\"on\") || description.contains(\"from\") || description.contains(\"all\") || (description.contains(\"between\") \u0026\u0026 description.contains(\"to\")) )) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            throw new StringFormatException ();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskList taskList arr that stores all tasks"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ListEmptyException if list is empty"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void listEmpty( ArrayList\u003cTask\u003e taskList) throws ListEmptyException {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            throw new ListEmptyException ();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the command that user input"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws EmptyException if user did not input anything"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void checkEmpty(String description) throws EmptyException {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (description.isEmpty()){"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            throw new EmptyException ();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param size the size of the taskList e.g 5"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param number the task number that the user input e.g user input: delete 6"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws IndexOutOfRangeException if the number is greater than the size of the taskList e.g 6 \u003e 5, or number \u003c 0"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void indexOutOfRange(int size,  int number) throws IndexOutOfRangeException {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (number \u003e size || number \u003c 0) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            throw new IndexOutOfRangeException();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Elxyng": 438,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import tasklist.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import tasklist.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import tasklist.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import tasklist.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Write tasks to file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param fileContent the tasks stored in the file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws FileNotFoundException if file can\u0027t be found"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void writeToFile(String fileContent) throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        File f \u003d new File(\"D:\\\\TIC2002PJ\\\\data\\\\duke.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        PrintWriter pw \u003d new PrintWriter(f);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        pw.println(fileContent);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        pw.close();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Load tasks from file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws FileNotFoundException if file can\u0027t be found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void loadFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        File f \u003d new File(\"D:\\\\TIC2002PJ\\\\data\\\\duke.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            loadFormat(sc.nextLine());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    //Add tasks to taskList from file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param fileContent the tasks stored in the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    static void loadFormat(String fileContent) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(fileContent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        String str \u003d fileContent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        String[] storeArray \u003d str.split(\" \\\\| \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (storeArray[0].equals(\"T\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                Task t\u003d new ToDo(storeArray[2], Boolean.valueOf(storeArray[1]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                Duke.taskList.add(t);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else if (storeArray[0].equals(\"D\")){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Task t\u003d new Deadline(storeArray[2], Boolean.valueOf(storeArray[1]),storeArray[3]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Duke.taskList.add(t);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }catch (ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Task t\u003d new Deadline(storeArray[2], Boolean.valueOf(storeArray[1]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Duke.taskList.add(t);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else if (storeArray[0].equals(\"E\")){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Task t\u003d new Event(storeArray[2], Boolean.valueOf(storeArray[1]),storeArray[3]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Duke.taskList.add(t);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }catch (ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Task t\u003d new Event(storeArray[2], Boolean.valueOf(storeArray[1]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                    Duke.taskList.add(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 84
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import tasklist.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printDuke() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.print(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void bye() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printInLine(String text) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"    \" + text);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printListEmpty() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but the list is empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printTaskSaved() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"Tasks saved!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printMarkedAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println( \"    Nice! I\u0027ve marked this task(s) as done:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printAddedTask(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println( \"    Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printNumberOfTasks( ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"    Now you have \" + (taskList.size()) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printRemoveTask() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println( \"    Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printTask(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        UI.printInLine(\" \" + taskList.get(taskList.size() - 1).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printOutput(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        UI.printLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            UI.printInLine((i + 1) + \". \" + taskList.get(i).toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        UI.printLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printStringFormatException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printNumberFormatException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printIndexOutOfRangeException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"☹ OOPS!!! Task(s) not found!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printTaskNotFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"☹ OOPS!!! Task(s) not found!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printEmptyException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"☹ OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public static void printParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        System.out.println(\"☹ OOPS!!! Please enter DD MMM YYYY date format.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 94
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 4
    }
  },
  {
    "path": "src/main/java/exceptions/EmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class EmptyException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 4
    }
  },
  {
    "path": "src/main/java/exceptions/IndexOutOfRangeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class IndexOutOfRangeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 4
    }
  },
  {
    "path": "src/main/java/exceptions/ListEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class ListEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 4
    }
  },
  {
    "path": "src/main/java/exceptions/StringFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class StringFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 4
    }
  },
  {
    "path": "src/main/java/tasklist/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param time the task time that the user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public Deadline(String description, String time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param status check if the task has already marked as done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public Deadline(String description, Boolean status) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        super(description, status);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param status check if the task has already marked as done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param time the task time that the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public Deadline(String description, Boolean status, String time) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        super(description, status);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return(\"[D]\" + super.toString() + \" (by: \" + this.time + \")\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return(\"D \" + super.saveFormat() + \" | \" + this.time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param dateSearch the date that user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean findDate(Date dateSearch, String taskType) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (this.time.equals(\"Date not specified\")){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Date date \u003d dateFormat.parse(this.time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (dateSearch.compareTo(date) \u003d\u003d 0 \u0026\u0026 taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param dateSearch the date that user input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean findFromDateRange(Date dateSearch, String taskType) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (this.time.equals(\"Date not specified\")){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Date date \u003d dateFormat.parse(this.time);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if ((dateSearch.compareTo(date) \u003d\u003d 0 \u0026\u0026 taskType.equals(\"deadline\")) || (dateSearch.compareTo(date) \u003c 0 \u0026\u0026 taskType.equals(\"deadline\"))) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param fromDate the start date that user input"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param endDate the end date that user input"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean findBetweenDateRange(Date fromDate, Date endDate, String taskType) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (this.time.equals(\"Date not specified\")){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Date date \u003d dateFormat.parse(this.time);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (fromDate.compareTo(date) \u003d\u003d 0 \u0026\u0026 taskType.equals(\"deadline\") || endDate.compareTo(date) \u003d\u003d 0 \u0026\u0026 taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else if (fromDate.compareTo(date) \u003c 0 \u0026\u0026 endDate.compareTo(date) \u003e 0 \u0026\u0026 taskType.equals(\"deadline\")){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean taskType(String taskType){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (taskType.equals(\"deadlines\")){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 131
    }
  },
  {
    "path": "src/main/java/tasklist/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param time the task time that the user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param status check if the task has already marked as done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public Event(String description, Boolean status) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        super(description,status);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param status check if the task has already marked as done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param time the task time that the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public Event(String description,Boolean status, String time) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        super(description,status);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return(\"[E]\" + super.toString() + \" (at: \" + this.time + \")\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return(\"E \" + super.saveFormat() + \" | \" + this.time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param dateSearch the date that user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean findDate(Date dateSearch, String taskType) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (this.time.equals(\"Date not specified\")){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Date date \u003d dateFormat.parse(this.time);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (dateSearch.compareTo(date) \u003d\u003d 0 \u0026\u0026 taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param dateSearch the date that user input"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean findFromDateRange(Date dateSearch, String taskType) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (this.time.equals(\"Date not specified\")){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Date date \u003d dateFormat.parse(this.time);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if ((dateSearch.compareTo(date) \u003d\u003d 0 \u0026\u0026 taskType.equals(\"event\")) || (dateSearch.compareTo(date) \u003c 0 \u0026\u0026 taskType.equals(\"event\"))) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param fromDate the start date that user input"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param endDate the end date that user input"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean findBetweenDateRange(Date fromDate, Date endDate, String taskType) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (this.time.equals(\"Date not specified\")){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Date date \u003d dateFormat.parse(this.time);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (fromDate.compareTo(date) \u003d\u003d 0 \u0026\u0026 taskType.equals(\"event\") || endDate.compareTo(date) \u003d\u003d 0 \u0026\u0026 taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else if (fromDate.compareTo(date) \u003c 0 \u0026\u0026 endDate.compareTo(date) \u003e 0 \u0026\u0026 taskType.equals(\"event\")){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean taskType(String taskType){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (taskType.equals(\"events\")){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 130
    }
  },
  {
    "path": "src/main/java/tasklist/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param status check if the task has already marked as done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public Task(String description, boolean status) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        this.isDone \u003d status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return(isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        getStatusIcon();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return(\"[\" + this.getStatusIcon() + \"] \" + description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public String saveFormat(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (this.isDone \u003d\u003d Boolean.parseBoolean(\"true\")){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return(\"| 1 | \" + this.description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return(\"| 0 | \" + this.description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param dateSearch the date that user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean findDate(Date dateSearch, String taskType) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param dateSearch the date that user input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean findFromDateRange(Date dateSearch, String taskType) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param fromDate the start date that user input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param endDate the end date that user input"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @throws ParseException if date format is not dd MMM yyyy"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean findBetweenDateRange(Date fromDate, Date endDate, String taskType) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean taskType(String taskType){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (taskType.equals(\"tasks\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 94
    }
  },
  {
    "path": "src/main/java/tasklist/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param description the task description that the user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param status check if the task has already marked as done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public ToDo(String description, Boolean status) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        super(description, status);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return(\"[T]\" + super.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return(\"T \" + super.saveFormat());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    /****"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     * @param taskType the task type of the object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    public boolean taskType(String taskType){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (taskType.equals(\"todos\")){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Elxyng": 44
    }
  },
  {
    "path": "src/main/test/tasklist/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.aggregator.ArgumentsAccessor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.provider.CsvSource;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Deadline(\"Duke\", \"12 oct 2019\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        assertEquals(\"[D][\" + t.getStatusIcon() + \"] Duke (by: 12 oct 2019)\", t.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testSaveFormat() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Deadline(\"Duke\", \"12 oct 2019\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        assertEquals(\"D | 0 | Duke | 12 oct 2019\", t.saveFormat());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @CsvSource({"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Duke, 12 oct 2019\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Duke, Date not specified\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    })"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testFindDate(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Deadline(arguments.getString(0),arguments.getString(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Date date \u003d dateFormat.parse(\"12 oct 2019\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (((Deadline) t).time.equals(\"Date not specified\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertFalse(t.findDate(date, \"deadline\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertTrue(t.findDate(date, \"deadline\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @CsvSource({"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Duke, 13 oct 2019\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Duke, Date not specified\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    })"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testFindFromDateRange(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Deadline(arguments.getString(0),arguments.getString(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Date date \u003d dateFormat.parse(\"12 oct 2019\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (((Deadline) t).time.equals(\"Date not specified\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertFalse(t.findFromDateRange(date, \"deadline\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertTrue(t.findFromDateRange(date, \"deadline\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @CsvSource({"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Duke, 14 oct 2019\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Duke, Date not specified\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    })"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testFindBetweenDateRange(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Deadline(arguments.getString(0), arguments.getString(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Date fromDate \u003d dateFormat.parse(\"11 oct 2019\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Date endDate \u003d dateFormat.parse(\"15 oct 2019\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (((Deadline) t).time.equals(\"Date not specified\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertFalse(t.findBetweenDateRange(fromDate, endDate, \"deadline\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertTrue(t.findBetweenDateRange(fromDate, endDate, \"deadline\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        @ParameterizedTest"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        @CsvSource({"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                \"tasks\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                \"todos\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                \"deadlines\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                \"events\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        void testTaskType(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            Task t \u003d new Deadline(\"Duke\", \"12 oct 2019\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            if (arguments.getString(0).equals(\"deadlines\")){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                assertTrue(t.taskType(arguments.getString(0)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "                assertFalse(t.taskType(arguments.getString(0)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 103
    }
  },
  {
    "path": "src/main/test/tasklist/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.aggregator.ArgumentsAccessor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.provider.CsvSource;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Event(\"Makeup Class\", \"12 oct 2019\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        assertEquals(\"[E][\" + t.getStatusIcon() + \"] Makeup Class (at: 12 oct 2019)\", t.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void saveFormat() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Event(\"Makeup Class\", \"12 oct 2019\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        assertEquals(\"E | 0 | Makeup Class | 12 oct 2019\", t.saveFormat());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @CsvSource({"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Class gathering, 12 oct 2019\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Class gathering, Date not specified\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    })"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testFindDate(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Event(arguments.getString(0), arguments.getString(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Date date \u003d dateFormat.parse(\"12 oct 2019\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (((Event) t).time.equals(\"Date not specified\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertFalse(t.findDate(date, \"event\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertTrue(t.findDate(date, \"event\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @CsvSource({"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Class gathering, 13 oct 2019\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Class gathering, Date not specified\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    })"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testFindFromDateRange(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Event(arguments.getString(0), arguments.getString(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Date date \u003d dateFormat.parse(\"12 oct 2019\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (((Event) t).time.equals(\"Date not specified\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertFalse(t.findFromDateRange(date, \"event\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertTrue(t.findFromDateRange(date, \"event\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @CsvSource({"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Class gathering, 14 oct 2019\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"Class gathering, Date not specified\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    })"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testFindBetweenDateRange(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Event(arguments.getString(0), arguments.getString(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Date fromDate \u003d dateFormat.parse(\"11 oct 2019\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Date endDate \u003d dateFormat.parse(\"15 oct 2019\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (((Event) t).time.equals(\"Date not specified\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertFalse(t.findBetweenDateRange(fromDate, endDate, \"event\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertTrue(t.findBetweenDateRange(fromDate, endDate, \"event\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @CsvSource({"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"tasks\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"todos\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"deadlines\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"events\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    })"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testTaskType(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Event(\"Class gathering\", \"12 oct 2019\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (arguments.getString(0).equals(\"events\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertTrue(t.taskType(arguments.getString(0)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertFalse(t.taskType(arguments.getString(0)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 98
    }
  },
  {
    "path": "src/main/test/tasklist/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.aggregator.ArgumentsAccessor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.provider.CsvSource;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Task(\"Duke\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        assertEquals(\"[\"+ t.getStatusIcon() + \"] Duke\", t.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void saveFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Task(\"Duke\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        assertEquals(\"| 0 | Duke\", t.saveFormat());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @CsvSource({"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"tasks\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"todos\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"deadlines\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"events\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    })"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testTaskType(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new Task(\"Bills\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (arguments.getString(0).equals(\"tasks\")){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertTrue(t.taskType(arguments.getString(0)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertFalse(t.taskType(arguments.getString(0)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 45
    }
  },
  {
    "path": "src/main/test/tasklist/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.aggregator.ArgumentsAccessor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import org.junit.jupiter.params.provider.CsvSource;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new ToDo(\"Duke\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        assertEquals(\"[T][\" + t.getStatusIcon() + \"] Duke\", t.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void saveFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new ToDo(\"Duke\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        assertEquals(\"T | 0 | Duke\", t.saveFormat());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    @CsvSource({"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"tasks\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"todos\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"deadlines\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            \"events\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    })"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    void testTaskType(ArgumentsAccessor arguments) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        Task t \u003d new ToDo(\"Bills\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        if (arguments.getString(0).equals(\"todos\")){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertTrue(t.taskType(arguments.getString(0)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "            assertFalse(t.taskType(arguments.getString(0)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elxyng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elxyng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elxyng": 42
    }
  }
]
