[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "\tid \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "\tid \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "\t"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "checkstyle{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 29,
      "-": 19
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": "T|1|retrun book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "T|1|qt"
      }
    ],
    "authorContributionMap": {
      "e0373972": 3
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "e0373972": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.nio.file.NoSuchFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.ViewSchedulesCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Constructs Duke application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param filePath the file path of the save file for tasks storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        TaskList tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            if (!(e instanceof NoSuchFileException)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                ui.showLoadingError(\"    Cannot load tasks. May overwrite old tasks, if continue\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser.capture(\"todo\", ToDo.getCommand(tasks, storage));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser.capture(\"event\", Event.getCommand(tasks, storage));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser.capture(\"deadline\", Deadline.getCommand(tasks, storage));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser.capture(\"list\", new ListCommand(tasks));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser.capture(\"done\", new DoneCommand(tasks,storage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser.capture(\"delete\", new DeleteCommand(tasks, storage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser.capture(\"bye\", new ByeCommand());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser.capture(\"find\", new FindCommand(tasks));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        parser.capture(\"view\", new ViewSchedulesCommand(tasks));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    static void CheckWord(String keyword)throws DukeCheckLineException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        if (!keyword.equals(\"list\") \u0026\u0026 !keyword.equals(\"bye\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                \u0026\u0026 !keyword.equals(\"todo\") \u0026\u0026 !keyword.equals(\"done\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                \u0026\u0026 !keyword.equals(\"event\") \u0026\u0026 !keyword.equals(\"deadline\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                \u0026\u0026 !keyword.equals(\"delete\") \u0026\u0026 !keyword.equals(\"find\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                \u0026\u0026 !keyword.equals(\"view\")){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            throw new DukeCheckLineException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Run Duke application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        while (!isExit \u0026\u0026 ui.hasNextLine()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            String[] fullCommand \u003d ui.readCommand().split(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                CheckWord(fullCommand[0]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                Command c \u003d parser.parse(fullCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                ui.printCommand(c.run(fullCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            } catch(DukeException | IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            } catch (DukeCheckLineException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                ui.showError(\"    ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            } finally{"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 100
    }
  },
  {
    "path": "src/main/java/duke/DukeCheckLineEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class DukeCheckLineEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 4
    }
  },
  {
    "path": "src/main/java/duke/DukeCheckLineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class DukeCheckLineException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 4
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 5
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    static void CheckWord(String keyword)throws DukeCheckLineException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        if (keyword \u003d\u003d null) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            throw new DukeCheckLineException();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private Map\u003cString, Command\u003e commands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Capture a command to be returned later."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param name the key word that trigger the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param command for mapping the name and to be returned later."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void capture(String name, Command command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        commands.put(name, command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * To check and return an appropriate command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param fullCommand the input from user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return command to use for the next processing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Command parse(String[] fullCommand) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        Command command \u003d commands.get(fullCommand[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            CheckWord(fullCommand[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        } catch (DukeCheckLineException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            return (Command) List.of(\"    ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 42
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Storage(String fileLocation) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        path \u003d Paths.get(fileLocation);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Save the provided list of lines to a file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param lines list of lines to save."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @throws IOException if the task cannot be recorded."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void store(List\u003cString\u003elines) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        Files.write(path, lines);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Read the file and return the list of lines."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return list of lines loaded."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @throws IOException if the lines cannot be loaded."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    List\u003cString\u003e load() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return Files.readAllLines(path);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 35
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        System.out.println(\"    Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m duke.Duke\" + System.lineSeparator() + \"    What can I do for you?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return whether there is another line of input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return whether there is another line of input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    boolean hasNextLine() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return in.hasNextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Read a line from the user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return next line of input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    String readCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void showLoadingError(String message) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Show an error message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param message error message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Show output of a list messages."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param messages the list of messages."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public static void printCommand(List\u003cString\u003e messages) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        for (String message : messages){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            System.out.println(message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        System.out.println(\"    ________________________\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 68
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Returns the message to user when he/she leave."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param line array of string input from user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return message to show the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e run(String[] line) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return List.of(\"    Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return true to exit the program"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return true when execute this command to exit the program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 27
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Returns the message to user after the command is run."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param fullCommand array of command from the user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return message to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    List\u003cString\u003e run(String[] fullCommand) throws DukeException, IOException, ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return false when execute this command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return false by default, the program should not exit when run this command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    default boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public DeleteCommand(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Remove a task according to the index input by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param fullCommand array of command from the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return message to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @throws NumberFormatException catch a error if the user input is not a number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @throws IndexOutOfBoundsException catch a error if the input index is out of bound."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @throws IOException if the task cannot be recorded."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e run(String[] fullCommand) throws NumberFormatException, IndexOutOfBoundsException, IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        String indexNumber \u003d fullCommand[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            if (indexNumber.contains(\",\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                String[] indexList \u003d indexNumber.split(\",\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                int j \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                for (int i \u003d 0; i \u003c indexList.length; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    int k \u003d Integer.parseInt(indexList[i]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    assert k \u003e\u003d 1:\"The task number must be greater or equal to 1.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    tasks.remove(k - j);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    j++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            } else if (indexNumber.contains(\"-\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                String[] indexList \u003d indexNumber.split(\"-\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                int firstIndex \u003d Integer.parseInt(indexList[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                int lastIndex \u003d Integer.parseInt(indexList[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                if (firstIndex \u003e lastIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    int j \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    for (int i \u003d lastIndex; i \u003c\u003d firstIndex; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        tasks.remove(i - j);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    int j \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    for (int i \u003d firstIndex; i \u003c\u003d lastIndex; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        tasks.remove(i - j);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                int k \u003d Integer.parseInt(fullCommand[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                assert k \u003e\u003d 1:\"The task number must be greater or equal to 1.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                tasks.remove(Integer.parseInt(fullCommand[1]) - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            return List.of(\"    Noted. I\u0027ve removed the task item: \" + System.lineSeparator() + \"    \" + fullCommand[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            return List.of(\"    ☹ OOPS!!! This is not a number: \" + fullCommand[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            return List.of(\"    ☹ OOPS!!! The index out of bound: \" + fullCommand[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 72
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public DoneCommand(TaskList tasks, Storage storage){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *Marks the task as done and returns the message to user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param fullCommand array of command from the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a message to user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @throws NumberFormatException catch a error if the user input is not a number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @throws IndexOutOfBoundsException catch a error if the input index is out of bound."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @throws IOException if the task cannot be recorded."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e run(String[] fullCommand) throws NumberFormatException, IndexOutOfBoundsException, IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        String indexNumber \u003d fullCommand[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            if (indexNumber.contains(\",\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                String[] indexList \u003d indexNumber.split(\",\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                for (int i \u003d 0; i \u003c indexList.length; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    int k \u003d Integer.parseInt(indexList[i]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    assert k \u003e\u003d 1:\"The task number must be greater or equal to 1.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    Task markItem \u003d tasks.get(k - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    markItem.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            } else if (indexNumber.contains(\"-\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                String[] indexList \u003d indexNumber.split(\"-\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                int firstIndex \u003d Integer.parseInt(indexList[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                int lastIndex \u003d Integer.parseInt(indexList[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                if (firstIndex \u003e lastIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    for (int i \u003d lastIndex; i \u003c\u003d firstIndex; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        Task markItem \u003d tasks.get(i - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        markItem.markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    for (int i \u003d firstIndex; i \u003c\u003d lastIndex; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        Task markItem \u003d tasks.get(i - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        markItem.markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                int k \u003d Integer.parseInt(fullCommand[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                assert k \u003e\u003d 1:\"The task number must be greater or equal to 1.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                Task markItem \u003d tasks.get(Integer.parseInt(fullCommand[1]) - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                markItem.markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            return List.of(\"    Nice! I\u0027ve marked this task as done: \" + System.lineSeparator() + \"    \" + fullCommand[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            return List.of(\"    ☹ OOPS!!! This is not a number: \" + fullCommand[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            return List.of(\"    ☹ OOPS!!! The index out of bound: \" + fullCommand[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 71
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public FindCommand(TaskList tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return a message with the matching task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param fullCommand array of command from the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a matching task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e run(String[] fullCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        String keyWord \u003d String.join(\" \", Arrays.copyOfRange(fullCommand, 1, fullCommand.length));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        messages.add(\"    Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            if(tasks.get(i).toString().contains(keyWord)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                messages.add(\"    \" + count + \".\" + tasks.get(i));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return messages;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public ListCommand(TaskList tasks) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return a message with the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param fullCommand array of command from the user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return message to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e run(String[] fullCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        messages.add(\"    Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            messages.add(\"    \" + (i + 1) + \".\" + tasks.get(i));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ViewSchedulesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class ViewSchedulesCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public ViewSchedulesCommand(TaskList tasks) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * To view a schedule according to the input date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param fullCommand array of command from the user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a list of tasks to match the searching schedule."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e run(String[] fullCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        String strDate \u003d String.join(\" \", Arrays.copyOfRange(fullCommand, 1, fullCommand.length));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        List\u003cString\u003e schedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        schedule.add(\"    Here are the task list in your searching schedule: \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            if (tasks.get(i).toString().contains(strDate)){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                schedule.add(\"    \" + count + \".\" + tasks.get(i));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.DukeCheckLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class Deadline extends Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Deadline(String description, String time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        super(description, time);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    static void CheckDescription(int index)throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    static void CheckTime(int index)throws DukeCheckLineException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            throw new DukeCheckLineException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * To generate a Deadline detail and store in the tasks list according to user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param tasks the list of tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param storage to save the deadline detail of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a command which generates deadlines task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public static Command getCommand(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return fullCommand -\u003e{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            List\u003cString\u003e commandList \u003d List.of(fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            int position \u003d commandList.indexOf(\"/by\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                CheckDescription(position);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                CheckTime(position);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                String description \u003d String.join(\" \", commandList.subList(1, position));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                String time \u003d String.join(\" \", commandList.subList(position + 1, fullCommand.length));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                Task deadlineTask \u003d new Deadline(description, time);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                tasks.add(deadlineTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                return List.of(\"    Got it. I\u0027ve added this task: \" + System.lineSeparator() + \"    \" + deadlineTask +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        System.lineSeparator() +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        \"    Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                return List.of(\"    ☹ OOPS!!! The description of a \" + \"Deadline\" + \" cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }catch (DukeCheckLineException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                return List.of(\"    ☹ OOPS!!! A deadline must have a time. \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return a list of strings that can be saved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a task list for saving."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e getList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        list.add(\"D\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        list.addAll(super.getList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        list.add(convertSaveTimeString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return a list of strings to user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return this string task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + convertTimeString() + \")\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 79
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.DukeCheckLineException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class Event extends Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        super(description, time);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    static void CheckDescription(int index)throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    static void CheckTime(int index)throws DukeCheckLineException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            throw new DukeCheckLineException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * To generate a Event detail and store in the tasks list according to user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param tasks the list of tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param storage to save the event detail of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a command which generates events task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public static Command getCommand(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return fullCommand -\u003e{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            List\u003cString\u003e commandList \u003d List.of(fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            int position \u003d commandList.indexOf(\"/at\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                CheckDescription(position);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                CheckTime(position);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                String description \u003d String.join(\" \", commandList.subList(1, position));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                String time \u003d String.join(\" \", commandList.subList(position + 1, fullCommand.length));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                Task eventTask \u003d new Event(description, time);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                tasks.add(eventTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                return List.of(\"    Got it. I\u0027ve added this task: \" + System.lineSeparator() + \"    \" + eventTask +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        System.lineSeparator() +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        \"    Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                return List.of(\"    ☹ OOPS!!! The description of a \" + \"Event\" + \" cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }catch (DukeCheckLineException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                return List.of(\"    ☹ OOPS!!! An event must have a time. \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return a list of strings that can be saved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a task list for saving."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e getList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        list.add(\"E\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        list.addAll(super.getList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        list.add(convertSaveTimeString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return a list of strings to user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return this string task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + convertTimeString() + \")\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 80
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Display the status icon of this task (tick or x symbols) to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return status icon."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *Return a list of strings that can be saved."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a task list for saving."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e getList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return List.of(isDone ? \"1\" : \"0\", description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *Return a list of strings to user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return this string task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 48
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Constructs a new empty task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Parse the given string to a task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param line to parse."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return parsed task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private Task parseTask(String line) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        String[] load \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        switch (load[0]) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            task \u003d new ToDo(load[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            task \u003d new Deadline(load[2], load[3]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            task \u003d new Event(load[2], load[3]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        if (load[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Constructs a task list with the parsed tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param lines to parse tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public TaskList(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        for(String line : lines) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            tasks.add(parseTask(line));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Converts the task list into a list of lines for saving."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a list of converted tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e ConvertAsLines() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        List\u003cString\u003e saveIn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            saveIn.add(getSaveIn(task));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return saveIn;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Converts the provided task to a string for saving."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param task to convert into a string."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return string for saving."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private String getSaveIn(Task task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        StringJoiner joiner \u003d new StringJoiner(\"|\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        for (String strLine : task.getList()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            joiner.add(strLine);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return joiner.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param task to add."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *Remove a task from the task list according to index provided by the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param index position of the task in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return the removed task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return the task of given index in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param index position of the task in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return the requested task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return of the size of the task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return the size of the task list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 120
    }
  },
  {
    "path": "src/main/java/duke/task/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "class Time extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    Time(String description, String timeString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        time \u003d LocalDateTime.parse(timeString, formatter);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * To convert the time for saving."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return time as a string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    String convertSaveTimeString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return formatter.format(time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Attache a converted time string to display to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return time as a string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    String convertTimeString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\").format(time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 32
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    ToDo (String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    static void CheckDescription(String[] command)throws DukeException{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * To generate a Todo detail and store in the tasks list according to user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param tasks the list of tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @param storage to save the todo detail of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a command which generates todo task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public static Command getCommand(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return fullCommand -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                CheckDescription(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                String[] keyword \u003d Arrays.copyOfRange(fullCommand, 1, fullCommand.length);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                Task todoTask \u003d new ToDo(String.join(\" \", keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                tasks.add(todoTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                storage.store(tasks.ConvertAsLines());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                return List.of(\"    Got it. I\u0027ve added this task: \" + System.lineSeparator() + \"    \" + todoTask +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        System.lineSeparator() +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                        \"    Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "                return List.of(\"    ☹ OOPS!!! The description of a \" + \"todo\" + \" cannot be empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return a list of strings that can be saved."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return a task list for saving."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e getList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        list.add(\"T\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        list.addAll(super.getList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * Return a list of strings to user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     * @return this string task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0373972"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 68
    }
  },
  {
    "path": "src/test/java/duke/StorageTemp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class StorageTemp extends Storage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e stored;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public StorageTemp() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        super(\"StorageTemp.txt\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void store(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        stored \u003d lines;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 15
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.StorageTemp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import duke.task.TaskListTemp;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private static final TaskListTemp taskListTemp \u003d new TaskListTemp();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    private static final StorageTemp storageTemp \u003d new StorageTemp();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    void run() throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        List\u003cString\u003e expected \u003d List.of(\"    Nice! I\u0027ve marked this task as done: \" + System.lineSeparator() + \"    \" + \"3\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        List\u003cString\u003e actual \u003d new DoneCommand(taskListTemp, storageTemp).run(new String[] {\"done\", \"3\"});"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 20
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTemp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "public class TaskListTemp extends TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Task doTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        doTask \u003d task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Task remove(int indexNo) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return doTask \u003d new Task(\"remove \" + indexNo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public Task get(int indexNo) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return doTask \u003d new Task (\"get \" + indexNo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    public List\u003cString\u003e ConvertAsLines() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        return List.of(doTask.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 33
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    Task task \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    void getStatusIconIncomplete() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        assertEquals(\"✘\", task.getStatusIcon());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    void getStatusIconComplete() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        assertEquals(\"✓\", task.getStatusIcon());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    void getListIncomplete() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        assertEquals(List.of(\"0\", \"read book\") , task.getList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    void getListComplete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        assertEquals(List.of(\"1\", \"read book\") , task.getList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    void testToStringComplete() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        assertEquals(\"[\" + \"✘\" + \"]\" + \"read book\", task.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    void testToStringIncomplete() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0373972"
        },
        "content": "        assertEquals(\"[\" + \"✓\" + \"]\" + \"read book\", task.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0373972"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0373972": 42
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "add somethings"
      }
    ],
    "authorContributionMap": {
      "e0373972": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0373972"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0373972"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0373972"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0373972"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0373972"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0373972"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0373972"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0373972"
        },
        "content": "IF ERRORLEVEL 3 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0373972"
        },
        "content": "    exit /b 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0373972"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0373972"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0373972"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0373972"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0373972"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0373972"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0373972"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "e0373972": 21
    }
  }
]
