[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "version \u00270.1.7\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Launcher\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\ttestImplementation(\"org.junit.jupiter:junit-jupiter-api:5.5.2\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-engine:5.5.2\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.duke.Launcher\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    from {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "test {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\t\tevents \"passed\", \"skipped\", \"failed\", \"standardOut\", \"standardError\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 30,
      "-": 19
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private DialogBox(String text, Image img){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private void flip(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the dialog box for the user with the image of the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the dialog box for the duke with the image of the duke."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        var diaglogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        diaglogBox.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return diaglogBox;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the welcome message of Duke."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param img           The directory image of Duke."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return DialogBox    The welcome message of Duke with the image of Duke."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static DialogBox showWelcomeMessage(Image img){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        var diaglogBox \u003d new DialogBox(\"Hello! I\u0027m Duke\\nWhat can I do for you?\", img);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        diaglogBox.flip();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return diaglogBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 78
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new Duke and initialised with UI, TaskList and Storge."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public Duke(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            storage \u003d new Storage(\"data/taskList.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Runs the Duke program and process the input from the user with corresponding output."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void run(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        while (!isExit){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                String input \u003d ui.readUserInput();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                Command command \u003d Parser.parseInput(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                isExit \u003d command.isExit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            } catch (Exception e){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Obtains the response of Duke with reference to the input and returns the output as text to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param input     The input given by the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The output response from Duke."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String getResponse(String input){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            Command command \u003d Parser.parseInput(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            return ui.showOutputToUser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (Exception e){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * The main method to run Duke."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param args  The argument values provided by the user to run Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 69
    }
  },
  {
    "path": "src/main/java/seedu/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class Main extends Application{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void start(Stage stage){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            AnchorPane anchorPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class MainWindow extends AnchorPane{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void initialize(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void setDuke(Duke duke){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.showWelcomeMessage(dukeImage));   "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private void handleUserInput(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            Thread exitThread \u003d new Thread(){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                public void run(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                        Thread.sleep(1500);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                        e.getMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            exitThread.start();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeEmptyException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class AddDeadlineCommand extends Command{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static final String INPUT_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_ADD_DEADLINE_SUCCESS \u003d \"Got it. I\u0027ve added this task:\\n\\t  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_EMPTY_DATE \u003d \"The date of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new AddDeadlineCommand and initialise the specified isExit boolean value and input by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public AddDeadlineCommand(boolean isExit, String input){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Creates a new Deadline task and checks whether if the date or description is empty before creating."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList            The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui                  The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage             The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws  DukeEmptyException  If the user inputs an empty description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws  IOException         If an input or output exception occurs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeEmptyException, DukeException, IOException{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if((input.substring(8).trim()).isEmpty() || input.split(\" \")[1].trim().equals(\"by\")){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeEmptyException(\"deadline\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(!input.contains(\"by\")){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(MESSAGE_EMPTY_DATE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        for(String word : input.split(\" \")){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            ++index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if(word.equals(\"by\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                if(String.join(\" \", Arrays.copyOfRange(input.split(\" \"), index, input.split(\" \").length)).trim().isEmpty()){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    throw new DukeException(MESSAGE_EMPTY_DATE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    String description \u003d String.join(\" \", Arrays.copyOfRange(input.split(\" \"), 1, index-1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    String date \u003d String.join(\" \", Arrays.copyOfRange(input.split(\" \"), index, input.split(\" \").length));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    deadline \u003d new Deadline(description, stringToDate(date));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    taskList.addToTaskList(deadline);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    assert taskList.getSize() \u003e 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    ui.setOutput(MESSAGE_ADD_DEADLINE_SUCCESS + deadline.toString() + \"\\n\\t Now you have \" + taskList.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    storage.saveToFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the date \u0026 time inputted by the user to a LocalDateTime format of (d/MM/yyyy HHmm)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   date            The date inputted by the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return  LocalDateTime   The converted date \u0026 time in a LocalDateTime format from the String date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws  DukeException   If the input by the user is not of the format (dd/mm/yyyy HHmm) or the input has an invalid date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private LocalDateTime stringToDate(String date) throws DukeException{"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            return LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The format of the date and time must be in this format: dd/mm/yyyy hhss (13/08/2019 0000)\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 83
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeEmptyException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class AddEventCommand extends Command{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static final String INPUT_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_ADD_EVENT_SUCCESS \u003d \"Got it. I\u0027ve added this task:\\n\\t  \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_EMPTY_DATE \u003d \"The date of a event cannot be empty.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new AddEventCommand and initialise with the specified isExit boolean value and input by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public AddEventCommand(boolean isExit, String input){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Creates a new Event task and checks whether if the date or description is empty before creating."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList            The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui                  The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage             The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws  DukeEmptyException  If the user inputs an empty description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws  IOException         If an input or output exception occurs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeEmptyException, DukeException, IOException{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if((input.substring(5).trim()).isEmpty() || input.split(\" \")[1].trim().equals(\"at\")){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeEmptyException(\"event\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(!input.contains(\"at\")){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(MESSAGE_EMPTY_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        for(String word : input.split(\" \")){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            ++index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if(word.equals(\"at\")){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                if(String.join(\" \", Arrays.copyOfRange(input.split(\" \"), index, input.split(\" \").length)).trim().isEmpty()){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    throw new DukeEmptyException(MESSAGE_EMPTY_DATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    String description \u003d String.join(\" \", Arrays.copyOfRange(input.split(\" \"), 1, index-1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    String date \u003d String.join(\" \", Arrays.copyOfRange(input.split(\" \"), index, input.split(\" \").length));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    event \u003d new Event (description, stringToDate(date));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    taskList.addToTaskList(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    assert taskList.getSize() \u003e 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    ui.setOutput(MESSAGE_ADD_EVENT_SUCCESS + event.toString() + \"\\n\\t Now you have \" + taskList.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    storage.saveToFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the date \u0026 time inputted by the user to a LocalDateTime format of (d/MM/yyyy HHmm)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   date            The date inputted by the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return  LocalDateTime   The converted date \u0026 time in a LocalDateTime format from the String date."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws  DukeException   If the input by the user is not of the format (dd/mm/yyyy HHmm) or the input has an invalid date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private LocalDateTime stringToDate(String date) throws DukeException{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            return LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The format of the date and time must be in this format: dd/mm/yyyy hhss\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeEmptyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class AddToDoCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static final String INPUT_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_ADD_TODO_SUCCESS \u003d \"Got it. I\u0027ve added this task:\\n\\t  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private ToDo todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new AddToDoCommand and initialise with the specified isExit boolean value and input by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public AddToDoCommand(boolean isExit, String input){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Creates a new ToDo task and checks whether if the description is empty before creating."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList            The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui                  The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage             The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws  DukeEmptyException  If the user inputs an empty description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws  IOException         If an input or output exception occurs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeEmptyException, IOException, DukeException{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if((input.substring(4).trim()).isEmpty()){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeEmptyException(\"todo\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        todo \u003d new ToDo(input.substring(5));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        taskList.addToTaskList(todo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assert taskList.getSize() \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        ui.setOutput(MESSAGE_ADD_TODO_SUCCESS + todo.toString() + \"\\n\\t Now you have \" + taskList.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        storage.saveToFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class ByeCommand extends Command{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static final String INPUT_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_BYE_ACKNOWLEDGEMENT \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new ByeCommand and initialise with the specified isExit boolean value and input by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public ByeCommand(boolean isExit, String input){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Prints a goodbye message using User Interface (UI)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList            The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui                  The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage             The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        ui.showGoodbyeMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeEmptyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public boolean isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new Command with the specified isExit and input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public Command(boolean isExit, String input){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Executes the command inputted by the user and returns the result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList            The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui                  The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage             The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException, DukeEmptyException, IOException{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        throw new UnsupportedOperationException(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeEmptyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static final String INPUT_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this task:\\n\\t  \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new DeleteCommand and initialise with the specified isExit boolean value and input by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public DeleteCommand(boolean isExit, String input){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Deletes a task from the task list and checks whether if the input or list is empty before deleting the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList            The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui                  The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage             The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeEmptyException, DukeException, IOException{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(input.substring(6).trim().isEmpty()){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The selector of a delete cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(taskList.getSize() \u003d\u003d 0){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The tasks list cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        index \u003d prepareIndex(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        ui.setOutput(MESSAGE_DELETE_SUCCESS + taskList.getTask(index).toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        taskList.deleteFromTaskList(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        storage.saveToFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The task selected must be a numerical value.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"Please select a number that is within the task list.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the given String into an Integer."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   The input of the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return  int     The number selected by the user in Integer format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private int prepareIndex(String input){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return Integer.parseInt(input.split(\" \")[1])-1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 59
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static final String INPUT_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_DELETE_SUCCESS \u003d \"Nice! I\u0027ve marked this task as done:\\n\\t  \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new DoneCommand and initialise with the specified isExit boolean value and input by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public DoneCommand(boolean isExit, String input){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Marks a task as done from the task list and checks whether if the input or list is empty before deleting the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList            The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui                  The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage             The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException, IOException{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(input.split(\" \")[1].trim().isEmpty()){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The selector of a done cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(taskList.getSize() \u003d\u003d 0){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The tasks list cannot be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        index \u003d prepareIndex(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        (taskList.getTask(index)).setDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        ui.setOutput(MESSAGE_DELETE_SUCCESS + taskList.getTask(index).toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        storage.saveToFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The task selected must be a numerical value.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"Please select a number that is within the task list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the given String into an Integer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   The input of the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return  int     The number selected by the user in Integer format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private int prepareIndex(String input){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return Integer.parseInt(input.split(\" \")[1])-1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 58
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static final String INPUT_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_FIND_FAILURE \u003d \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"%1$d. %2$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static String output;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new FindCommand and initialise with the specified isExit boolean value and input by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public FindCommand(boolean isExit, String input){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Searches for the keyword inputted by the user and returns the search results."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList        The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui              The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage         The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(input.substring(4).trim().isEmpty()){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The keyword of a find cannot be empty.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(taskList.getSize() \u003d\u003d 0){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The tasks list cannot be empty.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        boolean isMatch \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        List\u003cString\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        output \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        for(int i\u003d0;i\u003ctaskList.getSize();i++){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if(task.getDescription().contains(input)){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                matchedTasks.add(task.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                isMatch \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(isMatch){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            ui.setOutput(showToUserAsIndexedList(matchedTasks));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            ui.setOutput(MESSAGE_FIND_FAILURE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Formats the list of tasks and return them in a formatted indexed list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param listItems A list of tasks from the task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   A formatted String in indexed format containing the tasks from the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static String showToUserAsIndexedList(List\u003cString\u003e listItems){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        output +\u003d \" Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            output +\u003d \" \\n\\t\" + getIndexedListItem(displayIndex, listItem);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the items in an indexed format with the relevant task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param visibleIndex  The index of the item in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param listItem      The task to be indexed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String       A formatted indexed tasks in String format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 87
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static final String INPUT_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"%1$d. %2$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static String output;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     /** "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new ListCommand and initaliase with the specified isExit boolean value and input by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public ListCommand(boolean isExit, String input){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Searches for the keyword inputted by the user and returns the search results."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList        The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui              The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage         The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws DukeException    If the task list is empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(taskList.getSize() \u003d\u003d 0){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The task list is currently empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        ui.setOutput(showTaskListView(taskList));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the given TaskList to a List\u003cString\u003e format and formats the list to an indexed list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param taskList  The task list created by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The indexed list of the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private String showTaskListView(TaskList taskList){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        output \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        List\u003cString\u003e formattedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        for (int i\u003d0;i\u003ctaskList.getSize();i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            formattedTask.add(taskList.getTask(i).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return getIndexedListForViewing(formattedTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Formats the list of tasks and return them in a formatted indexed list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param listItems A list of tasks from the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   A formatted String in indexed format containing the tasks from the task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static String getIndexedListForViewing(List\u003cString\u003e listItems){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        output +\u003d \" Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            output +\u003d \" \\n\\t\" + getIndexedListItem(displayIndex, listItem);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the items in an indexed format with the relevant task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param visibleIndex  The index of the item in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param listItem      The task to be indexed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String       A formatted indexed tasks in String format."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 79
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class ScheduleCommand extends Command{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static final String INPUT_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_SCHEDULE_FAILURE \u003d \"There are no matching dates in your list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"%1$d. %2$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static String output;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new ScheduleCommand and initialise with the specified isExit boolean value and input by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   isExit  A boolean value whether if the exit condition is true."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   input   A String inputted by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public ScheduleCommand(boolean isExit, String input){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Searches for the date inputted by the user and returns the search results in a listed format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   taskList        The array of tasks stored in an ArrayList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   ui              The User Interface (UI) to allow interaction with the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   storage         The storage to allow storing and reading of tasks from a file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(input.substring(8).trim().isEmpty()){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The keyword of a find cannot be empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(taskList.getSize() \u003d\u003d 0){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The tasks list cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        input \u003d input.substring(9);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        date \u003d stringToDate(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        boolean isMatch \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        List\u003cString\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        output \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        for(int i\u003d0;i\u003ctaskList.getSize();i++){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if(task.getDateTime().toLocalDate().equals(date)){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                matchedTasks.add(task.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                isMatch \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        if(isMatch){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            Collections.sort(matchedTasks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            ui.setOutput(showToUserAsIndexedList(matchedTasks));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            ui.setOutput(MESSAGE_SCHEDULE_FAILURE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Formats the list of tasks and return them in a formatted indexed list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param listItems A list of tasks from the task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   A formatted String in indexed format containing the tasks from the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static String showToUserAsIndexedList(List\u003cString\u003e listItems){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        output +\u003d \" Here are the matching tasks schedule in your list:\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            output +\u003d \" \\n\\t\" + getIndexedListItem(displayIndex, listItem);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the items in an indexed format with the relevant task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param visibleIndex  The index of the item in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param listItem      The task to be indexed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String       A formatted indexed tasks in String format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the date \u0026 time inputted by the user to a LocalDateTime format of (d/MM/yyyy HHmm)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param   date            The date inputted by the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return  LocalDateTime   The converted date \u0026 time in a LocalDateTime format from the String date."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws  DukeException   If the input by the user is not of the format (dd/mm/yyyy HHmm) or the input has an invalid date."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private LocalDate stringToDate(String date) throws DukeException{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            return LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The format of the date and time must be in this format: dd/mm/yyyy (13/08/2019)\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 110
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public LocalDateTime by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new Deadline with the description and date specified."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param by"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public Deadline(String description, LocalDateTime by){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the Deadline in a String format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The deadline in a String format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateToString(by) + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the date and time of the deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return LocalDateTime    The date and time of the deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public LocalDateTime getDateTime(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the LocalDateTime object of a Deadline to a String object with the format (d/MM/yyyy HHmm);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param dateTime  The date and time of the deadline in a specified date and time format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The date and time for the deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private String dateToString(LocalDateTime dateTime){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return dateTime.format(formatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public LocalDateTime at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new event with the description and date specified."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param at"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public Event(String description, LocalDateTime at){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the Event in a String format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The event in a string format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateToString(at) + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the date and time of the deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return LocalDateTime    The date and time of the deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public LocalDateTime getDateTime(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the LocalDateTime object of a Event to a String object with the format (d/MM/yyyy HHmm);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param dateTime  The date and time of the event in a specified date and time format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The date and time for the event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private String dateToString(LocalDateTime dateTime){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return dateTime.format(formatter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new Task with the specified description and marking the done progress as not completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param description   The description from the input by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public Task(String description){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the done status in a symbol format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The done status in a symbol format with a tick symbol as done or a cross symbol as not done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String getStatusIcon(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return (this.isDone ? \"[\\u2713] \" : \"[\\u2718] \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the task in String format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The task in a string format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return getStatusIcon() + this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public boolean getStatus(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public LocalDateTime getDateTime(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void setDone(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class TaskList{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new task list and initialise with an empty ArrayList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new task list and initialise with the specified task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param tasks Task list specified by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.taskList \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param task  The task that is required to be added to the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void addToTaskList(Task task){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Deletes a task from the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param task  The task that is required to be removed from the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return Task The task that was removed from the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public Task deleteFromTaskList(int task){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return this.taskList.remove(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the size of the current task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return int  The size of the current task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static int getSize(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the task from the specified index from the task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param task  The index the task is located at."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return Task The task at the specified index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static Task getTask(int task){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return taskList.get(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "   "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns all the task in an ArrayList format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return ArrayList\u003cTask\u003e  The list of tasks in an ArrayList format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 64
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new todo with the description specified."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param description   The description provided by the user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public ToDo(String description){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the ToDo in a String format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The ToDo in a String format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DukeEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " * Signals an DukeEmptyException when the description of the task is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class DukeEmptyException extends Exception{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs an DukeEmptyException with the specified task name with the empty description message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param taskName  The task name which has a empty description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public DukeEmptyException(String taskName){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(\"The description of a \" + taskName + \" cannot be empty.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs an DukeEmptyException with the specified detailed message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param message  The detail message which was thrown by the error."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.AddToDoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.command.ScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Parse the input of the user and runs the corresponding command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class Parser{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Parse the input of the user and returns a command based on the input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param userInput         The input given by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return Command          The command with reference to the given input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws DukeException    When an invalid command is given."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public static Command parseInput(String userInput) throws DukeException{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        switch(userInput.split(\" \")[0]){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            case AddDeadlineCommand.INPUT_WORD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                return new AddDeadlineCommand(false, userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            case AddEventCommand.INPUT_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                return new AddEventCommand(false, userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            case AddToDoCommand.INPUT_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                return new AddToDoCommand(false, userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            case ListCommand.INPUT_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                return new ListCommand(false, \"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            case DeleteCommand.INPUT_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                return new DeleteCommand(false, userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            case DoneCommand.INPUT_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                return new DoneCommand(false, userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            case ByeCommand.INPUT_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                return new ByeCommand(true, \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            case FindCommand.INPUT_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                return new FindCommand(false, userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            case ScheduleCommand.INPUT_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                return new ScheduleCommand(false, userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");   "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import seedu.duke.data.task.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class Storage{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private Scanner fileReader;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new Storge and initialise with the specified file path for read/write controls."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param filePath  The file path of the file for storing the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public Storage(String filePath){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Loads and initialise the task list from the file storage. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return ArrayList\u003cTask\u003e  The task list stored in the file storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws DukeException    If the file is empty or the file directory does not exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if(file.isFile() \u0026\u0026 file.exists() \u0026\u0026 file.canRead()){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                fileReader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                while(fileReader.hasNextLine()){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    String line \u003d fileReader.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    String[] splitLine \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                    switch(splitLine[0]){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            Event newEvent \u003d new Event(splitLine[2], stringToDate(splitLine[3]));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            if(splitLine[1].equals(\"1\")){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                                newEvent.setDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            taskList.add(newEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            Deadline newDeadline \u003d new Deadline(splitLine[2], stringToDate(splitLine[3]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            if(splitLine[1].equals(\"1\")){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                                newDeadline.setDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            taskList.add(newDeadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                        case \"T\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            ToDo newTodo \u003d new ToDo(splitLine[2]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            if(splitLine[1].equals(\"1\")){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                                newTodo.setDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            taskList.add(newTodo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                }       "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            } else{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                throw new DukeException(\"The file is either empty or does not exists. Creating a new task list!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch(FileNotFoundException | DukeException | NullPointerException e){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            createFileAndDirectory();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Creates a new file from the file directory specified by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void createFileAndDirectory(){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if(file.getParentFile().mkdirs()){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if(file.createNewFile()){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch(IOException e){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            new IOException(\"The file \" + file.getAbsolutePath() + \" has encountered an error creating.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": " "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Saves the tasks from the current task list to the file specified by the user.  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws IOException  If the application is unable to write to the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void saveToFile() throws DukeException, IOException{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file.getAbsolutePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        String toAdd \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        createFileAndDirectory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        for (int i \u003d 0; i \u003c TaskList.getSize(); ++i) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            Task task \u003d TaskList.getTask(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            String taskClass \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            int isDone \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            String date \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if (task instanceof ToDo){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                taskClass \u003d \"T\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            } else if (task instanceof Event){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                taskClass \u003d \"E\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                date \u003d dateToString(((Event) task).at);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            } else if (task instanceof Deadline){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                taskClass \u003d \"D\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                date \u003d dateToString(((Deadline) task).by);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if (task.getStatus()){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                isDone \u003d 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                isDone \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            if (date.isEmpty()){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                toAdd +\u003d taskClass + \" | \" + Integer.toString(isDone) + \" | \" + description + \"\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "                toAdd +\u003d taskClass + \" | \" + Integer.toString(isDone) + \" | \" + description + \" | \" + date + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            fileWriter.write(toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch(IOException e){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The file \" + file.getAbsolutePath() + \" has encountered an error writing.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the String to a DateTime format."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param date              The date and time specified by the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return LocalDateTime    The date and time specified by the user in LocalDateTime format."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @throws DukeException    If the date read from the file is in an invalid format."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private LocalDateTime stringToDate(String date) throws DukeException{"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            return LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            throw new DukeException(\"The date \" + date + \" loaded from the file is invalid.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Converts the date and time to String format."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param dateTime  The date and time of the task."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The date and time of the task in String."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String dateToString(LocalDateTime dateTime){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return dateTime.format(formatter);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 159
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class UI{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private String output;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Constructs a new UI and initialise with stdin for the user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public UI(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the goodbye message of Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The goodbye message of Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void showGoodbyeMessage(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.output \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Checks if the input by the user is empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param rawInputLine  The input by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return boolean      If the input by the user is empty returns true, if not return false when the input is not empty."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    private boolean shouldIgnore(String rawInputLine){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return rawInputLine.trim().isEmpty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Setting the value of the output to return to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param output    The String that is intended for output to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void setOutput(String output){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        this.output \u003d output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Obtaining and interpreting the user input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The input specified by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String readUserInput(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        String input \u003d in.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        while(shouldIgnore(input)){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            input \u003d in.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the output that is intended for the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The output intended for the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String showOutputToUser(){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return this.output;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * Returns the formatted error message that Duke has encountered."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @param exception The type of exception Duke has encountered."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     * @return String   The exception message that Duke has encountered thrown by the exception."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public String showError(Exception exception){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        return \"\\u2639 OOPS!!! \" + exception.getMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 69
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 19
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class DeadlineTest{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @DisplayName(\"Inserting Deadline for Test Case 1 by 12/08/2019 0000H\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void TestToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.of(2019, 8, 12, 00, 00);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"To Complete Test Case 1\", dateTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(\"[D][\\u2718] To Complete Test Case 1 (by: 12/08/2019 0000)\", deadline.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        deadline.setDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(\"[D][\\u2713] To Complete Test Case 1 (by: 12/08/2019 0000)\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 20
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class EventTest{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @DisplayName(\"Inserting Event for Final Examiniations at 4/12/2019 1300H\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void TestToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.of(2019, 12, 04, 13, 00);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        Event event \u003d new Event(\"Final Examiniations\", dateTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(\"[E][\\u2718] Final Examiniations (at: 4/12/2019 1300)\", event.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        event.setDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(\"[E][\\u2713] Final Examiniations (at: 4/12/2019 1300)\", event.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 20
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class TaskListTest{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void TestAddToTaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        taskList.addToTaskList(new ToDo(\"Complete Assignment.\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(taskList.getSize(), 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(taskList.getTask(0).toString(), \"[T][\\u2718] Complete Assignment.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        taskList.deleteFromTaskList(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(taskList.getSize(), 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 19
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class TaskTest{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @DisplayName(\"Verifying the task functions.\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void TestToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        Task task \u003d new Task(\"Complete Assignments.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(\"[\\u2718] Complete Assignments.\", task.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(\"[\\u2713] Complete Assignments.\", task.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 17
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "package seedu.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "public class ToDoTest{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    @DisplayName(\"Inserting todo to study for Final Examination\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    public void TestToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Study for Final Examiniations\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(\"[T][\\u2718] Study for Final Examiniations\", todo.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        todo.setDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "        assertEquals(\"[T][\\u2713] Study for Final Examiniations\", todo.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 17
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\tHello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\tWhat can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\tBye. Hope to see you again soon!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\t____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 7
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\tmkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\trm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "if ! javac -cp ../src/ -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\techo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\texit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\techo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\texit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\techo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "\texit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestvoon"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "ernestvoon": 34
    }
  }
]
