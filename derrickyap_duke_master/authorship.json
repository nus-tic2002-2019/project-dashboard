[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static Ui userInterface;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The Duke constructor creates the main program known as Duke, and preload the tasks saved in a file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param filePath is the full path where the file is located."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @throws DukeException if file cannot be created."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Duke (String filePath) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        userInterface \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        userInterface.showWelcome();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            tasks \u003d new TaskList(storage.loadList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "           }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        catch (FileNotFoundException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "           userInterface.showLoadingError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        catch (IOException e){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"unable to create tasks.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The method run starts up the user interface and receive input from the users"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @exception DukeException if an unknown command is entered, it will show unknown Command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void run(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String textInput;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        while(!isExit) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                textInput \u003d userInterface.getTextInput().nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                userInterface.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                userInterface.dukeInput(tasks, textInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                if (textInput.equalsIgnoreCase(\"bye\")) isExit \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }catch (DukeException e){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                userInterface.showError(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            finally {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                userInterface.showLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static void main(String[] args) throws DukeException{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "       new Duke(\"tasks.txt\").run();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 76,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * The DukeException class extends from th Exception class and provides a way to give meaningful errors for the users"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The DukeException constructor accept messages which you wish to display to the users"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param message meaningful message regarding the error"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @see Exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "derrickyap": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.tasklist.Priority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * The Parser class make sense of the various commands input by the user. It will look for the key details"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * necessary for each task and if they are missing, it will provide information regarding the missing details"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private String todoDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private String deadlineDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private String eventDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private String listIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private LocalDate deadlineDate, eventDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private LocalTime eventStartTime, eventEndTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private Priority taskPriority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The Parser constructor takes a String parameter and looks for the key details required for each tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * It will look for the following Command Keywords:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * list, bye, sort, done, delete, find, set, todo, deadline, event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param textInput is the input from the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @throws DukeException if the command are not list, bye or sort for single word command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Parser(String textInput) throws DukeException{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        boolean isSingleCommand \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String[] textInputArr \u003d textInput.split(\" \",2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        command \u003d textInputArr[0].toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        if (command.equals(\"list\") ||"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                command.equals(\"bye\") ||"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                command.equals(\"overdue\") ||"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                command.equals(\"sort\") ||"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                command.equals(\"help\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            isSingleCommand \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        if (textInputArr.length \u003c 2 \u0026\u0026 !isSingleCommand) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    I\u0027m not sure what is that. Type \\\"help\\\" to see what I can understand\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        switch(command.toLowerCase()){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"undone\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            listIndex \u003d textInputArr[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (textInputArr.length \u003c 2 ) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                throw new DukeException(\"    Please indicate a keyword to search in the list\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            taskDescription \u003d textInputArr[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            String[] listIndexPriority \u003d textInputArr[1].split(\" \", 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            listIndex \u003d listIndexPriority[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            strToPriority(listIndexPriority[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            getTodoDetails(textInputArr[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            getDeadlineDetails(textInputArr[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            getEventDetails(textInputArr[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (!isSingleCommand) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                throw new DukeException(\"    I\u0027m not sure what is that. Type \\\"help\\\" to see what I can understand\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private void getTodoDetails(String inputDetails) throws DukeException{"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String[] getTodoDetails \u003d inputDetails.split(\" /priority \", 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        if (getTodoDetails.length \u003c 2)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    ☹ OOPS!!! We are missing priority!\\n\" + \"    Please type \\\"todo description /priority level(high, medium or low)\\\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        todoDescription \u003d getTodoDetails[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        strToPriority(getTodoDetails[1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private void getDeadlineDetails(String inputDetails) throws DukeException{"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String[] getDeadlineDetails \u003d inputDetails.split(\" /priority \", 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        //extract deadline Description"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        if (getDeadlineDetails.length \u003c 2)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    ☹ OOPS!!! There are missing or incorrect details!\\n\" + \"    Please type \\\"deadline description /priority level(high, medium or low) /by yyyy-mm-dd\\\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        deadlineDescription \u003d getDeadlineDetails[0];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        //extract deadline priority"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String[] getDeadlinePriority \u003d getDeadlineDetails[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        strToPriority(getDeadlinePriority[0]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        //extract deadline date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String getDeadlineDate \u003d getDeadlinePriority[1];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        if (getDeadlineDate.isEmpty())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    ☹ OOPS!!! You did not specify a specific date/time for deadline. Please use /by yyyy-mm-dd\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            deadlineDate \u003d LocalDate.parse(getDeadlineDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    Please use YYYY-MM-dd for Date format\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private void getEventDetails(String inputDetails) throws DukeException{"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String[] getEventDetails \u003d inputDetails.split(\" /priority \", 2); // separate Event Description from Priority, Date and Time"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        if (getEventDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    ☹ OOPS!!! There are missing or incorrect details!\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                    \"    Please type as follows:\\n\" +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                    \"    \\\"event description /priority level(high, medium or low) /at yyyy-mm-dd Start time (HH:mm) - End time (HH:mm)\\\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        eventDescription \u003d getEventDetails[0];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String[] getEventPriority \u003d getEventDetails[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        strToPriority(getEventPriority[0]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        //separate event Date and Time"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String[] eventDateTime \u003d getEventPriority[1].split(\" \", 2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        if (eventDateTime.length \u003c 2)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException (\"    ☹ OOPS!!! We are missing date and time. Please use /at YYYY-mm-dd Start Time(HH:mm) - End Time(HH:mm)\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            eventDate \u003d LocalDate.parse(eventDateTime[0]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    Please use YYYY-MM-dd for Date format\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        //separate Start and End Time"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String[] eventStartEndTime \u003d eventDateTime[1].split(\" - \", 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        if (eventStartEndTime.length \u003c 2)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"  ☹ OOPS!!! Missing time information. Please use Start Time - End Time e.g. 10:00 - 12:00\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            eventStartTime \u003d LocalTime.parse(eventStartEndTime[0]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            eventEndTime \u003d LocalTime.parse(eventStartEndTime[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (eventStartTime.compareTo(eventEndTime) \u003e 0)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                throw new DukeException(\"    Your end time cannot be earlier than your start time\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    Please use HH:mm for Time format\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private void strToPriority(String strTaskPriority) throws DukeException{"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            taskPriority \u003d Priority.valueOf(strTaskPriority.toUpperCase());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (IllegalArgumentException e){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    Please use high, medium or low as priority level\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getCommand method return the command which is understood by Duke"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getCommand(){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getTodoDescription method return the Description for Todo task after parsing the command"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getTodoDescription(){"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return todoDescription;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getDeadlineDescription method return the Description for Deadline task after parsing the command"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getDeadlineDescription(){"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return deadlineDescription;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getDeadlineDate method return the date for Deadline task after parsing the command"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public LocalDate getDeadlineDate(){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return deadlineDate;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getEventDescription method return the Description for Event task after parsing the command"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getEventDescription(){"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return eventDescription;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getEventDate method return the date for Event task after parsing the command"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public LocalDate getEventDate(){"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getEventStartTime method return the Start Time for Event task after parsing the command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public LocalTime getEventStartTime(){return eventStartTime;};"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getEventEndTime method return the End Time for Event task after parsing the command"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public LocalTime getEventEndTime(){return eventEndTime;};"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getListIndex method return the Index for the list after parsing the command"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getListIndex(){"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return listIndex;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getTaskPriority method return the priority for the task after parsing the command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Priority getTaskPriority(){return taskPriority;}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getTaskDescription method return the description for each task type after parsing the command"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getTaskDescription(){return taskDescription;}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 210
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.tasklist.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * Storage class allows the Task List to interact with the file. A Storage object is able"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * to read the data from the file and write changes to the file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static File taskFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The Storage Constructor accept the location of the file and creates a new File object for that file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param fileName the full path of the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @throws IOException if the file cannot be created"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Storage (String fileName) throws IOException{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        taskFile \u003d new File(fileName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        if (taskFile.createNewFile()){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            System.out.println(\"    tasks.txt has been created\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            System.out.println(\"    task.txt has been found\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The loadList method attempts to load the list from the file and store into a list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return it will return a List object which contains the tasks loaded from the file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @throws DukeException if the file contains a task which cannot be recognise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @throws FileNotFoundException if there is any problem reading data from the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public List\u003cTask\u003e loadList() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        List\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        Scanner loadTask \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        while (loadTask.hasNext()){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            String[] readFileArr \u003d loadTask.nextLine().split(\" \\\\| \", 5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            //easier understanding of readFileArr parts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            String taskType \u003d readFileArr[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            String taskStatus \u003d readFileArr[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            String strTaskPriority \u003d readFileArr[2];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            String taskDescription \u003d readFileArr[3];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            boolean isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (taskStatus.equals(\"1\")){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            else isDone \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            Priority taskPriority \u003d Priority.priorityFromString(strTaskPriority);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            assert taskPriority !\u003dnull : \"taskPriority should not be null\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                tasksList.add(new Todo(taskDescription, isDone, taskPriority));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                String dlDate \u003d readFileArr[4];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                LocalDate deadlineDate \u003d LocalDate.parse(dlDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                tasksList.add(new Deadlines(taskDescription, deadlineDate, isDone, taskPriority));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                String eDateTime \u003d readFileArr[4];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                String [] eventDateTime \u003d eDateTime.split(\" \",2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                LocalDate eventDate \u003d LocalDate.parse(eventDateTime[0]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                String [] eventStartEndTime \u003d eventDateTime[1].split(\" - \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                LocalTime eStartTime \u003d LocalTime.parse(eventStartEndTime[0]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                LocalTime eEndTime \u003d LocalTime.parse(eventStartEndTime[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                tasksList.add(new Event(taskDescription, eventDate, eStartTime, eEndTime, isDone, taskPriority));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                throw new DukeException(\"    unknown task found\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return tasksList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The saveList method attempts to save the list to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param fileName is the full path of the file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param tasks is the list of tasks which you which to save"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @throws IOException if there is problem writing tot he file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static void saveList(String fileName, TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "      FileWriter taskSave \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        for (Task eachTask:taskList){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            taskSave.write(eachTask.saveToFile());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "      taskSave.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getFile method returns the File object that contains the list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return the File object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static File getFile(){return taskFile;};"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "derrickyap": 107
    }
  },
  {
    "path": "src/main/java/duke/tasklist/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * Represent a deadline task in a list. It extends from the Task class and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * a Deadline object refers to a deadline task which has description, date and priority level."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private DateTimeFormatter displayDateFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private DateTimeFormatter saveDateFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The Deadline constructor creates a deadline object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param description is the description of the Deadline task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param date is the deadline date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param isDone is the Deadline task status"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param taskPriority is the priority level for the Deadline task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Deadlines(String description, LocalDate date, boolean isDone, Priority taskPriority){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super.isDone \u003d isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super.taskPriority \u003d taskPriority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getDescription method overrides the method in Task class and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * returns the task in the following format to be represented on the screen"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * [D][Deadline task status][priority level]Deadline task description (Deadline Date)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return \"[D]\" + \"[\" + getStatusIcon() + \"][\" + super.getTaskPriorityToString() + \"]\" + super.getDescription() + \" (by:\" + date.format(displayDateFormat) + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The saveToFile method overrides the method in Task class and"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * returns the task in the following format to be save to the file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * D | Deadline task status | priority level | Deadline task description | Deadline Date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String saveToFile(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        int taskStatus \u003d isDone ? 1:0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return \"D | \" + taskStatus + \" | \" + super.getTaskPriorityToString() + \" | \" + super.getDescription() + \" | \" + date.format(saveDateFormat) + \"\\r\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getDate method overrides the method in Task class and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * returns the date for the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public LocalDate getDate(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 58
    }
  },
  {
    "path": "src/main/java/duke/tasklist/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * Represent an event task in a list. It extends from the Task class and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * an Event object refers to an Event task which has description,date,start time, end time and the priority level."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private LocalTime startTime, endTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private DateTimeFormatter displayDateFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private DateTimeFormatter displayTimeFormat \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private DateTimeFormatter saveDateFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private DateTimeFormatter saveTimeFormat \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The Event constructor creates an event object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param description is the description of the Event task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param date is the Event date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param startTime is the Event Start Time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param endTime is the Event End Time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param isDone is the Event task status"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param taskPriority is the priority level for the Event task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Event(String description, LocalDate date, LocalTime startTime, LocalTime endTime, boolean isDone, Priority taskPriority){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super.taskPriority \u003d taskPriority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getDescription method overrides the method in Task class and"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * returns the task in the following format to be represented on the screen"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * [E][Event task status][priority level]Event task description (Event Date Start Time - End Time)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return \"[E]\" + \"[\" + getStatusIcon() + \"][\" + super.getTaskPriorityToString() + \"]\" + super.getDescription() + \" (at:\" + date.format(displayDateFormat) + \" \" + startTime.format(displayTimeFormat) + \" - \" + endTime.format(displayTimeFormat) + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The saveToFile method overrides the method in Task class and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * returns the task in the following format to be save to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * E | Event task status | priority level | Event task description | Event Date Start Time - End Time"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String saveToFile(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        int taskStatus \u003d isDone ? 1:0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return \"E | \" + taskStatus + \" | \" + super.getTaskPriorityToString() + \" | \" + super.getDescription() + \" | \" + date.format(saveDateFormat) + \" \" + startTime.format(saveTimeFormat) + \" - \" + endTime.format(saveTimeFormat) + \"\\r\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getDate method overrides the method in Task class and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * returns the date for the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 63
    }
  },
  {
    "path": "src/main/java/duke/tasklist/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * This is the Priority level for individual task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * There are 3 levels: HIGH, MEDIUM, LOW"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    LOW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static Priority taskPriority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static String printTaskPriority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The priorityFromString method takes the String and convert to the equivalent Priority level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param strTaskPriority is the Priority level (H, M or L) in String format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return the equivalent Priority Level: H --\u003e HIGH, M --\u003e MEDIUM, L --\u003e LOW"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static Priority priorityFromString(String strTaskPriority){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        switch(strTaskPriority){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"L\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            taskPriority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"M\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            taskPriority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"H\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            taskPriority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return taskPriority;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The prioritytoString method takes the Priority object and convert to the equivalent String object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param taskPriority is the Priority level (HIGH, MEDIUM or LOW)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return the equivalent String object for the different priority level: HIGH --\u003e H, MEDIUM --\u003e M, LOW --\u003e L"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static String PriorityToString(Priority taskPriority){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        switch(taskPriority){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            printTaskPriority \u003d \"L\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            printTaskPriority \u003d \"M\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            printTaskPriority \u003d \"H\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return printTaskPriority;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 57
    }
  },
  {
    "path": "src/main/java/duke/tasklist/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * Represent a task in a list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private String description, printTaskPriority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    Priority taskPriority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * getStatusIcon will return ✓ if the task is done, or ✘ if it the task is not done"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * getDescription will the task Description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * markAsDone method is used to change the status of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param status True if the task is done, false if the task is not done"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void markAsDone(boolean status){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        this.isDone \u003d status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * setTaskPriority method is used to set the priority of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param taskPriority accepts high, medium or low as the task priority level"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void setTaskPriority(Priority taskPriority){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        this.taskPriority \u003d taskPriority;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * getTaskPriorityToString method is used to convert Priority object to the equivalent String object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return the equivalent String object for the different priority level: HIGH --\u003e H, MEDIUM --\u003e M, LOW --\u003e L"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getTaskPriorityToString(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        printTaskPriority \u003d Priority.PriorityToString(taskPriority);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return printTaskPriority;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * getTaskPriority method returns the priority level of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return the priority level of the task: HIGH, MEDIUM, LOW"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Priority getTaskPriority(){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return taskPriority;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public abstract String saveToFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 66
    }
  },
  {
    "path": "src/main/java/duke/tasklist/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * Represent a Todo task in a list. It extends from the Task class and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * A Todo object refers to a Todo task which has description and priority level."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The Todo constructor creates a Todo task object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param description is the description of the Todo task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param taskPriority is the priority level for the Todo task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Todo (String description, boolean isDone, Priority taskPriority){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super.isDone \u003d isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        super.taskPriority \u003d taskPriority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getDescription method overrides the method in Task class and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * returns the task in the following format to be represented on the screen"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * [T][task status][priority level]Todo task description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return \"[T]\" + \"[\" + getStatusIcon() + \"][\" + super.getTaskPriorityToString() + \"]\" + super.getDescription();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The saveToFile method overrides the method in Task class and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * returns the task in the following format to be save to the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * T | Todo task status | priority level | Todo task description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public String saveToFile(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        int taskStatus \u003d isDone ? 1:0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return \"T | \" + taskStatus + \" | \" + super.getTaskPriorityToString() + \" | \" + super.getDescription() + \"\\r\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getDate method overrides the method in Task class and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * returns the date for the task. For Todo task, the date will"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * always be the local day TODAY."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public LocalDate getDate(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 53
    }
  },
  {
    "path": "src/main/java/duke/tasklist/taskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * This is a TaskList class which manages the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * It is able to store Todo, Deadline and Event objects and the individual task details"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static ArrayList\u003cTask\u003e findTaskInList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static ArrayList\u003cTask\u003e findLateTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The first TaskList constructor which accept no parameters simply create an empty list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The second TaskList constructor accept a list of tasks, create a new list and load the tasks into the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param listTasks a list of containing multiple tasks object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public TaskList(List\u003cTask\u003e listTasks){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        taskList.addAll(listTasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * the displayList method display the list to the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param tList the TaskList which is to be displayed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param command to display various messages according to the command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static void displayList (ArrayList\u003cTask\u003e tList, String command){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        assert command !\u003d null:\"command cannot be null\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"late\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if(findLateTasks.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"    You do not have any overdue task\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"    Here are the overdue tasks in your list:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (taskList.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"    Your list is empty\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"    Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (findTaskInList.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"    We did not find any matching task in your list\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"    Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (taskList.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"    Your list is empty\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"     The tasks in your list are now sorted from High to Low Priority:\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        for (int index \u003d 1; index \u003c\u003d tList.size(); index++){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            System.out.println (\"     \" + index + \".\" + tList.get(index-1).getDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * markInList method mark the indicated task as done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param textInput is the task number"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static void markInList(String textInput, boolean taskStatus) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            taskList.get(Integer.parseInt(textInput) - 1).markAsDone(taskStatus);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (taskStatus){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"     Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            } else{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                System.out.println(\"     Ok! I\u0027ve marked this task as not done: \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            System.out.println (\"     \" + taskList.get(Integer.parseInt(textInput) - 1).getDescription());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    Please indicate task number\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (taskList.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                throw new DukeException(\"    Duke cannot mark a task as done or not done in an empty list\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                throw new DukeException(\"    Please indicate a task number within the list\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * deleteFromList method delete a task from list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param textInput is the task number"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @throws DukeException if the user did not indicate a task number, the task number did not exist,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * or the user attempt to delete from an empty list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static void deleteFromList(String textInput) throws DukeException{"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            String taskDescription \u003d taskList.get(Integer.parseInt(textInput) - 1).getDescription();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            taskList.remove(Integer.parseInt(textInput) - 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            System.out.println(\"    Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            System.out.println(\"     \" + taskDescription);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            System.out.println(\"    Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    Please indicate task number\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (taskList.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                throw new DukeException(\"    Duke cannot delete from an empty list\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                throw new DukeException(\"    Please indicate a task number within the list\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * addTodo method adds a Todo task to list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param td is the Todo object to be added to the list"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static void addTodo (Todo td){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        taskList.add(td);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        ui.dukeReply(taskList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * addDeadline method adds a Deadline task to list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param dl is the Deadline object to be added to the list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static void addDeadlines (Deadlines dl){"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        taskList.add(dl);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        ui.dukeReply(taskList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * addEvent method provides adds an Event task to list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param e is the event object to be added to the list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static void addEvent (Event e){"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        taskList.add(e);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        ui.dukeReply(taskList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * getList method retrieve the list of tasks"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return the current list of tasks"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static ArrayList\u003cTask\u003e getList (){"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * setTaskPriority method is to set the priority for the indicated task index"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param textInput is the task index in the list provided by the user"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param taskPriorityLevel is the priority level which the user wish to set for the task index indicated"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @throws DukeException when the task index is missing from the input"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static void setTaskPriority(String textInput, Priority taskPriorityLevel) throws DukeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            taskList.get(Integer.parseInt(textInput) - 1).setTaskPriority(taskPriorityLevel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            System.out.println(\"    Got it! I\u0027ve set the priority for this task: \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            System.out.println (\"     \" + taskList.get(Integer.parseInt(textInput) - 1).getDescription());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    Please indicate task number\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * priorityHighToLow method is to sort the tasks in the list in the order from High to Low Priority level"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return returns the sorted list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static ArrayList\u003cTask\u003e priorityHighToLow() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        Collections.sort(taskList, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                if (t1.getTaskPriority() \u003d\u003d t2.getTaskPriority()){"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                    return t1.getDescription().compareTo(t2.getDescription());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                } else"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                return t1.getTaskPriority().compareTo(t2.getTaskPriority());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        });"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * findInList method is to find a keyword matching the task description in the list"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return returns a list of tasks which has the matching keyword in it\u0027s description"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static ArrayList\u003cTask\u003e findInList(String searchStr){"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        findTaskInList\u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        for (Task task:taskList){"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if(task.getDescription().toLowerCase().contains(searchStr)){"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                findTaskInList.add(task);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return findTaskInList;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * lateTask method is to find tasks which is overdue from today\u0027s date"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @return returns a list of tasks which has the matching keyword in it\u0027s description"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static ArrayList\u003cTask\u003e lateTask(){"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        findLateTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        for (Task task:taskList){"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if(task.getDate().compareTo(LocalDate.now()) \u003c 0){"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                findLateTasks.add(task);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        return findLateTasks;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 220
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.tasklist.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " * The Ui class handles the user interaction"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static Scanner textInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The Ui constructor create a new Scanner object to receive the user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        textInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The showLine method creates a line at the start and end of Duke\u0027s reply"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void showLine(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"    _____________________________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The showWelcome method shows the logo of Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        dukeGreet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The dukeGreet method is Duke\u0027s greeting. This is a private method which is only used within Ui class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private void dukeGreet(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println (\"    Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println (\"    What can I do for you?\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println (\"    Type \\\"help\\\" to see what I can understand\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The dukeBye method is Duke\u0027s final message before ending the program"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void dukeBye(){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The showLoadingError method simply provide a message to indicate that there is an issue with loading from the file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void showLoadingError(){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println (\"    File not located\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The showError method shows the Unknown Command error if the user enter a command that is not recognize by Duke"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void showError(String errorMsg){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(errorMsg);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The dukeReply method provides a way for Duke to reply with details of the task added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void dukeReply(ArrayList\u003cTask\u003e taskList){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     \" + taskList.get(taskList.size()-1).getDescription());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The dukeInput method takes a string input and process the following commands."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * find, sort, list, done, delete, set, todo, deadline, event, bye."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param tasks is the list which which the command will apply to"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @param textInput is the text input by the user"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * @throws DukeException if the command is unknown (i.e. not as of the above)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void dukeInput (TaskList tasks, String textInput) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        Parser processCommand \u003d new Parser(textInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            switch (processCommand.getCommand()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                howToUseDuke();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"overdue\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.displayList(TaskList.lateTask(), \"late\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.displayList(TaskList.findInList(processCommand.getTaskDescription()), \"find\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"sort\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.displayList(TaskList.priorityHighToLow(), \"sort\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.displayList(TaskList.getList(), \"list\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.markInList(processCommand.getListIndex(),true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"undone\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.markInList(processCommand.getListIndex(),false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.deleteFromList(processCommand.getListIndex());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"set\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.setTaskPriority(processCommand.getListIndex(), processCommand.getTaskPriority());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.addTodo(new Todo(processCommand.getTodoDescription(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        false,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        processCommand.getTaskPriority()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.addDeadlines(new Deadlines(processCommand.getDeadlineDescription(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        processCommand.getDeadlineDate(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        false,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        processCommand.getTaskPriority()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                TaskList.addEvent(new Event(processCommand.getEventDescription(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        processCommand.getEventDate(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        processCommand.getEventStartTime(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        processCommand.getEventEndTime(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        false,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                        processCommand.getTaskPriority()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                dukeBye();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            if (!processCommand.getCommand().equals(\"find\") ||"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                    !processCommand.getCommand().equals(\"overdue\")){"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "                Storage.saveList(Storage.getFile().getAbsolutePath(), tasks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        catch (IOException e){"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    Unable to save to file\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        catch (ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            throw new DukeException(\"    I\u0027m not sure what is that. Type \\\"help\\\" to see what I can understand\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     * The getTextInput method returns the Scanner object created by the UI constructor"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public static Scanner getTextInput(){return textInput;}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    private void howToUseDuke(){"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     Things Duke can help you with               | Command:\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     ____________________________________________|_______________________________________________________________\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To show the task list loaded:               | \\\"list\\\"\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To add new Todo:                            | \\\"todo description /priority level(high, medium or low)\\\"\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To add new Deadlines:                       | \\\"deadline description /priority level(high, medium or low) /by yyyy-mm-dd\\\"\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To add new Event:                           | \\\"event description /priority level(high, medium or low) /at yyyy-mm-dd Start time (HH:mm) - End time (HH:mm)\\\"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To mark a Task as Done:                     | \\\"done [list index of task] e.g. done 4\\\"\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To mark a Task as Not Done:                 | \\\"undone [list index of task] e.g. undone 5\\\"\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To delete a Task from the list:             | \\\"delete [list index of task] e.g. delete 3\\\"\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To sort the list from High to Low Priority: | \\\"sort\\\"\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To search for overdue tasks:                | \\\"overdue\\\"\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     To end this program:                        | \\\"bye\\\"\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        System.out.println(\"     NOTE: Your list is automatically save to the file whenever you add a task, delete a task, or mark a task as done/not done!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 183
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.tasklist.Deadlines;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.tasklist.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.tasklist.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    //getDescription from Todo Class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void testTodoGetDescription(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        assertEquals(\"[T][\\u2718][H]test Todo High Priority\", new Todo(\"test Todo High Priority\", false, Priority.HIGH).getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    //saveToFile method from Deadlines Class"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void testDeadlineSaveToFile(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        assertEquals(\"D | 1 | L | test save to file | 2019-06-06\\r\", new Deadlines(\"test save to file\", LocalDate.parse(\"2019-06-06\"), true, Priority.LOW).saveToFile());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    //deleteFromList method from TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void testDeleteFromList(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            TaskList loadList \u003d new TaskList(new Storage(\"testtasks.txt\").loadList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            loadList.deleteFromList(\"1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            assertEquals(4, loadList.getList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (FileNotFoundException | DukeException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            new Ui().showLoadingError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    //DukeException from Parser Class"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    public void missingTime_Parser_throwException(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        String textInput \u003d \"event test wrong time format /priority High /at 2019-11-15 22:00\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            new Parser(textInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "            assertEquals(\"  ☹ OOPS!!! Missing time information. Please use Start Time - End Time e.g. 10:00 - 12:00\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "/*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "To quickly populate the file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "T | 1 | H | read book"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "D | 0 | L | return book | 2019-06-06"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "E | 0 | M | project meeting | 2019-08-06 22:00 - 23:00"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "T | 1 | L | join sports club"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "D | 0 | L | test save file | 2019-11-09"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "derrickyap"
        },
        "content": " */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 65
    }
  },
  {
    "path": "src/test/testtasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "T | 1 | H | read book"
      },
      {
        "lineNumber": 2,
        "content": "D | 0 | L | return book | 2019-06-06"
      },
      {
        "lineNumber": 3,
        "content": "E | 0 | M | project meeting | 2019-08-06 22:00 - 23:00"
      },
      {
        "lineNumber": 4,
        "content": "T | 1 | L | join sports club"
      },
      {
        "lineNumber": 5,
        "content": "D | 0 | L | test save file | 2019-11-09"
      }
    ],
    "authorContributionMap": {
      "null": 4,
      "derrickyap": 1
    }
  },
  {
    "path": "tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "D | 0 | H | to file tax | 2019-12-22"
      },
      {
        "lineNumber": 2,
        "content": "E | 0 | H | Christmas Party | 2020-12-25 15:00 - 22:00"
      },
      {
        "lineNumber": 3,
        "content": "T | 1 | H | read book"
      },
      {
        "lineNumber": 4,
        "content": "D | 0 | M | buy gifts for Christmas Party | 2019-12-01"
      },
      {
        "lineNumber": 5,
        "content": "E | 0 | M | project meeting | 2019-08-06 22:00 - 23:00"
      },
      {
        "lineNumber": 6,
        "content": "T | 1 | M | buy lunch"
      },
      {
        "lineNumber": 7,
        "content": "D | 0 | L | return book | 2019-08-06"
      },
      {
        "lineNumber": 8,
        "content": "E | 0 | M | fashion show | 2020-01-01 15:00 - 19:00"
      }
    ],
    "authorContributionMap": {
      "null": 7,
      "derrickyap": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "derrickyap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "derrickyap"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "derrickyap": 34
    }
  }
]
